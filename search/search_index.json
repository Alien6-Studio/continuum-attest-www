{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CONTINUUM ATTEST","text":""},{"location":"#welcome_to_continuum_attest","title":"Welcome to Continuum Attest","text":"<p>Verifiable CI/CD Platform with Cryptographic Attestation</p> <p>ATTEST is the only CI/CD platform that provides end-to-end cryptographic attestation, from source code to production deployment. Every build step is signed, every artifact is verified, and every deployment is provable.</p>"},{"location":"#quick_navigation","title":"Quick Navigation","text":"<ul> <li>New to ATTEST? Start with Overview then Installation</li> <li>Ready to build? Jump to First Steps </li> <li>Core concepts? Read Core Concepts</li> <li>Having issues? Visit Troubleshooting</li> </ul>"},{"location":"#what_youll_learn","title":"What You'll Learn","text":"<p>This user guide will teach you how to:</p> <ul> <li>Install and configure ATTEST on any system</li> <li>Create secure pipelines with cryptographic attestation</li> <li>Implement GitOps workflows with Kubernetes</li> <li>Enforce policies and maintain compliance</li> <li>Optimize performance with intelligent caching</li> <li>Migrate existing CI/CD pipelines to ATTEST</li> <li>Scale enterprise-wide with governance and monitoring</li> </ul>"},{"location":"#getting_started","title":"Getting Started","text":"<p>The fastest way to get started:</p> <pre><code># Install ATTEST\ncurl -sSL https://raw.githubusercontent.com/Alien6-Studio/continuum-attest/main/scripts/install.sh | sh\n\n# Create your first pipeline\ncd your-project\nattest init\n\n# Run with full security\nattest run --verify --sign\n</code></pre>"},{"location":"#key_features","title":"Key Features","text":"<ul> <li>Cryptographic Attestation: Every build step signed with Ed25519</li> <li>Content-Addressed Caching: Blake3-based intelligent caching</li> <li>GitOps Native: Kubernetes CRDs with verification</li> <li>Policy Enforcement: OPA/Gatekeeper integration</li> <li>Multi-Cloud: Deploy across any Kubernetes cluster</li> <li>Audit Ready: SOX, HIPAA, and compliance frameworks</li> </ul>"},{"location":"#documentation_sections","title":"Documentation Sections","text":"Section Description Getting Started Installation, first steps, core concepts User Guide Pipeline config, CLI, attestation, caching Advanced Topics GitOps, policies, CI/CD integration, monitoring Practical Applications Examples, migration, enterprise, troubleshooting Reference API docs, pipeline format, FAQ, glossary <p>Ready to revolutionize your CI/CD? \u2192 Get Started</p>"},{"location":"api/","title":"API & SDK","text":"<p>ATTEST provides comprehensive REST APIs and SDKs for programmatic access to pipeline management, attestation services, and verification capabilities. This enables deep integration with existing tools and custom automation.</p>"},{"location":"api/#1_rest_api","title":"1. REST API","text":""},{"location":"api/#11_authentication","title":"1.1 Authentication","text":""},{"location":"api/#api_key_authentication","title":"API Key Authentication","text":"<pre><code># Get API key\nattest auth generate-key --name \"ci-automation\" --scope \"pipelines:write\"\n\n# Use in requests\ncurl -H \"Authorization: Bearer attest_key_abc123...\" \\\n  https://api.attest.continuu.ms/v1/pipelines\n</code></pre>"},{"location":"api/#jwt_token_authentication","title":"JWT Token Authentication","text":"<pre><code># Get JWT token\nattest auth login --output-token\n\n# Use token\nexport ATTEST_TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\ncurl -H \"Authorization: Bearer $ATTEST_TOKEN\" \\\n  https://api.attest.continuu.ms/v1/user/profile\n</code></pre>"},{"location":"api/#base_url_and_versioning","title":"Base URL and Versioning","text":"<pre><code>Base URL: https://api.attest.continuu.ms\nCurrent Version: v1\nAPI Endpoint: https://api.attest.continuu.ms/v1\n</code></pre>"},{"location":"api/#pipelines_api","title":"Pipelines API","text":""},{"location":"api/#create_pipeline","title":"Create Pipeline","text":"<pre><code>POST /v1/pipelines\nContent-Type: application/json\nAuthorization: Bearer &lt;token&gt;\n\n{\n  \"name\": \"web-app-build\",\n  \"description\": \"Frontend application build pipeline\",\n  \"config\": {\n    \"version\": \"0.1\",\n    \"steps\": [\n      {\n        \"name\": \"install\",\n        \"run\": \"npm ci\",\n        \"inputs\": [\"package.json\", \"package-lock.json\"],\n        \"outputs\": [\"node_modules/\"]\n      },\n      {\n        \"name\": \"build\",\n        \"run\": \"npm run build\",\n        \"inputs\": [\"src/\", \"public/\"],\n        \"outputs\": [\"dist/\"],\n        \"needs\": [\"install\"]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"api/#list_pipelines","title":"List Pipelines","text":"<pre><code>GET /v1/pipelines?limit=20&amp;offset=0&amp;sort=created_at:desc\nAuthorization: Bearer &lt;token&gt;\n\nResponse:\n{\n  \"pipelines\": [\n    {\n      \"id\": \"pip_abc123\",\n      \"name\": \"web-app-build\",\n      \"status\": \"active\",\n      \"created_at\": \"2024-12-01T10:00:00Z\",\n      \"updated_at\": \"2024-12-01T15:30:00Z\",\n      \"executions\": 45,\n      \"success_rate\": 0.94\n    }\n  ],\n  \"total\": 15,\n  \"has_more\": false\n}\n</code></pre>"},{"location":"api/#execute_pipeline","title":"Execute Pipeline","text":"<pre><code>POST /v1/pipelines/pip_abc123/executions\nContent-Type: application/json\nAuthorization: Bearer &lt;token&gt;\n\n{\n  \"environment\": \"production\",\n  \"variables\": {\n    \"NODE_ENV\": \"production\",\n    \"API_URL\": \"https://api.company.com\"\n  },\n  \"options\": {\n    \"sign\": true,\n    \"verify\": true,\n    \"cache\": true\n  }\n}\n\nResponse:\n{\n  \"execution_id\": \"exec_def456\",\n  \"status\": \"running\",\n  \"started_at\": \"2024-12-01T16:00:00Z\",\n  \"pipeline_url\": \"/v1/pipelines/pip_abc123\",\n  \"logs_url\": \"/v1/executions/exec_def456/logs\",\n  \"receipt_url\": \"/v1/executions/exec_def456/receipt\"\n}\n</code></pre>"},{"location":"api/#executions_api","title":"Executions API","text":""},{"location":"api/#get_execution_status","title":"Get Execution Status","text":"<pre><code>GET /v1/executions/exec_def456\nAuthorization: Bearer &lt;token&gt;\n\nResponse:\n{\n  \"id\": \"exec_def456\",\n  \"pipeline_id\": \"pip_abc123\",\n  \"status\": \"completed\",\n  \"exit_code\": 0,\n  \"started_at\": \"2024-12-01T16:00:00Z\",\n  \"completed_at\": \"2024-12-01T16:05:30Z\",\n  \"duration_seconds\": 330,\n  \"steps\": [\n    {\n      \"name\": \"install\",\n      \"status\": \"completed\",\n      \"exit_code\": 0,\n      \"duration_seconds\": 120,\n      \"cache_hit\": true\n    },\n    {\n      \"name\": \"build\",\n      \"status\": \"completed\", \n      \"exit_code\": 0,\n      \"duration_seconds\": 180,\n      \"cache_hit\": false\n    }\n  ]\n}\n</code></pre>"},{"location":"api/#get_execution_logs","title":"Get Execution Logs","text":"<pre><code>GET /v1/executions/exec_def456/logs?step=build&amp;tail=100\nAuthorization: Bearer &lt;token&gt;\n\nResponse:\n{\n  \"logs\": [\n    {\n      \"timestamp\": \"2024-12-01T16:03:15Z\",\n      \"step\": \"build\",\n      \"level\": \"info\",\n      \"message\": \"Starting build process...\"\n    },\n    {\n      \"timestamp\": \"2024-12-01T16:05:20Z\",\n      \"step\": \"build\",\n      \"level\": \"info\",\n      \"message\": \"Build completed successfully\"\n    }\n  ],\n  \"total_lines\": 1247,\n  \"has_more\": true\n}\n</code></pre>"},{"location":"api/#receipts_api","title":"Receipts API","text":""},{"location":"api/#get_receipt","title":"Get Receipt","text":"<pre><code>GET /v1/executions/exec_def456/receipt\nAuthorization: Bearer &lt;token&gt;\n\nResponse:\n{\n  \"receipt\": {\n    \"pipeline_hash\": \"blake3:abc123def456...\",\n    \"timestamp\": \"2024-12-01T16:05:30Z\",\n    \"total_duration_secs\": 330,\n    \"attest_version\": \"0.1.2\",\n    \"steps\": [...],\n    \"signature\": \"ed25519:signature_hex...\",\n    \"signer_public_key\": \"ed25519:public_key_hex...\"\n  },\n  \"verification\": {\n    \"signature_valid\": true,\n    \"timestamp_valid\": true,\n    \"chain_of_trust\": \"verified\"\n  }\n}\n</code></pre>"},{"location":"api/#verify_receipt","title":"Verify Receipt","text":"<pre><code>POST /v1/receipts/verify\nContent-Type: application/json\nAuthorization: Bearer &lt;token&gt;\n\n{\n  \"receipt\": { ... },\n  \"trusted_keys\": [\"ed25519:key1...\", \"ed25519:key2...\"],\n  \"policies\": [\"require-signature\", \"max-age-24h\"]\n}\n\nResponse:\n{\n  \"valid\": true,\n  \"signature_verification\": {\n    \"valid\": true,\n    \"signer\": \"ci-system@company.com\",\n    \"algorithm\": \"ed25519\"\n  },\n  \"policy_compliance\": {\n    \"passed\": true,\n    \"violations\": []\n  },\n  \"timestamp_check\": {\n    \"valid\": true,\n    \"age_hours\": 2.5\n  }\n}\n</code></pre>"},{"location":"api/#cache_api","title":"Cache API","text":""},{"location":"api/#get_cache_statistics","title":"Get Cache Statistics","text":"<pre><code>GET /v1/cache/stats\nAuthorization: Bearer &lt;token&gt;\n\nResponse:\n{\n  \"total_size_bytes\": 1073741824,\n  \"total_entries\": 1234,\n  \"hit_rate\": 0.85,\n  \"miss_rate\": 0.15,\n  \"backends\": {\n    \"local\": {\n      \"size_bytes\": 536870912,\n      \"entries\": 567,\n      \"hit_rate\": 0.92\n    },\n    \"s3\": {\n      \"size_bytes\": 536870912,\n      \"entries\": 667,\n      \"hit_rate\": 0.78\n    }\n  }\n}\n</code></pre>"},{"location":"api/#cache_operations","title":"Cache Operations","text":"<pre><code>DELETE /v1/cache/objects/blake3:abc123def456...\nAuthorization: Bearer &lt;token&gt;\n\nPOST /v1/cache/gc\nContent-Type: application/json\nAuthorization: Bearer &lt;token&gt;\n\n{\n  \"max_age_days\": 7,\n  \"target_size_percent\": 80,\n  \"aggressive\": false\n}\n</code></pre>"},{"location":"api/#2_sdks","title":"2. SDKs","text":""},{"location":"api/#python_sdk","title":"Python SDK","text":""},{"location":"api/#311_installation","title":"3.1.1 Installation","text":"<pre><code>pip install attest-sdk\n</code></pre>"},{"location":"api/#312_basic_usage","title":"3.1.2 Basic Usage","text":"<pre><code>from attest import AttestClient\n\n# Initialize client\nclient = AttestClient(\n    api_key=\"attest_key_abc123...\",\n    base_url=\"https://api.attest.continuu.ms\"\n)\n\n# Create pipeline\npipeline = client.pipelines.create(\n    name=\"python-app\",\n    config={\n        \"version\": \"0.1\",\n        \"steps\": [\n            {\n                \"name\": \"test\",\n                \"run\": \"python -m pytest\",\n                \"inputs\": [\"src/\", \"tests/\"],\n                \"outputs\": [\"coverage.xml\"]\n            }\n        ]\n    }\n)\n\n# Execute pipeline\nexecution = pipeline.execute(\n    environment=\"staging\",\n    variables={\"PYTHON_ENV\": \"test\"},\n    options={\"sign\": True, \"verify\": True}\n)\n\n# Wait for completion\nexecution.wait_for_completion(timeout=300)\n\n# Get receipt\nreceipt = execution.get_receipt()\nif receipt.verify():\n    print(\"Pipeline executed successfully with valid attestation\")\nelse:\n    print(\"Verification failed\")\n</code></pre>"},{"location":"api/#advanced_features","title":"Advanced Features","text":"<pre><code># Streaming logs\nfor log_entry in execution.stream_logs():\n    print(f\"[{log_entry.step}] {log_entry.message}\")\n\n# Custom verification\nverifier = client.create_verifier(\n    trusted_keys=[\"ed25519:key1...\", \"ed25519:key2...\"],\n    policies=[\"require-tests\", \"security-scan\"]\n)\n\nis_valid = verifier.verify_receipt(receipt)\n\n# Cache management\ncache = client.cache\nstats = cache.get_stats()\nprint(f\"Cache hit rate: {stats.hit_rate:.2%}\")\n\n# Bulk operations\nresults = client.pipelines.bulk_execute([\n    {\"pipeline_id\": \"pip_1\", \"environment\": \"staging\"},\n    {\"pipeline_id\": \"pip_2\", \"environment\": \"production\"}\n])\n</code></pre>"},{"location":"api/#javascripttypescript_sdk","title":"JavaScript/TypeScript SDK","text":""},{"location":"api/#321_installation","title":"3.2.1 Installation","text":"<pre><code>npm install @attest/sdk\n</code></pre>"},{"location":"api/#322_basic_usage","title":"3.2.2 Basic Usage","text":"<pre><code>import { AttestClient } from '@attest/sdk';\n\nconst client = new AttestClient({\n  apiKey: 'attest_key_abc123...',\n  baseUrl: 'https://api.attest.continuu.ms'\n});\n\n// Create and execute pipeline\nconst pipeline = await client.pipelines.create({\n  name: 'node-app',\n  config: {\n    version: '0.1',\n    steps: [\n      {\n        name: 'install',\n        run: 'npm ci',\n        inputs: ['package.json', 'package-lock.json'],\n        outputs: ['node_modules/']\n      },\n      {\n        name: 'build',\n        run: 'npm run build',\n        inputs: ['src/', 'public/'],\n        outputs: ['dist/'],\n        needs: ['install']\n      }\n    ]\n  }\n});\n\nconst execution = await pipeline.execute({\n  environment: 'production',\n  variables: { NODE_ENV: 'production' },\n  options: { sign: true, verify: true }\n});\n\n// Monitor execution\nexecution.on('status_changed', (status) =&gt; {\n  console.log(`Pipeline status: ${status}`);\n});\n\nexecution.on('step_completed', (step) =&gt; {\n  console.log(`Step ${step.name} completed in ${step.duration}s`);\n});\n\nconst result = await execution.waitForCompletion();\nconst receipt = await execution.getReceipt();\n\nif (await receipt.verify()) {\n  console.log('Pipeline completed with valid attestation');\n}\n</code></pre>"},{"location":"api/#go_sdk","title":"Go SDK","text":""},{"location":"api/#331_installation","title":"3.3.1 Installation","text":"<pre><code>go get github.com/attest-dev/go-sdk\n</code></pre>"},{"location":"api/#332_basic_usage","title":"3.3.2 Basic Usage","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/attest-dev/go-sdk/attest\"\n)\n\nfunc main() {\n    client := attest.NewClient(&amp;attest.Config{\n        APIKey:  \"attest_key_abc123...\",\n        BaseURL: \"https://api.attest.continuu.ms\",\n    })\n\n    // Create pipeline\n    pipeline, err := client.Pipelines.Create(context.Background(), &amp;attest.PipelineConfig{\n        Name: \"go-app\",\n        Config: &amp;attest.Config{\n            Version: \"0.1\",\n            Steps: []attest.Step{\n                {\n                    Name:    \"test\",\n                    Run:     \"go test ./...\",\n                    Inputs:  []string{\"*.go\", \"go.mod\", \"go.sum\"},\n                    Outputs: []string{\"coverage.out\"},\n                },\n                {\n                    Name:    \"build\",\n                    Run:     \"go build -o app\",\n                    Inputs:  []string{\"*.go\"},\n                    Outputs: []string{\"app\"},\n                    Needs:   []string{\"test\"},\n                },\n            },\n        },\n    })\n    if err != nil {\n        panic(err)\n    }\n\n    // Execute pipeline\n    execution, err := pipeline.Execute(context.Background(), &amp;attest.ExecuteOptions{\n        Environment: \"production\",\n        Variables: map[string]string{\n            \"CGO_ENABLED\": \"0\",\n            \"GOOS\":        \"linux\",\n        },\n        Sign:   true,\n        Verify: true,\n    })\n    if err != nil {\n        panic(err)\n    }\n\n    // Wait for completion\n    result, err := execution.WaitForCompletion(context.Background())\n    if err != nil {\n        panic(err)\n    }\n\n    // Verify receipt\n    receipt, err := execution.GetReceipt(context.Background())\n    if err != nil {\n        panic(err)\n    }\n\n    valid, err := receipt.Verify(context.Background())\n    if err != nil {\n        panic(err)\n    }\n\n    if valid {\n        fmt.Println(\"Pipeline completed with valid attestation\")\n    }\n}\n</code></pre>"},{"location":"api/#rust_sdk","title":"Rust SDK","text":""},{"location":"api/#341_installation","title":"3.4.1 Installation","text":"<pre><code>[dependencies]\nattest-sdk = \"0.1\"\ntokio = { version = \"1.0\", features = [\"full\"] }\n</code></pre>"},{"location":"api/#342_basic_usage","title":"3.4.2 Basic Usage","text":"<pre><code>use attest_sdk::{AttestClient, PipelineConfig, Step, ExecuteOptions};\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    let client = AttestClient::new(\"attest_key_abc123...\", \"https://api.attest.continuu.ms\")?;\n\n    // Create pipeline\n    let pipeline = client.pipelines().create(PipelineConfig {\n        name: \"rust-app\".to_string(),\n        config: attest_sdk::Config {\n            version: \"0.1\".to_string(),\n            steps: vec![\n                Step {\n                    name: \"test\".to_string(),\n                    run: \"cargo test\".to_string(),\n                    inputs: vec![\"src/\".to_string(), \"Cargo.toml\".to_string()],\n                    outputs: vec![\"target/debug/\".to_string()],\n                    needs: vec![],\n                },\n                Step {\n                    name: \"build\".to_string(),\n                    run: \"cargo build --release\".to_string(),\n                    inputs: vec![\"src/\".to_string(), \"Cargo.toml\".to_string()],\n                    outputs: vec![\"target/release/\".to_string()],\n                    needs: vec![\"test\".to_string()],\n                },\n            ],\n        },\n    }).await?;\n\n    // Execute pipeline\n    let execution = pipeline.execute(ExecuteOptions {\n        environment: Some(\"production\".to_string()),\n        variables: vec![\n            (\"RUSTFLAGS\".to_string(), \"-C target-cpu=native\".to_string()),\n        ].into_iter().collect(),\n        sign: true,\n        verify: true,\n        ..Default::default()\n    }).await?;\n\n    // Stream logs\n    let mut log_stream = execution.stream_logs().await?;\n    while let Some(log_entry) = log_stream.next().await {\n        println!(\"[{}] {}\", log_entry.step, log_entry.message);\n    }\n\n    // Get result\n    let result = execution.wait_for_completion().await?;\n    let receipt = execution.get_receipt().await?;\n\n    if receipt.verify().await? {\n        println!(\"Pipeline completed with valid attestation\");\n    }\n\n    Ok(())\n}\n</code></pre>"},{"location":"api/#3_webhooks","title":"3. Webhooks","text":""},{"location":"api/#configuration","title":"Configuration","text":"<pre><code>POST /v1/webhooks\nContent-Type: application/json\nAuthorization: Bearer &lt;token&gt;\n\n{\n  \"url\": \"https://ci.company.com/attest-webhook\",\n  \"events\": [\"execution.completed\", \"execution.failed\", \"receipt.signed\"],\n  \"secret\": \"webhook_secret_key\",\n  \"active\": true\n}\n</code></pre>"},{"location":"api/#event_types","title":"Event Types","text":""},{"location":"api/#execution_events","title":"Execution Events","text":"<pre><code>{\n  \"event\": \"execution.completed\",\n  \"timestamp\": \"2024-12-01T16:05:30Z\",\n  \"data\": {\n    \"execution_id\": \"exec_def456\",\n    \"pipeline_id\": \"pip_abc123\",\n    \"status\": \"completed\",\n    \"duration_seconds\": 330,\n    \"exit_code\": 0,\n    \"receipt_url\": \"/v1/executions/exec_def456/receipt\"\n  }\n}\n</code></pre>"},{"location":"api/#receipt_events","title":"Receipt Events","text":"<pre><code>{\n  \"event\": \"receipt.signed\",\n  \"timestamp\": \"2024-12-01T16:05:30Z\",\n  \"data\": {\n    \"execution_id\": \"exec_def456\",\n    \"receipt_hash\": \"blake3:abc123def456...\",\n    \"signature\": \"ed25519:signature_hex...\",\n    \"signer\": \"ci-system@company.com\"\n  }\n}\n</code></pre>"},{"location":"api/#webhook_verification","title":"Webhook Verification","text":"<pre><code>import hmac\nimport hashlib\n\ndef verify_webhook(payload, signature, secret):\n    expected = hmac.new(\n        secret.encode(),\n        payload.encode(),\n        hashlib.sha256\n    ).hexdigest()\n\n    return hmac.compare_digest(f\"sha256={expected}\", signature)\n\n# Usage\nif verify_webhook(request.body, request.headers['X-Attest-Signature'], webhook_secret):\n    process_webhook(request.json())\nelse:\n    return 401  # Unauthorized\n</code></pre>"},{"location":"api/#4_rate_limiting","title":"4. Rate Limiting","text":""},{"location":"api/#limits","title":"Limits","text":"<pre><code>Tier          | Requests/minute | Burst\n--------------|-----------------|-------\nFree          | 100            | 200\nProfessional  | 1,000          | 2,000\nEnterprise    | 10,000         | 20,000\n</code></pre>"},{"location":"api/#rate_limit_headers","title":"Rate Limit Headers","text":"<pre><code>HTTP/1.1 200 OK\nX-RateLimit-Limit: 1000\nX-RateLimit-Remaining: 999\nX-RateLimit-Reset: 1638360000\n</code></pre>"},{"location":"api/#handling_rate_limits","title":"Handling Rate Limits","text":"<pre><code>import time\nfrom attest_sdk.exceptions import RateLimitExceeded\n\ntry:\n    result = client.pipelines.execute(pipeline_id)\nexcept RateLimitExceeded as e:\n    wait_time = int(e.reset_at) - int(time.time())\n    time.sleep(wait_time)\n    result = client.pipelines.execute(pipeline_id)  # Retry\n</code></pre>"},{"location":"api/#5_error_handling","title":"5. Error Handling","text":""},{"location":"api/#error_response_format","title":"Error Response Format","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Invalid pipeline configuration\",\n    \"details\": {\n      \"field\": \"steps[0].run\",\n      \"issue\": \"Command cannot be empty\"\n    },\n    \"request_id\": \"req_abc123\"\n  }\n}\n</code></pre>"},{"location":"api/#common_error_codes","title":"Common Error Codes","text":"Code HTTP Status Description AUTHENTICATION_FAILED 401 Invalid or expired token AUTHORIZATION_FAILED 403 Insufficient permissions VALIDATION_ERROR 400 Invalid request data RESOURCE_NOT_FOUND 404 Resource doesn't exist RATE_LIMIT_EXCEEDED 429 Too many requests INTERNAL_ERROR 500 Server error"},{"location":"api/#6_best_practices","title":"6. Best Practices","text":""},{"location":"api/#api_usage","title":"API Usage","text":"<ol> <li>Use appropriate timeouts for long-running operations</li> <li>Implement retry logic with exponential backoff</li> <li>Handle rate limits gracefully</li> <li>Validate responses before processing</li> <li>Use webhook events instead of polling when possible</li> </ol>"},{"location":"api/#72_security","title":"7.2 Security","text":"<ol> <li>Store API keys securely (never in code)</li> <li>Use HTTPS only for all API calls</li> <li>Validate webhook signatures </li> <li>Implement proper error handling without exposing secrets</li> <li>Rotate API keys regularly</li> </ol>"},{"location":"api/#73_performance","title":"7.3 Performance","text":"<ol> <li>Use bulk operations when available</li> <li>Cache API responses when appropriate</li> <li>Implement connection pooling for high-volume usage</li> <li>Use streaming endpoints for real-time data</li> <li>Monitor API usage and optimize calls</li> </ol> <p>The ATTEST API and SDKs provide powerful programmatic access to all platform capabilities, enabling seamless integration with existing development workflows and tools.</p>"},{"location":"attestation/","title":"Attestation & Signatures","text":""},{"location":"attestation/#1_overview","title":"1. Overview","text":"<p>ATTEST uses cryptographic attestation to create tamper-proof records of build processes. Every step in your pipeline is cryptographically signed and verifiable, providing complete audit trails and supply chain security.</p>"},{"location":"attestation/#2_ed25519_cryptographic_signatures","title":"2. Ed25519 Cryptographic Signatures","text":""},{"location":"attestation/#21_why_ed25519","title":"2.1 Why Ed25519?","text":"<p>ATTEST uses Ed25519 signatures for optimal security and performance:</p> <ul> <li>Fast: Extremely fast signing and verification</li> <li>Secure: Cryptographically strong (256-bit security)</li> <li>Deterministic: Same input always produces same signature</li> <li>Small: Compact signature size (64 bytes)</li> <li>Widely supported: Standard across security tools</li> </ul>"},{"location":"attestation/#22_key_management","title":"2.2 Key Management","text":"<pre><code># Generate new key pair\nattest keys generate --algorithm ed25519\n\n# View public key (safe to share)\nattest keys show --public\n\n# Import existing key\nattest keys import --private-key path/to/key.pem\n\n# List all keys\nattest keys list\n</code></pre>"},{"location":"attestation/#3_receipt_structure","title":"3. Receipt Structure","text":""},{"location":"attestation/#31_complete_receipt_format","title":"3.1 Complete Receipt Format","text":"<pre><code># receipt_20241201_143052.yaml\npipeline_hash: \"blake3:abc123def456...\"\ntimestamp: \"2024-12-01T14:30:52Z\"\ntotal_duration_secs: 127\nattest_version: \"0.1.2\"\n\nenvironment:\n  host_os: \"linux\"\n  host_arch: \"x86_64\"\n  user: \"ci-user\"\n  working_directory: \"/workspace\"\n\nsteps:\n  - name: \"build\"\n    command: \"npm run build\"\n    exit_code: 0\n    duration_secs: 45\n    start_time: \"2024-12-01T14:30:07Z\"\n    end_time: \"2024-12-01T14:30:52Z\"\n    inputs:\n      - path: \"src/\"\n        hash: \"blake3:def456abc123...\"\n        size_bytes: 15420\n      - path: \"package.json\"\n        hash: \"blake3:789xyz456abc...\"\n        size_bytes: 1024\n    outputs:\n      - path: \"dist/\"\n        hash: \"blake3:xyz789def456...\"\n        size_bytes: 45120\n    environment_snapshot:\n      NODE_ENV: \"production\"\n      CI: \"true\"\n\n# Cryptographic proof\nsignature: \"ed25519:signature_hex_string...\"\nsigner_public_key: \"ed25519:public_key_hex...\"\nsignature_algorithm: \"ed25519\"\n</code></pre>"},{"location":"attestation/#4_attestation_types","title":"4. Attestation Types","text":""},{"location":"attestation/#41_build_attestations","title":"4.1 Build Attestations","text":"<p>Prove that artifacts were built correctly:</p> <pre><code>attestations:\n  build:\n    type: \"attest/build\"\n    predicate:\n      builder:\n        id: \"attest@v0.1.2\"\n      recipe:\n        type: \"attest/pipeline\"\n        defined_in: \"attest.yaml\"\n      materials:\n        - uri: \"git+https://github.com/company/app@abc123\"\n          digest: \"sha256:def456...\"\n      byproducts:\n        - name: \"build-log\"\n          uri: \"file://build.log\"\n</code></pre>"},{"location":"attestation/#42_test_attestations","title":"4.2 Test Attestations","text":"<p>Verify test execution and results:</p> <pre><code>attestations:\n  test:\n    type: \"attest/test\"\n    predicate:\n      test_framework: \"jest\"\n      test_results:\n        total: 150\n        passed: 148\n        failed: 2\n        skipped: 0\n      coverage:\n        lines: 85.4\n        branches: 82.1\n        functions: 90.2\n</code></pre>"},{"location":"attestation/#43_security_scan_attestations","title":"4.3 Security Scan Attestations","text":"<p>Document security scanning results:</p> <pre><code>attestations:\n  security:\n    type: \"attest/vulnerability-scan\"\n    predicate:\n      scanner:\n        name: \"trivy\"\n        version: \"0.45.0\"\n      results:\n        vulnerabilities:\n          critical: 0\n          high: 2\n          medium: 5\n          low: 12\n        scan_date: \"2024-12-01T14:25:00Z\"\n</code></pre>"},{"location":"attestation/#5_verification_process","title":"5. Verification Process","text":""},{"location":"attestation/#51_signature_verification","title":"5.1 Signature Verification","text":"<pre><code># Verify a single receipt\nattest verify receipt_20241201_143052.yaml\n\n# Verify with specific public key\nattest verify receipt_20241201_143052.yaml \\\n  --public-key ed25519-key-abc123...\n\n# Verify against trusted keyring\nattest verify receipt_20241201_143052.yaml \\\n  --trusted-keys-file trusted-keys.pem\n\n# Batch verification\nfind .attest/receipts -name \"*.yaml\" -exec attest verify {} \\;\n</code></pre>"},{"location":"attestation/#52_trust_chains","title":"5.2 Trust Chains","text":"<pre><code># Establish trust relationships\nattest keys trust alice@company.com.pub \\\n  --role developer \\\n  --scope \"project:myapp\"\n\n# Verify trust chain\nattest verify receipt.yaml --check-trust-chain\n\n# Show trust relationships\nattest keys trust-graph --format dot\n</code></pre>"},{"location":"attestation/#6_supply_chain_security","title":"6. Supply Chain Security","text":""},{"location":"attestation/#61_slsa_compliance","title":"6.1 SLSA Compliance","text":"<p>ATTEST provides SLSA (Supply chain Levels for Software Artifacts) compliance:</p> <pre><code># SLSA Level 3 compliance\nslsa:\n  build_level: 3\n  requirements:\n    - \"Hermetic build environment\"\n    - \"Cryptographically signed provenance\"\n    - \"Tamper-resistant build service\"\n    - \"Build parameters verified\"\n</code></pre>"},{"location":"attestation/#62_in-toto_integration","title":"6.2 In-toto Integration","text":"<p>Compatible with in-toto supply chain security framework:</p> <pre><code># Generate in-toto metadata\nattest export --format in-toto \\\n  --layout supply-chain.layout \\\n  --output metadata/\n\n# Verify supply chain\nin-toto-verify --layout supply-chain.layout \\\n  --layout-keys alice.pub bob.pub\n</code></pre>"},{"location":"attestation/#7_advanced_verification","title":"7. Advanced Verification","text":""},{"location":"attestation/#71_custom_verification_rules","title":"7.1 Custom Verification Rules","text":"<pre><code># .attest/verification.yaml\nverification:\n  rules:\n    - name: \"require-build-attestation\"\n      type: \"attestation-required\"\n      attestation_type: \"attest/build\"\n\n    - name: \"trusted-builder-only\"\n      type: \"signer-allowed\"\n      allowed_signers:\n        - \"ci-system@company.com\"\n        - \"release-manager@company.com\"\n\n    - name: \"recent-build-only\"\n      type: \"max-age\"\n      max_age: \"24h\"\n</code></pre>"},{"location":"attestation/#72_policy-based_verification","title":"7.2 Policy-Based Verification","text":"<pre><code>package attest.verification\n\n# Verify build integrity\nallow {\n    input.attestation.type == \"attest/build\"\n    input.signature.verified == true\n    trusted_signer(input.signature.signer)\n    recent_build(input.attestation.timestamp)\n}\n\ntrusted_signer(signer) {\n    signer in data.trusted_signers\n}\n\nrecent_build(timestamp) {\n    time.now_ns() - time.parse_rfc3339_ns(timestamp) &lt; 86400000000000  # 24 hours\n}\n</code></pre>"},{"location":"attestation/#8_integration_examples","title":"8. Integration Examples","text":""},{"location":"attestation/#81_cicd_pipeline_integration","title":"8.1 CI/CD Pipeline Integration","text":"<pre><code># GitHub Actions\n- name: Sign and Attest\n  run: |\n    attest run --sign --verify\n    attest upload-receipt --destination s3://company-receipts/\n\n# GitLab CI\nattest:\n  stage: build\n  script:\n    - attest run --sign\n    - attest verify receipt_*.yaml --strict\n  artifacts:\n    paths:\n      - .attest/receipts/\n</code></pre>"},{"location":"attestation/#82_container_registry_integration","title":"8.2 Container Registry Integration","text":"<pre><code># Sign container images\nattest container sign myapp:v1.2.3 \\\n  --key-file signing.key \\\n  --attach-receipt\n\n# Verify container before deployment\nattest container verify myapp:v1.2.3 \\\n  --require-attestation \\\n  --trusted-keys trusted.pub\n</code></pre>"},{"location":"attestation/#9_key_rotation","title":"9. Key Rotation","text":""},{"location":"attestation/#91_automated_key_rotation","title":"9.1 Automated Key Rotation","text":"<pre><code># Generate new key pair\nattest keys rotate --current-key old-key.pem \\\n  --new-key new-key.pem \\\n  --transition-period 30d\n\n# Update trust relationships\nattest keys update-trust \\\n  --old-key old-key-fingerprint \\\n  --new-key new-key-fingerprint\n</code></pre>"},{"location":"attestation/#92_emergency_key_revocation","title":"9.2 Emergency Key Revocation","text":"<pre><code># Revoke compromised key\nattest keys revoke ed25519-key-abc123... \\\n  --reason \"Key compromise\" \\\n  --effective-date 2024-12-01T00:00:00Z\n\n# Update revocation list\nattest keys publish-crl \\\n  --output company-crl.pem \\\n  --upload-to https://crl.company.com/\n</code></pre>"},{"location":"attestation/#10_hardware_security_modules","title":"10. Hardware Security Modules","text":""},{"location":"attestation/#101_hsm_integration","title":"10.1 HSM Integration","text":"<pre><code># .attest/hsm.yaml\nhsm:\n  enabled: true\n  provider: \"pkcs11\"\n  library: \"/usr/lib/libpkcs11.so\"\n  slot: 0\n  pin_source: \"env:HSM_PIN\"\n\nsigning:\n  use_hsm: true\n  key_label: \"attest-signing-key\"\n</code></pre>"},{"location":"attestation/#102_tpm_integration","title":"10.2 TPM Integration","text":"<pre><code># Use TPM for signing\nattest run --sign --tpm-key-handle 0x81000001\n\n# Generate TPM-backed key\nattest keys generate --tpm --persistent-handle 0x81000001\n</code></pre>"},{"location":"attestation/#11_monitoring_and_auditing","title":"11. Monitoring and Auditing","text":""},{"location":"attestation/#111_signature_metrics","title":"11.1 Signature Metrics","text":"<pre><code># Signature operations\nattest_signatures_created_total{algorithm=\"ed25519\"}\nattest_signatures_verified_total{result=\"valid\"}\nattest_signature_verification_duration_seconds\n\n# Key usage\nattest_key_usage_total{key_id=\"abc123\",operation=\"sign\"}\nattest_key_rotation_total{reason=\"scheduled\"}\n</code></pre>"},{"location":"attestation/#112_audit_logging","title":"11.2 Audit Logging","text":"<pre><code>{\n  \"timestamp\": \"2024-12-01T14:30:52Z\",\n  \"event\": \"signature_created\",\n  \"key_id\": \"ed25519-abc123...\",\n  \"resource\": \"receipt_20241201_143052.yaml\",\n  \"algorithm\": \"ed25519\",\n  \"user\": \"ci-system@company.com\"\n}\n</code></pre>"},{"location":"attestation/#12_best_practices","title":"12. Best Practices","text":""},{"location":"attestation/#121_key_management","title":"12.1 Key Management","text":"<ol> <li>Use dedicated keys for different environments</li> <li>Implement key rotation on a regular schedule</li> <li>Store private keys securely (HSM, TPM, or secure vaults)</li> <li>Never commit private keys to version control</li> <li>Monitor key usage and detect anomalies</li> </ol>"},{"location":"attestation/#122_verification","title":"12.2 Verification","text":"<ol> <li>Always verify signatures before deployment</li> <li>Use trust chains for delegation</li> <li>Implement time-based validity checks</li> <li>Maintain revocation lists for compromised keys</li> <li>Audit verification results regularly</li> </ol>"},{"location":"attestation/#123_compliance","title":"12.3 Compliance","text":"<ol> <li>Document key management procedures</li> <li>Implement access controls for signing operations</li> <li>Maintain audit trails for all signature operations</li> <li>Regular security assessments of cryptographic practices</li> <li>Compliance reporting for regulatory requirements</li> </ol>"},{"location":"attestation/#13_troubleshooting","title":"13. Troubleshooting","text":""},{"location":"attestation/#131_common_issues","title":"13.1 Common Issues","text":"<pre><code># Signature verification fails\nattest verify receipt.yaml --debug\n\n# Key not found\nattest keys import --help\n\n# HSM connection issues\nattest hsm test-connection --verbose\n\n# Time synchronization problems\nattest verify receipt.yaml --tolerance 5m\n</code></pre> <p>The ATTEST attestation system provides cryptographic proof of build integrity, enabling secure supply chains and compliance with security standards.</p>"},{"location":"cache-performance/","title":"Cache & Performance","text":""},{"location":"cache-performance/#1_overview","title":"1. Overview","text":"<p>ATTEST's content-addressed caching system dramatically improves build performance by intelligently reusing previous results. Understanding and optimizing caching is crucial for efficient CI/CD pipelines.</p>"},{"location":"cache-performance/#2_content-addressed_caching","title":"2. Content-Addressed Caching","text":""},{"location":"cache-performance/#21_how_it_works","title":"2.1 How It Works","text":"<p>ATTEST uses Blake3 hashing to create unique identifiers for all inputs:</p> <pre><code># Cache key calculation\ninputs_hash = blake3(file_contents + file_metadata)\ncommand_hash = blake3(command + environment + working_directory)\ncache_key = blake3(inputs_hash + command_hash)\n</code></pre>"},{"location":"cache-performance/#22_cache_hierarchy","title":"2.2 Cache Hierarchy","text":"<pre><code>.attest/cache/\n\u251c\u2500\u2500 objects/          # Content-addressed objects\n\u2502   \u251c\u2500\u2500 ab/\n\u2502   \u2502   \u2514\u2500\u2500 cd123...  # Object files\n\u251c\u2500\u2500 refs/             # Cache references\n\u2502   \u251c\u2500\u2500 inputs/       # Input reference files\n\u2502   \u2514\u2500\u2500 outputs/      # Output reference files\n\u251c\u2500\u2500 metadata/         # Cache metadata\n\u2502   \u251c\u2500\u2500 stats.json    # Cache statistics\n\u2502   \u2514\u2500\u2500 gc.log        # Garbage collection log\n\u2514\u2500\u2500 receipts/         # Cached receipts\n    \u2514\u2500\u2500 by-hash/      # Receipts indexed by hash\n</code></pre>"},{"location":"cache-performance/#3_cache_configuration","title":"3. Cache Configuration","text":""},{"location":"cache-performance/#31_global_cache_settings","title":"3.1 Global Cache Settings","text":"<pre><code># ~/.config/attest/config.yaml\ncache:\n  enabled: true\n  max_size: \"50GB\"\n  compression: true\n  compression_level: 6\n  retention_policy:\n    max_age_days: 30\n    max_entries: 100000\n  gc:\n    auto_gc: true\n    gc_threshold: 0.8  # GC when 80% full\n</code></pre>"},{"location":"cache-performance/#32_per-step_cache_control","title":"3.2 Per-Step Cache Control","text":"<pre><code># attest.yaml\nsteps:\n  fast_test:\n    run: \"npm test\"\n    cache: true\n    cache_policy:\n      ttl: \"24h\"\n      invalidate_on:\n        - \"package-lock.json\"\n        - \"test/**/*.js\"\n\n  slow_build:\n    run: \"cargo build --release\"\n    cache: true\n    cache_policy:\n      ttl: \"7d\"\n      compression: true\n\n  deploy:\n    run: \"kubectl apply -f k8s/\"\n    cache: false  # Never cache deployment\n</code></pre>"},{"location":"cache-performance/#33_environment-specific_caching","title":"3.3 Environment-Specific Caching","text":"<pre><code># Different cache settings per environment\nenvironments:\n  development:\n    cache:\n      enabled: true\n      max_size: \"10GB\"\n      aggressive_caching: true\n\n  ci:\n    cache:\n      enabled: true\n      max_size: \"100GB\"\n      distributed: true\n      backend: \"s3://company-cache/\"\n\n  production:\n    cache:\n      enabled: false  # Always fresh builds\n</code></pre>"},{"location":"cache-performance/#4_cache_backends","title":"4. Cache Backends","text":""},{"location":"cache-performance/#41_local_filesystem_default","title":"4.1 Local Filesystem (Default)","text":"<pre><code>cache:\n  backend: \"local\"\n  path: \".attest/cache\"\n  max_size: \"20GB\"\n</code></pre>"},{"location":"cache-performance/#42_s3-compatible_storage","title":"4.2 S3-Compatible Storage","text":"<pre><code>cache:\n  backend: \"s3\"\n  bucket: \"company-attest-cache\"\n  region: \"us-west-2\"\n  prefix: \"cache/\"\n  credentials:\n    access_key_id: \"${AWS_ACCESS_KEY_ID}\"\n    secret_access_key: \"${AWS_SECRET_ACCESS_KEY}\"\n</code></pre>"},{"location":"cache-performance/#43_redis","title":"4.3 Redis","text":"<pre><code>cache:\n  backend: \"redis\"\n  endpoint: \"redis.company.com:6379\"\n  database: 0\n  ttl: \"24h\"\n  auth:\n    password: \"${REDIS_PASSWORD}\"\n</code></pre>"},{"location":"cache-performance/#44_multi-tier_caching","title":"4.4 Multi-Tier Caching","text":"<pre><code>cache:\n  tiers:\n    - name: \"local\"\n      backend: \"local\"\n      max_size: \"5GB\"\n      priority: 1\n\n    - name: \"shared\"\n      backend: \"s3\"\n      bucket: \"team-cache\"\n      priority: 2\n\n    - name: \"global\"\n      backend: \"s3\"\n      bucket: \"company-cache\"\n      priority: 3\n      read_only: true\n</code></pre>"},{"location":"cache-performance/#5_performance_optimization","title":"5. Performance Optimization","text":""},{"location":"cache-performance/#51_cache_hit_rate_analysis","title":"5.1 Cache Hit Rate Analysis","text":"<pre><code># View cache statistics\nattest cache stats\n\n# Detailed cache analysis\nattest cache analyze --period 30d\n\n# Output:\nCache Analysis (30 days)\n========================\nTotal Requests: 1,234\nCache Hits: 987 (80.0%)\nCache Misses: 247 (20.0%)\n\nHit Rate by Step:\n- test: 95.2% (1,180/1,234)\n- build: 75.3% (450/598)\n- lint: 98.1% (234/238)\n\nCache Savings:\n- Time Saved: 45.2 hours\n- Compute Saved: $234.50\n- Network Saved: 15.6 GB\n</code></pre>"},{"location":"cache-performance/#52_cache_warming","title":"5.2 Cache Warming","text":"<pre><code># Warm cache for common builds\nattest cache warm --branches main,develop,staging\n\n# Pre-populate cache from CI\nattest cache populate --from-ci-artifacts \\\n  --build-matrix \"os=linux,mac&amp;node=16,18,20\"\n\n# Scheduled cache warming\nattest cache warm --schedule \"0 2 * * *\" \\\n  --targets \"test,build,lint\"\n</code></pre>"},{"location":"cache-performance/#53_intelligent_prefetching","title":"5.3 Intelligent Prefetching","text":"<pre><code># .attest/cache-policy.yaml\nprefetch:\n  enabled: true\n  strategies:\n    - name: \"dependency-based\"\n      trigger: \"package.json changed\"\n      prefetch: [\"npm install\", \"npm audit\"]\n\n    - name: \"branch-based\"\n      trigger: \"branch checkout\"\n      prefetch_from: \"main\"\n      max_age: \"24h\"\n\n    - name: \"time-based\"\n      schedule: \"0 */6 * * *\"\n      prefetch: [\"build\", \"test\"]\n</code></pre>"},{"location":"cache-performance/#6_distributed_caching","title":"6. Distributed Caching","text":""},{"location":"cache-performance/#61_cache_sharing","title":"6.1 Cache Sharing","text":"<pre><code># Team-level cache sharing\ncache:\n  shared:\n    enabled: true\n    team: \"frontend-team\"\n    permissions:\n      read: [\"team:frontend\", \"team:devops\"]\n      write: [\"team:frontend\"]\n      admin: [\"team:devops\"]\n</code></pre>"},{"location":"cache-performance/#62_cache_synchronization","title":"6.2 Cache Synchronization","text":"<pre><code># Sync cache between environments\nattest cache sync --from ci --to local \\\n  --filter \"step:build,test\"\n\n# Push local cache to shared storage\nattest cache push --backend s3 \\\n  --include-metadata\n\n# Pull from shared cache\nattest cache pull --backend s3 \\\n  --merge-strategy newest\n</code></pre>"},{"location":"cache-performance/#63_cache_clustering","title":"6.3 Cache Clustering","text":"<pre><code># Redis Cluster configuration\ncache:\n  backend: \"redis-cluster\"\n  nodes:\n    - \"redis-1.company.com:7000\"\n    - \"redis-2.company.com:7000\"\n    - \"redis-3.company.com:7000\"\n  consistency: \"eventual\"\n  replication_factor: 3\n</code></pre>"},{"location":"cache-performance/#7_advanced_features","title":"7. Advanced Features","text":""},{"location":"cache-performance/#71_conditional_caching","title":"7.1 Conditional Caching","text":"<pre><code>steps:\n  conditional_build:\n    run: \"npm run build\"\n    cache: true\n    cache_conditions:\n      - condition: \"git diff --name-only HEAD~1 | grep -q '^src/'\"\n        action: \"invalidate\"\n      - condition: \"test $CI_BRANCH = main\"\n        policy: \"aggressive\"\n      - condition: \"test $NODE_ENV = production\"\n        action: \"skip\"\n</code></pre>"},{"location":"cache-performance/#72_cache_compression","title":"7.2 Cache Compression","text":"<pre><code>cache:\n  compression:\n    algorithm: \"zstd\"  # Options: gzip, zstd, lz4, brotli\n    level: 6           # Compression level (1-9)\n    threshold: \"1MB\"   # Only compress files larger than threshold\n    parallel: true     # Use parallel compression\n</code></pre>"},{"location":"cache-performance/#73_content_deduplication","title":"7.3 Content Deduplication","text":"<pre><code># Enable deduplication\nattest cache dedupe --scan-all\n\n# View deduplication stats\nattest cache dedupe --stats\n\n# Deduplication Report:\nTotal Objects: 10,450\nUnique Objects: 8,234 (78.8%)\nDuplicate Objects: 2,216 (21.2%)\nSpace Saved: 5.6 GB (34.2%)\n</code></pre>"},{"location":"cache-performance/#8_cache_management","title":"8. Cache Management","text":""},{"location":"cache-performance/#81_garbage_collection","title":"8.1 Garbage Collection","text":"<pre><code># Manual garbage collection\nattest cache gc\n\n# Aggressive cleanup\nattest cache gc --aggressive \\\n  --max-age 7d \\\n  --keep-last 10\n\n# Scheduled GC\nattest cache gc --schedule \"0 3 * * 0\" \\\n  --max-size 80%\n</code></pre>"},{"location":"cache-performance/#82_cache_inspection","title":"8.2 Cache Inspection","text":"<pre><code># List cached objects\nattest cache list --format table\n\n# Inspect specific cache entry\nattest cache inspect abc123def456...\n\n# Show cache dependency graph\nattest cache deps --step build --format dot\n</code></pre>"},{"location":"cache-performance/#83_cache_repair","title":"8.3 Cache Repair","text":"<pre><code># Verify cache integrity\nattest cache verify --fix-corruption\n\n# Rebuild cache index\nattest cache reindex\n\n# Recovery from backup\nattest cache restore --from s3://backup-bucket/cache/\n</code></pre>"},{"location":"cache-performance/#9_performance_monitoring","title":"9. Performance Monitoring","text":""},{"location":"cache-performance/#91_metrics_collection","title":"9.1 Metrics Collection","text":"<pre><code># Enable performance metrics\nexport ATTEST_METRICS_ENABLED=true\nexport ATTEST_METRICS_ENDPOINT=http://prometheus:9090\n\n# Performance counters\nattest_cache_hits_total{step=\"build\"}\nattest_cache_misses_total{step=\"build\"}\nattest_cache_size_bytes{backend=\"local\"}\nattest_cache_operations_duration_seconds{operation=\"read\"}\n</code></pre>"},{"location":"cache-performance/#92_performance_profiling","title":"9.2 Performance Profiling","text":"<pre><code># Profile cache performance\nattest profile --focus cache \\\n  --duration 60s \\\n  --output cache-profile.json\n\n# Analyze bottlenecks\nattest analyze cache-profile.json \\\n  --format html \\\n  --output cache-analysis.html\n</code></pre>"},{"location":"cache-performance/#10_benchmarking","title":"10. Benchmarking","text":""},{"location":"cache-performance/#101_cache_performance_tests","title":"10.1 Cache Performance Tests","text":"<pre><code># Benchmark cache backends\nattest benchmark cache \\\n  --backends local,s3,redis \\\n  --operations read,write,delete \\\n  --sizes 1KB,1MB,100MB\n\n# Results:\nBackend    | Read (ms) | Write (ms) | Delete (ms)\n-----------|-----------|------------|------------\nlocal      | 0.1       | 0.3        | 0.1\ns3         | 15.2      | 45.6       | 8.3\nredis      | 2.1       | 3.4        | 1.8\n</code></pre>"},{"location":"cache-performance/#102_build_time_comparison","title":"10.2 Build Time Comparison","text":"<pre><code># Compare with and without cache\nattest benchmark build \\\n  --scenarios \"no-cache,cold-cache,warm-cache\" \\\n  --iterations 10\n\n# Results:\nScenario    | Avg Time | Std Dev | Cache Hit %\n------------|----------|---------|------------\nno-cache    | 180.2s   | 5.3s    | 0%\ncold-cache  | 175.4s   | 4.8s    | 15%\nwarm-cache  | 32.1s    | 2.1s    | 85%\n</code></pre>"},{"location":"cache-performance/#11_troubleshooting","title":"11. Troubleshooting","text":""},{"location":"cache-performance/#111_common_issues","title":"11.1 Common Issues","text":"<pre><code># Cache corruption\nattest cache verify --repair\n\n# Cache size exceeded\nattest cache gc --force --target-size 80%\n\n# Slow cache operations\nattest cache benchmark --backend current\n\n# Permission issues\nattest cache permissions --fix\n</code></pre>"},{"location":"cache-performance/#112_debug_mode","title":"11.2 Debug Mode","text":"<pre><code># Enable cache debugging\nexport ATTEST_CACHE_DEBUG=true\nexport ATTEST_LOG_LEVEL=debug\n\n# Trace cache operations\nattest run --cache-trace build\n\n# Cache operation log:\n[DEBUG] Cache lookup: key=abc123... backend=local\n[DEBUG] Cache miss: key=abc123...\n[DEBUG] Cache store: key=abc123... size=1.2MB backend=local\n[DEBUG] Cache store complete: duration=45ms\n</code></pre>"},{"location":"cache-performance/#113_performance_issues","title":"11.3 Performance Issues","text":"<pre><code># Identify cache bottlenecks\nattest cache analyze --bottlenecks\n\n# Common solutions:\n1. Increase cache size limits\n2. Enable compression for large objects\n3. Use faster storage backend\n4. Optimize cache key generation\n5. Implement cache warming strategies\n</code></pre>"},{"location":"cache-performance/#12_best_practices","title":"12. Best Practices","text":""},{"location":"cache-performance/#121_cache_strategy","title":"12.1 Cache Strategy","text":"<ol> <li>Cache expensive operations like compilation and testing</li> <li>Use appropriate TTL values for different step types</li> <li>Implement cache warming for frequently used builds</li> <li>Monitor cache hit rates and optimize accordingly</li> <li>Consider network costs for distributed caching</li> </ol>"},{"location":"cache-performance/#122_security","title":"12.2 Security","text":"<ol> <li>Encrypt sensitive cached data</li> <li>Implement access controls for shared caches</li> <li>Regularly rotate cache encryption keys</li> <li>Audit cache access patterns</li> <li>Secure cache backend connections</li> </ol>"},{"location":"cache-performance/#123_cost_optimization","title":"12.3 Cost Optimization","text":"<ol> <li>Use tiered storage for different access patterns</li> <li>Implement aggressive garbage collection</li> <li>Compress large cached objects</li> <li>Monitor storage costs and usage patterns</li> <li>Use spot instances for cache warming</li> </ol> <p>The ATTEST caching system provides significant performance improvements while maintaining security and reliability guarantees.</p>"},{"location":"cli/","title":"Command Line Interface","text":""},{"location":"cli/#1_complete_cli_reference","title":"1. Complete CLI Reference","text":"<p>The ATTEST CLI is your primary interface for creating, running, and managing secure CI/CD pipelines. This comprehensive guide covers all commands, options, and usage patterns.</p>"},{"location":"cli/#2_quick_reference","title":"2. Quick Reference","text":"<pre><code># Essential commands\nattest init                    # Initialize new project\nattest run                     # Execute pipeline\nattest run --verify --sign    # Execute with full security\nattest verify receipt.yaml    # Verify attestation\nattest audit history          # View execution history\n\n# Pipeline management\nattest pipeline show          # Visualize pipeline\nattest pipeline validate     # Validate configuration\nattest pipeline export       # Export to other formats\n\n# GitOps operations\nattest deploy apply          # Deploy to environment\nattest deploy status         # Check deployment status\n\n# Policy enforcement\nattest policy check          # Validate against policies\nattest audit report          # Generate compliance reports\n</code></pre>"},{"location":"cli/#3_global_options","title":"3. Global Options","text":"<p>All ATTEST commands support these global options:</p> <pre><code>attest [GLOBAL_OPTIONS] &lt;COMMAND&gt; [COMMAND_OPTIONS]\n</code></pre>"},{"location":"cli/#31_global_flags","title":"3.1 Global Flags","text":"Option Short Description Example <code>--verbose</code> <code>-v</code> Enable debug logging <code>attest -v run</code> <code>--quiet</code> <code>-q</code> Suppress all output except errors <code>attest -q run</code> <code>--config FILE</code> Specify custom configuration file <code>attest --config custom.yaml run</code> <code>--working-dir DIR</code> Set working directory <code>attest --working-dir /project run</code> <code>--help</code> <code>-h</code> Show help information <code>attest -h</code> <code>--version</code> <code>-V</code> Show version information <code>attest -V</code>"},{"location":"cli/#32_environment_variables","title":"3.2 Environment Variables","text":"<pre><code>export ATTEST_CONFIG=\"/path/to/config.yaml\"\nexport ATTEST_CACHE_DIR=\"/custom/cache/dir\"\nexport ATTEST_LOG_LEVEL=\"debug\"\nexport ATTEST_SIGNING_KEY=\"/path/to/signing.key\"\n</code></pre>"},{"location":"cli/#4_project_management_commands","title":"4. Project Management Commands","text":""},{"location":"cli/#41_attest_init_-_initialize_project","title":"4.1 <code>attest init</code> - Initialize Project","text":"<p>Initialize a new ATTEST project with configuration and sample pipeline.</p> <pre><code>attest init [OPTIONS]\n</code></pre>"},{"location":"cli/#options","title":"Options","text":"Option Description Example <code>--no-sample</code> Skip creating sample pipeline <code>attest init --no-sample</code> <code>--force</code> Force initialization even if directory exists <code>attest init --force</code> <code>--template TEMPLATE</code> Use specific pipeline template <code>attest init --template rust-project</code>"},{"location":"cli/#templates_available","title":"Templates Available","text":"<ul> <li><code>basic</code> - Simple build pipeline</li> <li><code>rust-project</code> - Rust application with Cargo</li> <li><code>node-project</code> - Node.js application with npm</li> <li><code>web-app</code> - Full-stack web application</li> <li><code>microservices</code> - Multi-service architecture</li> <li><code>ml-pipeline</code> - Machine learning workflow</li> </ul>"},{"location":"cli/#examples","title":"Examples","text":"<pre><code># Basic initialization\nattest init\n\n# Initialize without sample pipeline\nattest init --no-sample\n\n# Initialize with Rust template\nattest init --template rust-project\n\n# Force reinitialize existing directory\nattest init --force --template web-app\n</code></pre>"},{"location":"cli/#generated_structure","title":"Generated Structure","text":"<pre><code>your-project/\n\u251c\u2500\u2500 .attest/\n\u2502   \u251c\u2500\u2500 config.yaml      # Project configuration\n\u2502   \u251c\u2500\u2500 keys/            # Cryptographic keys\n\u2502   \u2514\u2500\u2500 cache/           # Build cache\n\u251c\u2500\u2500 attest.yaml         # Pipeline definition\n\u2514\u2500\u2500 .attestignore       # Files to ignore\n</code></pre>"},{"location":"cli/#5_pipeline_execution_commands","title":"5. Pipeline Execution Commands","text":""},{"location":"cli/#51_attest_run_-_execute_pipeline","title":"5.1 <code>attest run</code> - Execute Pipeline","text":"<p>Run a pipeline with cryptographic attestation and verification.</p> <pre><code>attest run [OPTIONS]\n</code></pre>"},{"location":"cli/#essential_options","title":"Essential Options","text":"Option Description Default <code>-p, --pipeline FILE</code> Pipeline file path <code>attest.yaml</code> <code>--verify</code> Run in isolated environment <code>false</code> <code>--sign</code> Cryptographically sign results <code>false</code> <code>--deterministic</code> Enable deterministic execution <code>false</code>"},{"location":"cli/#performance_options","title":"Performance Options","text":"Option Description Default <code>-j, --parallel N</code> Maximum parallel jobs <code>auto</code> <code>--no-cache</code> Disable build cache <code>false</code> <code>--timeout SECONDS</code> Global timeout in seconds <code>3600</code>"},{"location":"cli/#execution_control","title":"Execution Control","text":"Option Description Example <code>--dry-run</code> Validate but don't execute <code>attest run --dry-run</code> <code>--step STEP</code> Run only specific step <code>attest run --step build</code> <code>--from-step STEP</code> Start from specific step <code>attest run --from-step test</code> <code>--until-step STEP</code> Stop at specific step <code>attest run --until-step build</code>"},{"location":"cli/#output_options","title":"Output Options","text":"Option Description Example <code>--output FILE</code> Save receipt to specific file <code>attest run --output build-receipt.yaml</code> <code>--format FORMAT</code> Receipt output format (yaml, json) <code>attest run --format json</code>"},{"location":"cli/#complete_examples","title":"Complete Examples","text":"<pre><code># Basic execution\nattest run\n\n# Full security mode\nattest run --verify --sign --deterministic\n\n# Performance optimized\nattest run --parallel 8 --no-cache\n\n# Specific step execution\nattest run --step build --output build-receipt.yaml\n\n# Production workflow\nattest run --verify --sign --parallel 4 --timeout 1800 --output prod-receipt.yaml\n\n# Debug mode\nattest -v run --dry-run --step problematic-step\n\n# Continuous integration mode\nattest run --verify --sign --parallel $(nproc) --format json --output ci-receipt.json\n</code></pre>"},{"location":"cli/#6_verification_commands","title":"6. Verification Commands","text":""},{"location":"cli/#61_attest_verify_-_verify_attestation","title":"6.1 <code>attest verify</code> - Verify Attestation","text":"<p>Verify the integrity and authenticity of attestation receipts.</p> <pre><code>attest verify TARGET [OPTIONS]\n</code></pre>"},{"location":"cli/#arguments","title":"Arguments","text":"<ul> <li><code>TARGET</code> - Receipt file or pipeline hash to verify</li> </ul>"},{"location":"cli/#options_1","title":"Options","text":"Option Description Example <code>--check-signatures</code> Verify cryptographic signatures <code>attest verify receipt.yaml --check-signatures</code> <code>--policy POLICY</code> Verify against specific policy <code>attest verify receipt.yaml --policy security</code> <code>--verbose-verify</code> Show detailed verification steps <code>attest verify receipt.yaml --verbose-verify</code> <code>--public-key FILE</code> Use external public key <code>attest verify receipt.yaml --public-key team.pem</code> <code>--trusted-only</code> Only accept trusted signers <code>attest verify receipt.yaml --trusted-only</code> <code>--output FILE</code> Output verification result <code>attest verify receipt.yaml --output result.json</code>"},{"location":"cli/#examples_1","title":"Examples","text":"<pre><code># Basic verification\nattest verify receipt_20241201_143052.yaml\n\n# Full cryptographic verification\nattest verify receipt_20241201_143052.yaml --check-signatures --verbose-verify\n\n# Policy compliance check\nattest verify receipt_20241201_143052.yaml --policy sox-compliance\n\n# Team verification with external key\nattest verify receipt_20241201_143052.yaml \\\n  --public-key team-public-key.pem \\\n  --check-signatures \\\n  --output verification-result.json\n\n# Batch verification\nfind .attest/receipts -name \"*.yaml\" -exec attest verify {} --check-signatures \\;\n</code></pre>"},{"location":"cli/#7_pipeline_management_commands","title":"7. Pipeline Management Commands","text":""},{"location":"cli/#71_attest_pipeline_-_pipeline_operations","title":"7.1 <code>attest pipeline</code> - Pipeline Operations","text":"<p>Manage and visualize pipeline configurations.</p>"},{"location":"cli/#attest_pipeline_show_-_display_pipeline","title":"<code>attest pipeline show</code> - Display Pipeline","text":"<pre><code>attest pipeline show [OPTIONS]\n</code></pre>"},{"location":"cli/#formats","title":"Formats","text":"Format Description Use Case <code>ascii</code> ASCII art visualization Terminal display <code>dot</code> Graphviz DOT format Graph generation <code>json</code> JSON structure Programmatic processing <code>mermaid</code> Mermaid diagram Documentation"},{"location":"cli/#options_2","title":"Options","text":"Option Description Example <code>-f, --format FORMAT</code> Output format <code>--format mermaid</code> <code>-p, --pipeline FILE</code> Pipeline file to visualize <code>--pipeline custom.yaml</code> <code>--details</code> Show step details <code>--details</code> <code>--with-timing</code> Show execution times <code>--with-timing</code>"},{"location":"cli/#examples_2","title":"Examples","text":"<pre><code># ASCII visualization\nattest pipeline show\n\n# Detailed Mermaid diagram\nattest pipeline show --format mermaid --details &gt; pipeline.mmd\n\n# DOT graph for Graphviz\nattest pipeline show --format dot --details | dot -Tpng &gt; pipeline.png\n\n# JSON export with timing\nattest pipeline show --format json --with-timing &gt; pipeline-analysis.json\n</code></pre>"},{"location":"cli/#attest_pipeline_validate_-_validate_configuration","title":"<code>attest pipeline validate</code> - Validate Configuration","text":"<pre><code>attest pipeline validate [OPTIONS]\n</code></pre>"},{"location":"cli/#validation_levels","title":"Validation Levels","text":"Option Description Checks (default) Basic validation Syntax, structure, dependencies <code>--strict</code> Strict validation + Best practices, performance <code>--security-check</code> Security validation + Security issues, vulnerabilities <code>--schema-version VERSION</code> Validate against schema version Specific schema compliance"},{"location":"cli/#examples_3","title":"Examples","text":"<pre><code># Basic validation\nattest pipeline validate\n\n# Comprehensive validation\nattest pipeline validate --strict --security-check\n\n# Validate specific file\nattest pipeline validate --pipeline custom.yaml --strict\n\n# Check against specific schema\nattest pipeline validate --schema-version 0.2 --strict\n</code></pre>"},{"location":"cli/#attest_pipeline_export_-_export_to_other_formats","title":"<code>attest pipeline export</code> - Export to Other Formats","text":"<pre><code>attest pipeline export --format FORMAT [OPTIONS]\n</code></pre>"},{"location":"cli/#supported_formats","title":"Supported Formats","text":"Format Description Output File <code>docker-compose</code> Docker Compose YAML <code>docker-compose.yml</code> <code>gitlab-ci</code> GitLab CI YAML <code>.gitlab-ci.yml</code> <code>github-actions</code> GitHub Actions workflow <code>.github/workflows/ci.yml</code> <code>azure-pipelines</code> Azure DevOps pipelines <code>azure-pipelines.yml</code> <code>jenkins</code> Jenkins Pipeline (Groovy) <code>Jenkinsfile</code> <code>tekton</code> Tekton Pipeline <code>tekton-pipeline.yaml</code> <code>makefile</code> GNU Makefile <code>Makefile</code>"},{"location":"cli/#options_3","title":"Options","text":"Option Description Example <code>-f, --format FORMAT</code> Export format (required) <code>--format github-actions</code> <code>-o, --output FILE</code> Output file path <code>--output .github/workflows/ci.yml</code> <code>-p, --pipeline FILE</code> Pipeline file to export <code>--pipeline custom.yaml</code> <code>--with-attestation</code> Include attestation metadata <code>--with-attestation</code> <code>--variables KEY=VALUE</code> Set template variables <code>--variables NODE_VERSION=18</code>"},{"location":"cli/#examples_4","title":"Examples","text":"<pre><code># Export to GitHub Actions\nattest pipeline export --format github-actions --output .github/workflows/ci.yml\n\n# Export to GitLab CI with attestation\nattest pipeline export --format gitlab-ci --with-attestation --output .gitlab-ci.yml\n\n# Export with custom variables\nattest pipeline export --format docker-compose \\\n  --variables NODE_VERSION=18,REGISTRY=my-registry.com \\\n  --output docker-compose.yml\n\n# Export Jenkins pipeline\nattest pipeline export --format jenkins --output Jenkinsfile\n</code></pre>"},{"location":"cli/#attest_pipeline_generate_-_generate_from_template","title":"<code>attest pipeline generate</code> - Generate from Template","text":"<pre><code>attest pipeline generate TEMPLATE [OPTIONS]\n</code></pre>"},{"location":"cli/#available_templates","title":"Available Templates","text":"Template Description Best For <code>rust-project</code> Rust application with Cargo CLI tools, services <code>node-project</code> Node.js with npm/yarn Web apps, APIs <code>python-project</code> Python with pip/poetry Scripts, ML, APIs <code>web-app</code> Full-stack web application Frontend + backend <code>microservices</code> Multi-service architecture Distributed systems <code>ml-pipeline</code> Machine learning workflow Data science, AI <code>docker-build</code> Container-focused build Container applications"},{"location":"cli/#options_4","title":"Options","text":"Option Description Example <code>-o, --output FILE</code> Output pipeline file <code>--output custom-pipeline.yaml</code> <code>--var KEY=VALUE</code> Set template variables <code>--var app_name=myapp --var port=8080</code> <code>--interactive</code> Interactive template configuration <code>--interactive</code>"},{"location":"cli/#examples_5","title":"Examples","text":"<pre><code># Generate Rust project pipeline\nattest pipeline generate rust-project --output attest.yaml\n\n# Generate with custom variables\nattest pipeline generate web-app \\\n  --var app_name=myapp \\\n  --var port=8080 \\\n  --var database=postgres \\\n  --output webapp-pipeline.yaml\n\n# Interactive generation\nattest pipeline generate microservices --interactive\n</code></pre>"},{"location":"cli/#8_audit_and_compliance_commands","title":"8. Audit and Compliance Commands","text":""},{"location":"cli/#81_attest_audit_-_audit_operations","title":"8.1 <code>attest audit</code> - Audit Operations","text":"<p>Generate compliance reports and analyze execution history.</p>"},{"location":"cli/#attest_audit_report_-_generate_compliance_report","title":"<code>attest audit report</code> - Generate Compliance Report","text":"<pre><code>attest audit report [OPTIONS]\n</code></pre>"},{"location":"cli/#output_formats","title":"Output Formats","text":"Format Description Use Case <code>json</code> Structured JSON data Programmatic processing <code>html</code> Interactive HTML report Executive reporting <code>pdf</code> Professional PDF report Compliance documentation <code>csv</code> Comma-separated values Data analysis <code>xml</code> XML format Integration with enterprise tools"},{"location":"cli/#compliance_frameworks","title":"Compliance Frameworks","text":"Framework Description Standards <code>sox</code> Sarbanes-Oxley Act Financial compliance <code>pci</code> PCI DSS Payment card security <code>iso27001</code> ISO 27001 Information security <code>nist</code> NIST Cybersecurity Framework US government standard <code>cis</code> CIS Controls Security best practices <code>gdpr</code> GDPR compliance Data protection <code>hipaa</code> HIPAA compliance Healthcare data"},{"location":"cli/#options_5","title":"Options","text":"Option Description Example <code>-f, --format FORMAT</code> Output format <code>--format html</code> <code>--framework FRAMEWORK</code> Compliance framework <code>--framework sox</code> <code>-o, --output FILE</code> Output file path <code>--output report.html</code> <code>--detailed</code> Include detailed step information <code>--detailed</code> <code>--period DAYS</code> Report period in days <code>--period 90</code> <code>--failures-only</code> Include only failed executions <code>--failures-only</code>"},{"location":"cli/#examples_6","title":"Examples","text":"<pre><code># Generate HTML compliance report\nattest audit report --format html --output compliance_report.html\n\n# SOX compliance report for last 90 days\nattest audit report --framework sox --period 90 --detailed --output sox_q4.pdf\n\n# Security failures analysis\nattest audit report --format csv --failures-only --framework iso27001 --output security_failures.csv\n\n# Comprehensive audit for multiple frameworks\nattest audit report --format json --detailed --period 365 --output annual_audit.json\n</code></pre>"},{"location":"cli/#attest_audit_history_-_show_execution_history","title":"<code>attest audit history</code> - Show Execution History","text":"<pre><code>attest audit history [OPTIONS]\n</code></pre>"},{"location":"cli/#options_6","title":"Options","text":"Option Description Default <code>-l, --limit N</code> Maximum entries to show <code>10</code> <code>--pipeline PIPELINE</code> Filter by pipeline name All pipelines <code>--signed-only</code> Show only signed executions <code>false</code> <code>--failures-only</code> Show only failed executions <code>false</code> <code>--format FORMAT</code> Output format (table, json, csv) <code>table</code> <code>--since DATE</code> Show executions since date All time <code>--until DATE</code> Show executions until date Now"},{"location":"cli/#examples_7","title":"Examples","text":"<pre><code># Show last 20 executions\nattest audit history --limit 20\n\n# Show failures for specific pipeline\nattest audit history --pipeline web-app --failures-only\n\n# Export history as JSON\nattest audit history --format json --limit 100 --output history.json\n\n# Show signed executions from last month\nattest audit history --signed-only --since \"2024-11-01\" --format csv\n\n# Comprehensive history analysis\nattest audit history --limit 1000 --format json --detailed --output full_history.json\n</code></pre>"},{"location":"cli/#attest_audit_trace_-_trace_deployment_chain","title":"<code>attest audit trace</code> - Trace Deployment Chain","text":"<pre><code>attest audit trace --from HASH [OPTIONS]\n</code></pre>"},{"location":"cli/#options_7","title":"Options","text":"Option Description Example <code>-f, --from HASH</code> Starting commit or build ID <code>--from abc123def</code> <code>-t, --to ENV</code> Target environment or commit <code>--to production</code> <code>--detailed</code> Show detailed trace information <code>--detailed</code> <code>--format FORMAT</code> Output format (graph, json, table) <code>--format graph</code> <code>--with-signatures</code> Include attestation signatures <code>--with-signatures</code> <code>--max-depth N</code> Maximum trace depth <code>--max-depth 10</code>"},{"location":"cli/#examples_8","title":"Examples","text":"<pre><code># Trace from commit to production\nattest audit trace --from abc123def --to production\n\n# Detailed trace with signatures\nattest audit trace --from abc123def --detailed --with-signatures --format json\n\n# Visual trace graph\nattest audit trace --from abc123def --format graph --output trace.dot\ndot -Tpng trace.dot &gt; deployment_trace.png\n\n# Complete deployment chain analysis\nattest audit trace --from abc123def --to production --detailed --with-signatures --max-depth 20\n</code></pre>"},{"location":"cli/#attest_audit_analyze_-_analyze_compliance_metrics","title":"<code>attest audit analyze</code> - Analyze Compliance Metrics","text":"<pre><code>attest audit analyze [OPTIONS]\n</code></pre>"},{"location":"cli/#options_8","title":"Options","text":"Option Description Default <code>--period DAYS</code> Analysis period <code>30</code> <code>--trends</code> Generate trend analysis <code>false</code> <code>-o, --output FILE</code> Output analysis to file stdout <code>--format FORMAT</code> Output format (json, yaml, table) <code>table</code> <code>--metrics METRICS</code> Specific metrics to analyze All metrics"},{"location":"cli/#examples_9","title":"Examples","text":"<pre><code># Basic analysis for last 30 days\nattest audit analyze\n\n# Trend analysis with JSON output\nattest audit analyze --period 90 --trends --format json --output trends.json\n\n# Performance metrics analysis\nattest audit analyze --period 60 --metrics performance,cache --output perf_analysis.yaml\n</code></pre>"},{"location":"cli/#9_gitops_commands","title":"9. GitOps Commands","text":""},{"location":"cli/#91_attest_deploy_-_gitops_operations","title":"9.1 <code>attest deploy</code> - GitOps Operations","text":"<p>Manage GitOps deployments with verification.</p>"},{"location":"cli/#attest_deploy_init_-_initialize_gitops","title":"<code>attest deploy init</code> - Initialize GitOps","text":"<pre><code>attest deploy init --repo URL --cluster CLUSTER [OPTIONS]\n</code></pre>"},{"location":"cli/#options_9","title":"Options","text":"Option Description Example <code>-r, --repo URL</code> GitOps repository URL (required) <code>--repo https://github.com/org/k8s-configs</code> <code>-c, --cluster CLUSTER</code> Target cluster name (required) <code>--cluster production</code> <code>--gitops-dir DIR</code> Local GitOps directory path <code>--gitops-dir .gitops</code> <code>--branch BRANCH</code> GitOps branch <code>--branch main</code> <code>--no-templates</code> Skip creating sample deployment templates <code>--no-templates</code> <code>--force</code> Force initialization <code>--force</code>"},{"location":"cli/#examples_10","title":"Examples","text":"<pre><code># Basic GitOps initialization\nattest deploy init --repo https://github.com/myorg/k8s-configs --cluster production\n\n# Advanced setup with custom branch\nattest deploy init \\\n  --repo https://github.com/myorg/deployments \\\n  --cluster staging \\\n  --branch develop \\\n  --gitops-dir deployments\n\n# Force reinit without templates\nattest deploy init --repo https://github.com/myorg/k8s --cluster test --force --no-templates\n</code></pre>"},{"location":"cli/#attest_deploy_apply_-_deploy_with_verification","title":"<code>attest deploy apply</code> - Deploy with Verification","text":"<pre><code>attest deploy apply --environment ENV [OPTIONS]\n</code></pre>"},{"location":"cli/#options_10","title":"Options","text":"Option Description Example <code>-e, --environment ENV</code> Target environment (required) <code>--environment staging</code> <code>--verify-attestations</code> Verify all attestations before deployment <code>--verify-attestations</code> <code>--dry-run</code> Show what would be deployed <code>--dry-run</code> <code>--manifest FILE</code> Specific manifest file to deploy <code>--manifest app.yaml</code> <code>--wait</code> Wait for deployment to complete <code>--wait</code> <code>--timeout SECONDS</code> Deployment timeout <code>--timeout 600</code> <code>--force</code> Force deployment even if verification fails <code>--force</code>"},{"location":"cli/#examples_11","title":"Examples","text":"<pre><code># Deploy to staging with verification\nattest deploy apply --environment staging --verify-attestations --wait\n\n# Production deployment with timeout\nattest deploy apply --environment production --verify-attestations --wait --timeout 1200\n\n# Dry run to preview changes\nattest deploy apply --environment staging --dry-run --verify-attestations\n\n# Deploy specific manifest\nattest deploy apply --environment dev --manifest k8s/webapp.yaml --wait\n</code></pre>"},{"location":"cli/#attest_deploy_status_-_show_deployment_status","title":"<code>attest deploy status</code> - Show Deployment Status","text":"<pre><code>attest deploy status [OPTIONS]\n</code></pre>"},{"location":"cli/#options_11","title":"Options","text":"Option Description Example <code>-e, --environment ENV</code> Filter by environment <code>--environment production</code> <code>--detailed</code> Show detailed status information <code>--detailed</code> <code>--watch</code> Watch for status changes <code>--watch</code> <code>--format FORMAT</code> Output format (table, json, yaml) <code>--format json</code>"},{"location":"cli/#examples_12","title":"Examples","text":"<pre><code># Show all deployment status\nattest deploy status\n\n# Watch production environment\nattest deploy status --environment production --watch --detailed\n\n# Export status as JSON\nattest deploy status --format json --detailed --output deployment_status.json\n</code></pre>"},{"location":"cli/#10_policy_commands","title":"10. Policy Commands","text":""},{"location":"cli/#101_attest_policy_-_policy_management","title":"10.1 <code>attest policy</code> - Policy Management","text":"<p>Manage and validate against security and compliance policies.</p>"},{"location":"cli/#attest_policy_check_-_validate_against_policies","title":"<code>attest policy check</code> - Validate Against Policies","text":"<pre><code>attest policy check [OPTIONS]\n</code></pre>"},{"location":"cli/#options_12","title":"Options","text":"Option Description Example <code>-p, --policy-dir DIR</code> Policy directory path <code>--policy-dir .attest/policies</code> <code>--policy POLICY</code> Specific policy file to check <code>--policy security.rego</code> <code>--detailed</code> Show detailed violation information <code>--detailed</code> <code>--fail-fast</code> Fail on first policy violation <code>--fail-fast</code> <code>-o, --output FILE</code> Output results to file <code>--output policy_results.json</code> <code>--format FORMAT</code> Output format (json, yaml, table) <code>--format json</code>"},{"location":"cli/#examples_13","title":"Examples","text":"<pre><code># Check all policies\nattest policy check\n\n# Check specific security policy with details\nattest policy check --policy security --detailed --format json\n\n# Fail-fast mode for CI/CD\nattest policy check --fail-fast --policy-dir .policies\n\n# Generate policy compliance report\nattest policy check --detailed --format json --output policy_compliance.json\n</code></pre>"},{"location":"cli/#attest_policy_list_-_list_available_policies","title":"<code>attest policy list</code> - List Available Policies","text":"<pre><code>attest policy list [OPTIONS]\n</code></pre>"},{"location":"cli/#options_13","title":"Options","text":"Option Description Example <code>--detailed</code> Show detailed policy information <code>--detailed</code> <code>--category CATEGORY</code> Filter by policy category <code>--category security</code> <code>--format FORMAT</code> Output format (table, json, yaml) <code>--format yaml</code>"},{"location":"cli/#examples_14","title":"Examples","text":"<pre><code># List all policies\nattest policy list\n\n# Show detailed security policies\nattest policy list --category security --detailed\n\n# Export policy catalog\nattest policy list --detailed --format json --output policy_catalog.json\n</code></pre>"},{"location":"cli/#attest_policy_install_-_install_policy_template","title":"<code>attest policy install</code> - Install Policy Template","text":"<pre><code>attest policy install POLICY [OPTIONS]\n</code></pre>"},{"location":"cli/#available_policies","title":"Available Policies","text":"Policy Description Category <code>security</code> Basic security policies Security <code>compliance</code> General compliance rules Compliance <code>performance</code> Performance optimization policies Performance <code>quality</code> Code quality policies Quality <code>sox-compliance</code> Sarbanes-Oxley compliance Compliance <code>pci-compliance</code> PCI DSS compliance Security <code>gdpr-compliance</code> GDPR compliance Privacy"},{"location":"cli/#options_14","title":"Options","text":"Option Description Example <code>--force</code> Force installation even if policy exists <code>--force</code> <code>--target-dir DIR</code> Installation directory <code>--target-dir .policies</code> <code>--interactive</code> Customize policy parameters interactively <code>--interactive</code>"},{"location":"cli/#examples_15","title":"Examples","text":"<pre><code># Install security policies\nattest policy install security\n\n# Install with interactive customization\nattest policy install sox-compliance --interactive\n\n# Force reinstall to custom directory\nattest policy install compliance --force --target-dir custom-policies\n</code></pre>"},{"location":"cli/#11_maintenance_commands","title":"11. Maintenance Commands","text":""},{"location":"cli/#111_attest_clean_-_clean_cache_and_temporary_files","title":"11.1 <code>attest clean</code> - Clean Cache and Temporary Files","text":"<pre><code>attest clean [OPTIONS]\n</code></pre>"},{"location":"cli/#options_15","title":"Options","text":"Option Description Example <code>--all</code> Clean all cached data <code>attest clean --all</code> <code>--cache-only</code> Clean only build cache <code>attest clean --cache-only</code> <code>--receipts-only</code> Clean only old receipts <code>attest clean --receipts-only</code> <code>--older-than DAYS</code> Clean files older than N days <code>attest clean --older-than 30</code> <code>--dry-run</code> Show what would be cleaned <code>attest clean --dry-run</code>"},{"location":"cli/#examples_16","title":"Examples","text":"<pre><code># Clean everything\nattest clean --all\n\n# Clean cache only\nattest clean --cache-only\n\n# Clean old receipts (30 days+)\nattest clean --receipts-only --older-than 30\n\n# Preview cleanup\nattest clean --all --dry-run\n</code></pre>"},{"location":"cli/#12_configuration_commands","title":"12. Configuration Commands","text":""},{"location":"cli/#121_attest_config_-_configuration_management","title":"12.1 <code>attest config</code> - Configuration Management","text":""},{"location":"cli/#attest_config_show_-_display_configuration","title":"<code>attest config show</code> - Display Configuration","text":"<pre><code>attest config show [OPTIONS]\n</code></pre>"},{"location":"cli/#options_16","title":"Options","text":"Option Description Example <code>--format FORMAT</code> Output format (yaml, json, table) <code>--format json</code> <code>--section SECTION</code> Show specific section only <code>--section cache</code>"},{"location":"cli/#examples_17","title":"Examples","text":"<pre><code># Show all configuration\nattest config show\n\n# Show cache configuration as JSON\nattest config show --section cache --format json\n</code></pre>"},{"location":"cli/#attest_config_set_-_set_configuration_value","title":"<code>attest config set</code> - Set Configuration Value","text":"<pre><code>attest config set KEY VALUE\n</code></pre>"},{"location":"cli/#examples_18","title":"Examples","text":"<pre><code># Enable deterministic mode\nattest config set deterministic true\n\n# Set cache size limit\nattest config set cache.max_size \"5GB\"\n\n# Configure signing\nattest config set signing.enabled true\n</code></pre>"},{"location":"cli/#attest_config_get_-_get_configuration_value","title":"<code>attest config get</code> - Get Configuration Value","text":"<pre><code>attest config get KEY\n</code></pre>"},{"location":"cli/#examples_19","title":"Examples","text":"<pre><code># Get cache setting\nattest config get cache.enabled\n\n# Get signing configuration\nattest config get signing.key_path\n</code></pre>"},{"location":"cli/#13_key_management_commands","title":"13. Key Management Commands","text":""},{"location":"cli/#131_attest_keys_-_cryptographic_key_management","title":"13.1 <code>attest keys</code> - Cryptographic Key Management","text":""},{"location":"cli/#attest_keys_generate_-_generate_new_key_pair","title":"<code>attest keys generate</code> - Generate New Key Pair","text":"<pre><code>attest keys generate [OPTIONS]\n</code></pre>"},{"location":"cli/#options_17","title":"Options","text":"Option Description Example <code>--algorithm ALGO</code> Cryptographic algorithm <code>--algorithm ed25519</code> <code>--output-dir DIR</code> Output directory for keys <code>--output-dir .keys</code> <code>--force</code> Overwrite existing keys <code>--force</code>"},{"location":"cli/#examples_20","title":"Examples","text":"<pre><code># Generate Ed25519 key pair\nattest keys generate\n\n# Generate to custom directory\nattest keys generate --output-dir team-keys --force\n</code></pre>"},{"location":"cli/#attest_keys_export_-_export_public_key","title":"<code>attest keys export</code> - Export Public Key","text":"<pre><code>attest keys export [OPTIONS]\n</code></pre>"},{"location":"cli/#options_18","title":"Options","text":"Option Description Example <code>--public</code> Export public key <code>--public</code> <code>--format FORMAT</code> Export format (pem, hex, json) <code>--format pem</code> <code>-o, --output FILE</code> Output file <code>--output public-key.pem</code>"},{"location":"cli/#examples_21","title":"Examples","text":"<pre><code># Export public key as PEM\nattest keys export --public --format pem --output team-public.pem\n\n# Export as hex string\nattest keys export --public --format hex\n</code></pre>"},{"location":"cli/#attest_keys_import_-_import_public_key","title":"<code>attest keys import</code> - Import Public Key","text":"<pre><code>attest keys import [OPTIONS] FILE\n</code></pre>"},{"location":"cli/#options_19","title":"Options","text":"Option Description Example <code>--public</code> Import public key <code>--public</code> <code>--trust</code> Mark key as trusted <code>--trust</code> <code>--name NAME</code> Key identifier <code>--name team-lead</code>"},{"location":"cli/#examples_22","title":"Examples","text":"<pre><code># Import trusted public key\nattest keys import --public --trust --name team-lead team-public.pem\n\n# Import for verification only\nattest keys import --public external-key.pem\n</code></pre>"},{"location":"cli/#14_advanced_usage_patterns","title":"14. Advanced Usage Patterns","text":""},{"location":"cli/#141_continuous_integration","title":"14.1 Continuous Integration","text":"<pre><code>#!/bin/bash\n# CI pipeline script\nset -euo pipefail\n\n# Validate pipeline\nattest pipeline validate --strict --security-check\n\n# Run with full verification\nattest run --verify --sign --parallel $(nproc) --format json --output ci-receipt.json\n\n# Verify the result\nattest verify ci-receipt.json --check-signatures --verbose-verify\n\n# Generate compliance report\nattest audit report --format json --detailed --output compliance.json\n\n# Deploy if on main branch\nif [ \"$CI_COMMIT_REF_NAME\" = \"main\" ]; then\n  attest deploy apply --environment staging --verify-attestations --wait\nfi\n</code></pre>"},{"location":"cli/#142_production_deployment","title":"14.2 Production Deployment","text":"<pre><code>#!/bin/bash\n# Production deployment script\nset -euo pipefail\n\nRECEIPT_FILE=\"$1\"\nif [ -z \"$RECEIPT_FILE\" ]; then\n  echo \"Usage: $0 &lt;receipt-file&gt;\"\n  exit 1\nfi\n\n# Verify receipt thoroughly\nattest verify \"$RECEIPT_FILE\" --check-signatures --trusted-only --verbose-verify\n\n# Check compliance\nattest policy check --detailed --fail-fast\n\n# Deploy to production\nattest deploy apply --environment production --verify-attestations --wait --timeout 1800\n\n# Generate deployment report\nattest audit report --framework sox --period 1 --detailed --output \"deployment-report-$(date +%Y%m%d).pdf\"\n</code></pre>"},{"location":"cli/#143_batch_operations","title":"14.3 Batch Operations","text":"<pre><code>#!/bin/bash\n# Batch verify all receipts\nfind .attest/receipts -name \"*.yaml\" -print0 | \\\nwhile IFS= read -r -d '' receipt; do\n  echo \"Verifying $receipt\"\n  if attest verify \"$receipt\" --check-signatures; then\n    echo \"[OK] Valid: $receipt\"\n  else\n    echo \"[ERROR] Invalid: $receipt\"\n  fi\ndone\n\n# Batch export pipelines\nfor format in github-actions gitlab-ci docker-compose; do\n  echo \"Exporting to $format\"\n  attest pipeline export --format \"$format\" --output \"exports/$format\"\ndone\n</code></pre>"},{"location":"cli/#144_monitoring_and_alerting","title":"14.4 Monitoring and Alerting","text":"<pre><code>#!/bin/bash\n# Monitoring script for cron\n\n# Check for recent failures\nFAILURES=$(attest audit history --failures-only --since \"1 hour ago\" --format json | jq length)\n\nif [ \"$FAILURES\" -gt 0 ]; then\n  echo \"ALERT: $FAILURES pipeline failures in the last hour\"\n  attest audit history --failures-only --since \"1 hour ago\" --detailed\nfi\n\n# Check policy compliance\nif ! attest policy check --fail-fast; then\n  echo \"ALERT: Policy violations detected\"\n  attest policy check --detailed --format json\nfi\n\n# Generate daily metrics\nattest audit analyze --period 1 --format json --output \"/metrics/attest-$(date +%Y%m%d).json\"\n</code></pre>"},{"location":"cli/#15_next_steps","title":"15. Next Steps","text":"<p>Now that you've mastered the CLI:</p> <ol> <li>Attestation &amp; Signatures - Implement cryptographic security</li> <li>Cache &amp; Performance - Optimize your pipelines</li> <li>GitOps &amp; Kubernetes - Deploy to production securely</li> <li>Practical Examples - Real-world usage scenarios</li> </ol> <p>Ready to secure your builds? -&gt; Attestation &amp; Signatures</p> <p>Want to optimize performance? -&gt; Cache &amp; Performance</p>"},{"location":"concepts/","title":"Core Concepts","text":"<p>ATTEST is built on several key concepts that work together to provide secure, reproducible, and verifiable CI/CD pipelines. Understanding these concepts is crucial for making the most of ATTEST.</p>"},{"location":"concepts/#1_architecture_overview","title":"1. Architecture Overview","text":"<pre><code>graph TB\n    A[Pipeline Definition] --&gt; B[Executor Engine]\n    B --&gt; C[Content-Addressed Cache]\n    B --&gt; D[Cryptographic Attestation]\n    D --&gt; E[Receipt Generation]\n    C --&gt; E\n    E --&gt; F[Verification Engine]\n    F --&gt; G[GitOps Controller]\n    G --&gt; H[Policy Enforcement]\n    H --&gt; I[Kubernetes Deployment]</code></pre>"},{"location":"concepts/#2_pipeline_definition","title":"2. Pipeline Definition","text":""},{"location":"concepts/#21_the_attestyaml_file","title":"2.1 The <code>attest.yaml</code> File","text":"<p>The pipeline definition is the heart of ATTEST. It describes what should be built, how, and in what order.</p> <pre><code>version: \"0.1\"           # Schema version\nname: \"my-project\"       # Human-readable name\n\n# Global environment variables\nenv:\n  BUILD_ENV: production\n  CACHE_ENABLED: \"true\"\n\n# Global attestation settings\nattestation:\n  sign_all_steps: true\n  verify_dependencies: true\n  require_reproducible: false\n\n# Pipeline steps\nsteps:\n  step_name:\n    run: \"command to execute\"\n    inputs: [\"files\", \"needed\"]\n    outputs: [\"files\", \"produced\"]\n    needs: [\"prerequisite_steps\"]\n    # ... additional configuration\n</code></pre>"},{"location":"concepts/#22_step_dependencies","title":"2.2 Step Dependencies","text":"<p>ATTEST builds a Directed Acyclic Graph (DAG) from your step dependencies:</p> <pre><code>steps:\n  # These run in parallel (no dependencies)\n  lint:\n    run: \"npm run lint\"\n\n  test:\n    run: \"npm test\"\n\n  # This waits for lint and test\n  build:\n    run: \"npm run build\"\n    needs: [\"lint\", \"test\"]\n\n  # This waits for build\n  deploy:\n    run: \"npm run deploy\"\n    needs: [\"build\"]\n</code></pre> <p>Execution order: 1. <code>lint</code> and <code>test</code> run in parallel 2. <code>build</code> waits for both to complete 3. <code>deploy</code> runs after <code>build</code></p>"},{"location":"concepts/#23_input_and_output_tracking","title":"2.3 Input and Output Tracking","text":"<p>ATTEST tracks all files that go into and come out of each step:</p> <pre><code>steps:\n  build:\n    run: \"npm run build\"\n    inputs: \n      - \"src/\"              # Source directory\n      - \"package.json\"      # Dependencies\n      - \"webpack.config.js\" # Build configuration\n    outputs:\n      - \"dist/\"             # Built artifacts\n</code></pre> <p>Why this matters: - Caching: Skip steps when inputs haven't changed - Reproducibility: Ensure same inputs produce same outputs - Security: Verify no unexpected files are modified</p>"},{"location":"concepts/#3_content-addressed_cache","title":"3. Content-Addressed Cache","text":""},{"location":"concepts/#31_how_it_works","title":"3.1 How It Works","text":"<p>ATTEST uses a sophisticated caching system based on content hashing:</p> <ol> <li>Input Hashing: All input files are hashed (Blake3)</li> <li>Command Hashing: The command and environment are hashed</li> <li>Cache Key: Combined hash becomes the cache key</li> <li>Cache Lookup: If key exists, reuse previous results</li> <li>Cache Miss: Run step and store results</li> </ol>"},{"location":"concepts/#32_cache_hierarchy","title":"3.2 Cache Hierarchy","text":"<pre><code>.attest/cache/\n\u251c\u2500\u2500 inputs/           # Hashed input files\n\u251c\u2500\u2500 outputs/          # Cached output artifacts\n\u251c\u2500\u2500 receipts/         # Execution receipts\n\u2514\u2500\u2500 metadata/         # Cache metadata\n</code></pre>"},{"location":"concepts/#33_cache_behavior","title":"3.3 Cache Behavior","text":"<pre><code># First run - cache miss\n$ attest run\n[OK] build (45s) - cache miss\n[OK] test (15s) - cache miss\n\n# No changes - cache hit\n$ attest run\n[OK] build (0.1s) - cache hit\n[OK] test (0.1s) - cache hit\n\n# Source change - partial cache miss\n$ echo \"new code\" &gt;&gt; src/main.js\n$ attest run\n[OK] build (45s) - cache miss (inputs changed)\n[OK] test (0.1s) - cache hit (test inputs unchanged)\n</code></pre>"},{"location":"concepts/#34_cache_configuration","title":"3.4 Cache Configuration","text":"<pre><code># Global cache settings\ncache:\n  enabled: true\n  max_size: \"10GB\"\n  compression: true\n  retention_days: 30\n\nsteps:\n  expensive_build:\n    run: \"cargo build --release\"\n    cache: true        # Enable caching (default)\n\n  always_run:\n    run: \"deploy.sh\"\n    cache: false       # Disable caching\n</code></pre>"},{"location":"concepts/#4_cryptographic_attestation","title":"4. Cryptographic Attestation","text":""},{"location":"concepts/#41_what_is_attestation","title":"4.1 What is Attestation?","text":"<p>Attestation is the process of creating a cryptographically signed record of what happened during a build. This provides:</p> <ul> <li>Integrity: Proof that results weren't tampered with</li> <li>Authenticity: Proof of who performed the build</li> <li>Non-repudiation: Can't deny having performed the build</li> <li>Traceability: Complete audit trail</li> </ul>"},{"location":"concepts/#42_ed25519_signatures","title":"4.2 Ed25519 Signatures","text":"<p>ATTEST uses Ed25519 cryptographic signatures:</p> <ul> <li>Fast: Extremely fast signing and verification</li> <li>Secure: Cryptographically strong (256-bit)</li> <li>Deterministic: Same input always produces same signature</li> <li>Small: Compact signature size (64 bytes)</li> </ul>"},{"location":"concepts/#43_signature_process","title":"4.3 Signature Process","text":"<ol> <li>Key Generation: Ed25519 key pair created automatically</li> <li>Receipt Creation: Build results serialized to canonical form</li> <li>Signing: Receipt signed with private key</li> <li>Storage: Signed receipt stored with public key</li> <li>Verification: Anyone can verify with public key</li> </ol> <pre><code># Generate and view keys\n$ attest run --sign\n# Keys generated at .attest/keys/\n\n$ ls .attest/keys/\nprivate.key  public.key\n\n# View public key (safe to share)\n$ cat .attest/keys/public.key\ned25519-public-key-abc123def456...\n</code></pre>"},{"location":"concepts/#5_receipts","title":"5. Receipts","text":""},{"location":"concepts/#51_what_is_a_receipt","title":"5.1 What is a Receipt?","text":"<p>A receipt is a complete record of a pipeline execution. It includes:</p> <ul> <li>Pipeline metadata: Name, version, timestamp</li> <li>Step results: What ran, how long it took, exit codes</li> <li>File hashes: Inputs and outputs with cryptographic hashes</li> <li>Environment: Variables and system information</li> <li>Signature: Cryptographic proof of authenticity</li> </ul>"},{"location":"concepts/#52_receipt_structure","title":"5.2 Receipt Structure","text":"<pre><code># Example receipt\npipeline_hash: \"blake3:abc123def456...\"\ntimestamp: \"2024-12-01T14:30:52Z\"\ntotal_duration_secs: 127\nattest_version: \"0.1.2\"\n\nsteps:\n  - name: \"build\"\n    command: \"npm run build\"\n    exit_code: 0\n    duration_secs: 45\n    inputs:\n      - path: \"src/\"\n        hash: \"blake3:def456abc123...\"\n      - path: \"package.json\"\n        hash: \"blake3:789xyz456abc...\"\n    outputs:\n      - path: \"dist/\"\n        hash: \"blake3:xyz789def456...\"\n\n# Cryptographic signature\nsignature: \"ed25519:signature_hex_string...\"\nsigner_public_key: \"ed25519:public_key_hex...\"\n</code></pre>"},{"location":"concepts/#53_receipt_verification","title":"5.3 Receipt Verification","text":"<pre><code># Verify a receipt\n$ attest verify receipt_20241201_143052.yaml\n[OK] Receipt format valid\n[OK] Pipeline hash matches\n[OK] All file hashes verified\n[OK] Cryptographic signature valid\n\n# Verify without signature check\n$ attest verify receipt_20241201_143052.yaml --no-signatures\n[OK] Receipt format valid\n[OK] Pipeline hash matches\n[OK] All file hashes verified\n Signature verification skipped\n</code></pre>"},{"location":"concepts/#6_determinism_and_reproducibility","title":"6. Determinism and Reproducibility","text":""},{"location":"concepts/#61_deterministic_execution","title":"6.1 Deterministic Execution","text":"<p>ATTEST can run in deterministic mode to ensure reproducible builds:</p> <pre><code># Enable deterministic mode\n$ attest run --deterministic\n\n# Or configure globally\n$ attest config set deterministic true\n</code></pre> <p>Deterministic mode: - Fixed timestamps: All files get consistent timestamps - Sorted environments: Environment variables sorted consistently - Stable randomness: Controlled random number generation - Isolated execution: Consistent execution environment</p>"},{"location":"concepts/#62_reproducible_builds","title":"6.2 Reproducible Builds","text":"<p>Reproducible builds mean: - Same source + Same environment = Identical output - Bit-for-bit identical: Output files are exactly the same - Verifiable: Anyone can reproduce your results</p> <pre><code># Configure reproducible builds\nattestation:\n  require_reproducible: true\n\nsteps:\n  build:\n    run: \"cargo build --release\"\n    attestation:\n      reproducible: true    # This step must be reproducible\n</code></pre>"},{"location":"concepts/#7_isolation_levels","title":"7. Isolation Levels","text":"<p>ATTEST supports different levels of execution isolation:</p>"},{"location":"concepts/#71_process_isolation_default","title":"7.1 Process Isolation (Default)","text":"<pre><code>steps:\n  build:\n    run: \"npm run build\"\n    isolation: process  # Default\n</code></pre> <ul> <li>Runs in separate process</li> <li>Shares host filesystem</li> <li>Fast and lightweight</li> <li>Good for trusted code</li> </ul>"},{"location":"concepts/#72_container_isolation","title":"7.2 Container Isolation","text":"<pre><code>steps:\n  build:\n    run: \"npm run build\"\n    image: \"node:18-alpine\"\n    isolation: container\n</code></pre> <ul> <li>Runs in Docker container</li> <li>Isolated filesystem</li> <li>Network isolation</li> <li>Good security/performance balance</li> </ul>"},{"location":"concepts/#73_vm_isolation_enterprise","title":"7.3 VM Isolation (Enterprise)","text":"<pre><code>steps:\n  build:\n    run: \"npm run build\"\n    isolation: vm\n    vm_image: \"ubuntu-22.04\"\n</code></pre> <ul> <li>Full virtual machine</li> <li>Complete isolation</li> <li>Highest security</li> <li>Slower execution</li> </ul>"},{"location":"concepts/#8_pipeline_analysis","title":"8. Pipeline Analysis","text":""},{"location":"concepts/#81_dependency_analysis","title":"8.1 Dependency Analysis","text":"<p>ATTEST analyzes your pipeline to optimize execution:</p> <pre><code># Show pipeline structure\n$ attest pipeline show --format ascii\n</code></pre> <p>Analysis includes: - Critical path: Steps that determine total execution time - Parallelizable groups: Steps that can run simultaneously - Dependency depth: How many levels of dependencies exist - Bottlenecks: Steps that block multiple other steps</p>"},{"location":"concepts/#82_performance_metrics","title":"8.2 Performance Metrics","text":"<pre><code># Analyze performance\n$ attest audit analyze --period 30\n\n# Output:\nPipeline Performance Analysis (30 days)\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n\nTotal Executions: 156\nAverage Duration: 3m 42s\nCache Hit Rate: 78.4%\n\nSlowest Steps:\n1. integration_test (avg: 2m 15s)\n2. build (avg: 1m 8s)\n3. lint (avg: 23s)\n\nOptimization Opportunities:\n- integration_test: Consider parallelization\n- build: Enable caching (currently disabled)\n</code></pre>"},{"location":"concepts/#9_verification_engine","title":"9. Verification Engine","text":""},{"location":"concepts/#91_multi-layer_verification","title":"9.1 Multi-Layer Verification","text":"<p>ATTEST verifies multiple aspects of your builds:</p> <ol> <li>Syntax Verification: Pipeline YAML is valid</li> <li>Dependency Verification: No circular dependencies</li> <li>File Verification: All declared inputs/outputs exist</li> <li>Hash Verification: File contents match hashes</li> <li>Signature Verification: Cryptographic signatures valid</li> <li>Policy Verification: Compliance rules satisfied</li> </ol>"},{"location":"concepts/#92_verification_levels","title":"9.2 Verification Levels","text":"<pre><code># Basic verification\n$ attest run --verify\n\n# Strict verification\n$ attest run --verify --strict\n\n# Custom verification\n$ attest run --verify --policy custom-security\n</code></pre>"},{"location":"concepts/#93_trust_model","title":"9.3 Trust Model","text":"<p>ATTEST uses a web of trust model:</p> <pre><code># Trust a public key\n$ attest keys trust team-member-key.pem\n\n# Verify with trusted keys only\n$ attest verify receipt.yaml --trusted-only\n\n# Show trust relationships\n$ attest keys list --trusted\n</code></pre>"},{"location":"concepts/#10_event_system","title":"10. Event System","text":""},{"location":"concepts/#101_pipeline_events","title":"10.1 Pipeline Events","text":"<p>ATTEST generates events throughout pipeline execution:</p> <pre><code># Event types:\n- pipeline.started\n- step.started\n- step.completed\n- step.failed\n- cache.hit\n- cache.miss\n- signature.created\n- verification.completed\n</code></pre>"},{"location":"concepts/#102_event_handlers","title":"10.2 Event Handlers","text":"<pre><code># Configure event handlers\nevents:\n  handlers:\n    - type: webhook\n      url: \"https://api.example.com/attest-events\"\n      events: [\"step.failed\", \"pipeline.completed\"]\n\n    - type: file\n      path: \"attest-events.log\"\n      events: [\"*\"]\n</code></pre>"},{"location":"concepts/#11_best_practices","title":"11. Best Practices","text":""},{"location":"concepts/#111_pipeline_design","title":"11.1 Pipeline Design","text":"<ol> <li>Small, Focused Steps: Each step should do one thing well</li> <li>Minimize Dependencies: Reduce coupling between steps</li> <li>Cache Expensive Operations: Use caching for slow builds</li> <li>Parallel Where Possible: Run independent steps concurrently</li> </ol>"},{"location":"concepts/#112_security","title":"11.2 Security","text":"<ol> <li>Always Sign Important Builds: Use <code>--sign</code> for production</li> <li>Verify Dependencies: Use <code>--verify</code> to check inputs</li> <li>Limit Scope: Don't give steps more access than needed</li> <li>Regular Key Rotation: Update cryptographic keys periodically</li> </ol>"},{"location":"concepts/#113_performance","title":"11.3 Performance","text":"<ol> <li>Profile Your Pipeline: Use <code>attest audit analyze</code></li> <li>Optimize Cache Usage: Make sure caching is enabled</li> <li>Minimize I/O: Don't include unnecessary files in inputs</li> <li>Use Appropriate Isolation: Balance security vs. performance</li> </ol>"},{"location":"concepts/#114_maintenance","title":"11.4 Maintenance","text":"<ol> <li>Version Your Pipelines: Use semantic versioning</li> <li>Document Decisions: Comment complex pipeline logic</li> <li>Monitor Performance: Track build times and cache rates</li> <li>Regular Updates: Keep ATTEST updated</li> </ol>"},{"location":"concepts/#12_integration_points","title":"12. Integration Points","text":""},{"location":"concepts/#121_version_control","title":"12.1 Version Control","text":"<pre><code># Commit pipeline changes\n$ git add attest.yaml .attest/config.yaml\n$ git commit -m \"Update build pipeline\"\n\n# Pipeline versioning\n$ attest pipeline version --tag v1.2.3\n</code></pre>"},{"location":"concepts/#122_cicd_integration","title":"12.2 CI/CD Integration","text":"<pre><code># Export to other CI systems\n$ attest pipeline export --format github-actions\n$ attest pipeline export --format gitlab-ci\n$ attest pipeline export --format jenkins\n</code></pre>"},{"location":"concepts/#123_monitoring_integration","title":"12.3 Monitoring Integration","text":"<pre><code># Send metrics to monitoring systems\n$ attest run --metrics-endpoint https://metrics.example.com\n\n# Generate audit reports\n$ attest audit report --format json | jq '.'\n</code></pre>"},{"location":"concepts/#13_advanced_concepts","title":"13. Advanced Concepts","text":""},{"location":"concepts/#131_custom_executors","title":"13.1 Custom Executors","text":"<pre><code>// Implement custom execution logic\nimpl CustomExecutor for MyExecutor {\n    async fn execute_step(&amp;self, step: &amp;Step) -&gt; Result&lt;StepResult&gt; {\n        // Custom execution logic\n    }\n}\n</code></pre>"},{"location":"concepts/#132_plugin_system","title":"13.2 Plugin System","text":"<pre><code># Load custom plugins\nplugins:\n  - name: \"custom-notifier\"\n    path: \"./plugins/notifier.so\"\n    config:\n      webhook_url: \"https://api.example.com/notify\"\n</code></pre>"},{"location":"concepts/#133_distributed_execution","title":"13.3 Distributed Execution","text":"<pre><code># Configure distributed execution\nexecution:\n  mode: distributed\n  workers:\n    - host: \"worker1.example.com\"\n      capacity: 4\n    - host: \"worker2.example.com\" \n      capacity: 8\n</code></pre>"},{"location":"concepts/#14_common_questions","title":"14. Common Questions","text":""},{"location":"concepts/#q_how_does_attest_compare_to_traditional_cicd","title":"Q: How does ATTEST compare to traditional CI/CD?","text":"<p>Traditional CI/CD: - Files can be modified without detection - No cryptographic verification - Limited reproducibility guarantees - Manual audit trails</p> <p>ATTEST: - Cryptographic integrity protection - Automatic signature verification - Guaranteed reproducible builds - Complete audit trails</p>"},{"location":"concepts/#q_can_i_use_attest_with_my_existing_tools","title":"Q: Can I use ATTEST with my existing tools?","text":"<p>Yes! ATTEST can: - Export to existing CI/CD formats - Run alongside existing pipelines - Integrate with existing deployment tools - Use existing Docker images and tools</p>"},{"location":"concepts/#q_how_does_caching_work_across_different_machines","title":"Q: How does caching work across different machines?","text":"<p>ATTEST cache is content-addressed, so: - Same inputs = same cache key - Cache can be shared between machines - Distributed cache support (enterprise) - Cloud storage integration available</p> <p>Ready to build robust pipelines? -&gt; Pipeline Configuration</p> <p>Want to dive into security? -&gt; Attestation &amp; Signatures</p>"},{"location":"container-security/","title":"Container security","text":""},{"location":"container-security/#container_security_and_isolation","title":"Container Security and Isolation","text":"<p>This document describes the advanced container security features implemented in ATTEST, including syscall filtering, filesystem restrictions, and violation detection.</p>"},{"location":"container-security/#overview","title":"Overview","text":"<p>ATTEST provides comprehensive container security through multiple layers of protection:</p> <ol> <li>Seccomp Syscall Filtering - System call access control</li> <li>Filesystem Security - Path-based access restrictions</li> <li>Enhanced Container Isolation - Advanced container security</li> <li>Violation Detection - Security event monitoring</li> </ol>"},{"location":"container-security/#security_levels","title":"Security Levels","text":"<p>ATTEST supports three security levels aligned with operational modes:</p>"},{"location":"container-security/#minimal_security_light_mode","title":"Minimal Security (Light Mode)","text":"<ul> <li>Target: Development, testing, personal projects</li> <li>Performance Impact: ~5-15% overhead</li> <li>Seccomp Profile: Basic blocking of dangerous syscalls</li> <li>Filesystem: Default policy with basic protections</li> <li>Isolation: Process-level isolation</li> </ul>"},{"location":"container-security/#standard_security_verifiable_mode","title":"Standard Security (Verifiable Mode)","text":"<ul> <li>Target: Enterprise CI/CD, production builds</li> <li>Performance Impact: ~15-30% overhead</li> <li>Seccomp Profile: Syscall allowlist with tracing</li> <li>Filesystem: Balanced restrictions with monitoring</li> <li>Isolation: Container-based isolation</li> </ul>"},{"location":"container-security/#maximum_security_formal_proof_mode","title":"Maximum Security (Formal Proof Mode)","text":"<ul> <li>Target: Regulated industries, critical infrastructure</li> <li>Performance Impact: ~30-50% overhead</li> <li>Seccomp Profile: Minimal syscall allowlist, kill by default</li> <li>Filesystem: Strict access controls and limits</li> <li>Isolation: Enhanced container with comprehensive restrictions</li> </ul>"},{"location":"container-security/#seccomp_syscall_filtering","title":"Seccomp Syscall Filtering","text":""},{"location":"container-security/#built-in_profiles","title":"Built-in Profiles","text":""},{"location":"container-security/#minimal_profile","title":"Minimal Profile","text":"<pre><code>{\n  \"defaultAction\": \"SCMP_ACT_ALLOW\",\n  \"syscalls\": [\n    {\n      \"names\": [\"ptrace\", \"kexec_load\", \"module_load\", \"reboot\"],\n      \"action\": \"SCMP_ACT_KILL\"\n    }\n  ]\n}\n</code></pre>"},{"location":"container-security/#standard_profile","title":"Standard Profile","text":"<pre><code>{\n  \"defaultAction\": \"SCMP_ACT_ERRNO(1)\",\n  \"syscalls\": [\n    {\n      \"names\": [\"read\", \"write\", \"open\", \"openat\", \"close\"],\n      \"action\": \"SCMP_ACT_ALLOW\"\n    },\n    {\n      \"names\": [\"fork\", \"vfork\", \"clone\"],\n      \"action\": \"SCMP_ACT_TRACE\"\n    },\n    {\n      \"names\": [\"socket\", \"ptrace\", \"mount\"],\n      \"action\": \"SCMP_ACT_KILL\"\n    }\n  ]\n}\n</code></pre>"},{"location":"container-security/#maximum_profile","title":"Maximum Profile","text":"<pre><code>{\n  \"defaultAction\": \"SCMP_ACT_KILL\",\n  \"syscalls\": [\n    {\n      \"names\": [\"read\", \"write\", \"openat\", \"close\", \"mmap\", \"exit\"],\n      \"action\": \"SCMP_ACT_ALLOW\"\n    }\n  ]\n}\n</code></pre>"},{"location":"container-security/#usage","title":"Usage","text":"<pre><code>use attest::sandbox::{SeccompManager, SecurityLevel};\n\nlet mut manager = SeccompManager::new();\nmanager.set_profile(\"maximum\")?;\n\n// Generate container-compatible profile\nlet profile_json = manager.generate_container_profile(\"maximum\")?;\n</code></pre>"},{"location":"container-security/#filesystem_security","title":"Filesystem Security","text":""},{"location":"container-security/#security_policies","title":"Security Policies","text":"<p>The filesystem security manager enforces path-based access controls:</p> <pre><code>use attest::sandbox::filesystem_security::*;\n\nlet mut manager = FilesystemSecurityManager::with_strict_policy();\n\n// Check path access\nlet allowed = manager.check_path_access(\n    &amp;PathBuf::from(\"/workspace/file.txt\"),\n    AccessMode::ReadWrite\n)?;\n</code></pre>"},{"location":"container-security/#default_rules","title":"Default Rules","text":"Path Pattern Access Mode Description <code>/tmp/*</code> ReadWrite Temporary directory access <code>/workspace/*</code> ReadWrite Workspace directory access <code>/etc/*</code> Forbidden Block system configuration <code>/proc/*</code> Forbidden Block process filesystem <code>/sys/*</code> Forbidden Block system filesystem"},{"location":"container-security/#path_traversal_protection","title":"Path Traversal Protection","text":"<p>The system automatically detects and blocks path traversal attempts:</p> <pre><code>// These paths will be blocked\nlet dangerous_paths = [\n    \"/workspace/../etc/passwd\",\n    \"/tmp/../../root/.ssh/id_rsa\",\n    \"/workspace/subdir/../../../etc/shadow\",\n];\n</code></pre>"},{"location":"container-security/#file_extension_filtering","title":"File Extension Filtering","text":"<p>Dangerous file extensions are automatically blocked:</p> <pre><code>let forbidden_extensions = [\n    \"exe\", \"bat\", \"cmd\", \"com\", \"scr\"\n];\n</code></pre>"},{"location":"container-security/#resource_limits","title":"Resource Limits","text":"<p>The filesystem security manager enforces resource limits:</p> <ul> <li>File Size Limit: Maximum individual file size</li> <li>Disk Usage Limit: Total disk usage across all operations</li> <li>File Count Limits: Maximum number of files</li> </ul>"},{"location":"container-security/#enhanced_container_sandbox","title":"Enhanced Container Sandbox","text":""},{"location":"container-security/#creation","title":"Creation","text":"<pre><code>use attest::sandbox::*;\n\nlet config = container::ContainerUtils::secure_attest_config(\"alpine:latest\");\nlet mut sandbox = EnhancedContainerSandbox::new(\n    config,\n    SecurityLevel::Maximum,\n    NetworkPolicy::Disabled,\n)?;\n</code></pre>"},{"location":"container-security/#secure_execution","title":"Secure Execution","text":"<pre><code>let result = sandbox.execute_secure(\n    \"echo\",\n    &amp;[\"Hello, World!\".to_string()],\n    &amp;env_vars,\n    Some(&amp;workspace_dir),\n).await?;\n</code></pre>"},{"location":"container-security/#container_runtime_support","title":"Container Runtime Support","text":"<p>The enhanced sandbox supports multiple container runtimes:</p>"},{"location":"container-security/#docker","title":"Docker","text":"<pre><code>docker run --rm \\\n  --security-opt seccomp=/path/to/profile.json \\\n  --security-opt no-new-privileges:true \\\n  --cap-drop ALL \\\n  --read-only \\\n  --tmpfs /tmp:rw,noexec,nosuid,size=100m \\\n  alpine:latest echo \"Hello\"\n</code></pre>"},{"location":"container-security/#podman","title":"Podman","text":"<pre><code>podman run --rm \\\n  --security-opt seccomp=/path/to/profile.json \\\n  --security-opt no-new-privileges \\\n  --cap-drop ALL \\\n  --read-only \\\n  --tmpfs /tmp:rw,noexec,nosuid,size=100m \\\n  alpine:latest echo \"Hello\"\n</code></pre>"},{"location":"container-security/#violation_detection_and_monitoring","title":"Violation Detection and Monitoring","text":""},{"location":"container-security/#seccomp_violations","title":"Seccomp Violations","text":"<pre><code>#[derive(Debug, Clone)]\npub struct SeccompViolation {\n    pub timestamp: DateTime&lt;Utc&gt;,\n    pub pid: u32,\n    pub syscall: String,\n    pub action: SeccompAction,\n    pub context: String,\n}\n</code></pre>"},{"location":"container-security/#filesystem_violations","title":"Filesystem Violations","text":"<pre><code>#[derive(Debug, Clone)]\npub struct FilesystemViolation {\n    pub timestamp: DateTime&lt;Utc&gt;,\n    pub path: PathBuf,\n    pub attempted_access: AccessMode,\n    pub violation_type: FilesystemViolationType,\n    pub context: String,\n}\n</code></pre>"},{"location":"container-security/#violation_types","title":"Violation Types","text":"<ul> <li>ForbiddenPath: Access to blocked path</li> <li>PathTraversal: Directory traversal attempt  </li> <li>SymlinkViolation: Symlink restriction violation</li> <li>FileSizeLimit: File size limit exceeded</li> <li>DiskUsageLimit: Disk usage limit exceeded</li> <li>ForbiddenExtension: Dangerous file extension</li> </ul>"},{"location":"container-security/#security_reporting","title":"Security Reporting","text":"<pre><code>let report = sandbox.export_security_report()?;\n</code></pre> <p>Example security report: <pre><code>{\n  \"security_level\": \"maximum\",\n  \"network_policy\": \"disabled\",\n  \"seccomp\": {\n    \"profile\": {\n      \"name\": \"maximum\",\n      \"total_rules\": 9,\n      \"allowed_syscalls\": 6,\n      \"blocked_syscalls\": 3,\n      \"default_action\": \"Kill\"\n    },\n    \"violations\": []\n  },\n  \"filesystem\": {\n    \"policy_summary\": \"Filesystem Security Policy:\\n- Default access: Forbidden\\n- Rules: 5 active\\n- Max file size: Some(10485760)\\n- Max disk usage: Some(104857600)\",\n    \"violations\": []\n  },\n  \"generated_at\": \"2024-01-15T10:30:00Z\"\n}\n</code></pre></p>"},{"location":"container-security/#integration_with_operation_modes","title":"Integration with Operation Modes","text":""},{"location":"container-security/#light_mode","title":"Light Mode","text":"<pre><code># attest.yaml\nmode: light\nsandbox:\n  isolation_level: process\n  security_level: minimal\n  seccomp_profile: minimal\n</code></pre>"},{"location":"container-security/#verifiable_mode","title":"Verifiable Mode","text":"<pre><code># attest.yaml\nmode: verifiable\nsandbox:\n  isolation_level: container\n  security_level: standard\n  seccomp_profile: standard\n  network_policy: disabled\n</code></pre>"},{"location":"container-security/#formal_proof_mode","title":"Formal Proof Mode","text":"<pre><code># attest.yaml\nmode: formal-proof\nsandbox:\n  isolation_level: strict_container\n  security_level: maximum\n  seccomp_profile: maximum\n  network_policy: disabled\n  filesystem_policy: strict\n</code></pre>"},{"location":"container-security/#best_practices","title":"Best Practices","text":""},{"location":"container-security/#development_environment","title":"Development Environment","text":"<ol> <li>Use Light Mode for fast iteration</li> <li>Enable basic syscall filtering</li> <li>Allow filesystem access for debugging</li> </ol>"},{"location":"container-security/#cicd_pipeline","title":"CI/CD Pipeline","text":"<ol> <li>Use Verifiable Mode for production builds</li> <li>Enable syscall tracing for audit</li> <li>Restrict network access</li> <li>Monitor security violations</li> </ol>"},{"location":"container-security/#productionregulated","title":"Production/Regulated","text":"<ol> <li>Use Formal Proof Mode for maximum security</li> <li>Enable all security features</li> <li>Strict filesystem controls</li> <li>Comprehensive violation logging</li> <li>Regular security report reviews</li> </ol>"},{"location":"container-security/#security_considerations","title":"Security Considerations","text":""},{"location":"container-security/#container_escape_prevention","title":"Container Escape Prevention","text":"<ul> <li>Seccomp profiles block dangerous syscalls</li> <li>Filesystem restrictions prevent path traversal</li> <li>Process isolation limits system access</li> <li>Network isolation prevents data exfiltration</li> </ul>"},{"location":"container-security/#compliance_alignment","title":"Compliance Alignment","text":"<ul> <li>SLSA Level 4: Formal proof mode meets highest requirements</li> <li>FedRAMP: Maximum security suitable for government use</li> <li>SOC 2: Comprehensive audit logging and controls</li> <li>ISO 27001: Risk-based security controls</li> </ul>"},{"location":"container-security/#performance_vs_security_trade-offs","title":"Performance vs Security Trade-offs","text":"<ul> <li>Light mode: Fast but basic protection</li> <li>Standard mode: Balanced performance and security</li> <li>Maximum mode: Comprehensive security with performance cost</li> </ul>"},{"location":"container-security/#troubleshooting","title":"Troubleshooting","text":""},{"location":"container-security/#common_issues","title":"Common Issues","text":""},{"location":"container-security/#seccomp_violations_1","title":"Seccomp Violations","text":"<pre><code>Error: Container killed by seccomp policy\nSolution: Review syscall requirements, adjust profile if needed\n</code></pre>"},{"location":"container-security/#filesystem_access_denied","title":"Filesystem Access Denied","text":"<pre><code>Error: Path access forbidden by policy\nSolution: Check filesystem rules, ensure path is in allowlist\n</code></pre>"},{"location":"container-security/#container_runtime_issues","title":"Container Runtime Issues","text":"<pre><code>Error: Seccomp profile not supported\nSolution: Update container runtime, check compatibility\n</code></pre>"},{"location":"container-security/#debugging","title":"Debugging","text":"<p>Enable debug logging: <pre><code>env_logger::init();\n// or\ntracing_subscriber::init();\n</code></pre></p> <p>Check security reports: <pre><code>let report = sandbox.export_security_report()?;\nprintln!(\"{}\", report);\n</code></pre></p>"},{"location":"container-security/#custom_profiles","title":"Custom Profiles","text":"<p>Create custom seccomp profile: <pre><code>let mut manager = SeccompManager::new();\nmanager.load_profile_from_file(&amp;custom_profile_path)?;\nmanager.set_profile(\"custom\")?;\n</code></pre></p> <p>Create custom filesystem policy: <pre><code>let mut policy = FilesystemSecurityPolicy::default();\npolicy.rules.push(FilesystemRule {\n    path_pattern: \"/custom/*\".to_string(),\n    access_mode: AccessMode::ReadOnly,\n    recursive: true,\n    priority: 500,\n    description: \"Custom path access\".to_string(),\n});\n</code></pre></p>"},{"location":"container-security/#see_also","title":"See Also","text":"<ul> <li>Operation Modes - Overview of ATTEST operation modes</li> <li>Pipeline Configuration - Configuring ATTEST pipelines  </li> <li>Cryptographic Attestation - Digital signatures and verification</li> <li>Compliance Framework - Meeting regulatory requirements</li> </ul>"},{"location":"enterprise/","title":"Enterprise Setup","text":""},{"location":"enterprise/#1_overview","title":"1. Overview","text":"<p>ATTEST Enterprise provides advanced features for large organizations, including centralized management, enterprise-grade security, compliance frameworks, and scalable infrastructure support.</p>"},{"location":"enterprise/#2_architecture","title":"2. Architecture","text":""},{"location":"enterprise/#enterprise_components","title":"Enterprise Components","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    ATTEST Enterprise                        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Management Console  \u2502  Policy Engine  \u2502  Audit Service     \u2502\n\u2502  User Management     \u2502  Compliance Hub \u2502  Metrics Platform  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502              Distributed Cache Layer                        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    ATTEST Agents (Build Runners, Controllers, Workers)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"enterprise/#deployment_models","title":"Deployment Models","text":""},{"location":"enterprise/#on-premises_deployment","title":"On-Premises Deployment","text":"<pre><code># enterprise-config.yaml\ndeployment:\n  type: \"on-premises\"\n  architecture: \"high-availability\"\n  components:\n    management_console:\n      replicas: 3\n      load_balancer: \"nginx\"\n    cache:\n      backend: \"redis-cluster\"\n      nodes: 6\n      persistence: true\n    database:\n      type: \"postgresql\"\n      replicas: 3\n      backup_schedule: \"0 2 * * *\"\n</code></pre>"},{"location":"enterprise/#hybrid_cloud_deployment","title":"Hybrid Cloud Deployment","text":"<pre><code>deployment:\n  type: \"hybrid\"\n  on_premises:\n    - management_console\n    - sensitive_workloads\n  cloud:\n    - cache_layer\n    - log_aggregation\n    - monitoring\n</code></pre>"},{"location":"enterprise/#multi-region_setup","title":"Multi-Region Setup","text":"<pre><code>regions:\n  primary:\n    region: \"us-east-1\"\n    components: [\"all\"]\n  secondary:\n    region: \"eu-west-1\"\n    components: [\"cache\", \"runners\"]\n    failover: true\n  disaster_recovery:\n    region: \"ap-southeast-1\"\n    components: [\"backup_only\"]\n</code></pre>"},{"location":"enterprise/#installation","title":"Installation","text":""},{"location":"enterprise/#prerequisites","title":"Prerequisites","text":"<pre><code># System requirements check\nattest enterprise prereqs check\n# - Kubernetes 1.25+: OK\n# - PostgreSQL 13+: OK\n# - Redis 6+: OK\n# - Storage: 500GB+ available: OK\n# - CPU: 16+ cores: OK\n# - Memory: 64GB+: OK\n\n# License validation\nattest enterprise license validate \\\n  --key-file enterprise.key \\\n  --contact support@alien6.com\n</code></pre>"},{"location":"enterprise/#kubernetes_installation","title":"Kubernetes Installation","text":"<pre><code># Add ATTEST Enterprise Helm repository\nhelm repo add attest-enterprise https://charts.enterprise.attest.continuu.ms\nhelm repo update\n\n# Install with enterprise configuration\nhelm install attest-enterprise attest-enterprise/attest \\\n  --namespace attest-system \\\n  --create-namespace \\\n  --values enterprise-values.yaml\n</code></pre>"},{"location":"enterprise/#enterprise_values_configuration","title":"Enterprise Values Configuration","text":"<pre><code># enterprise-values.yaml\nglobal:\n  enterprise:\n    enabled: true\n    license_key: \"${ATTEST_ENTERPRISE_KEY}\"\n\nmanagement:\n  replicas: 3\n  resources:\n    requests:\n      memory: \"4Gi\"\n      cpu: \"2\"\n    limits:\n      memory: \"8Gi\"\n      cpu: \"4\"\n\ncache:\n  type: \"redis-cluster\"\n  redis:\n    cluster:\n      enabled: true\n      master:\n        count: 3\n      replica:\n        count: 3\n\ndatabase:\n  type: \"postgresql\"\n  postgresql:\n    replication:\n      enabled: true\n      slaveReplicas: 2\n    metrics:\n      enabled: true\n\nmonitoring:\n  prometheus:\n    enabled: true\n    retention: \"30d\"\n  grafana:\n    enabled: true\n    dashboards:\n      enterprise: true\n\nsecurity:\n  rbac:\n    enabled: true\n  networkPolicies:\n    enabled: true\n  podSecurityPolicy:\n    enabled: true\n</code></pre>"},{"location":"enterprise/#user_management","title":"User Management","text":""},{"location":"enterprise/#identity_providers","title":"Identity Providers","text":""},{"location":"enterprise/#ldapactive_directory_integration","title":"LDAP/Active Directory Integration","text":"<pre><code># auth-config.yaml\nauth:\n  providers:\n    - name: \"company-ldap\"\n      type: \"ldap\"\n      config:\n        server: \"ldap.company.com:636\"\n        base_dn: \"DC=company,DC=com\"\n        user_dn: \"CN=Users,DC=company,DC=com\"\n        group_dn: \"CN=Groups,DC=company,DC=com\"\n        bind_user: \"CN=attest-service,CN=Users,DC=company,DC=com\"\n        bind_password: \"${LDAP_PASSWORD}\"\n        user_id_attribute: \"sAMAccountName\"\n        group_membership_attribute: \"memberOf\"\n        tls:\n          enabled: true\n          skip_verify: false\n</code></pre>"},{"location":"enterprise/#saml_integration","title":"SAML Integration","text":"<pre><code>auth:\n  providers:\n    - name: \"company-saml\"\n      type: \"saml\"\n      config:\n        entity_id: \"https://attest.company.com\"\n        sso_url: \"https://sso.company.com/saml/sso\"\n        certificate: \"/etc/attest/saml/company.crt\"\n        attribute_mapping:\n          email: \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\"\n          name: \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"\n          groups: \"http://schemas.company.com/identity/claims/groups\"\n</code></pre>"},{"location":"enterprise/#oauth_20_openid_connect","title":"OAuth 2.0 / OpenID Connect","text":"<pre><code>auth:\n  providers:\n    - name: \"company-oidc\"\n      type: \"oidc\"\n      config:\n        issuer: \"https://auth.company.com\"\n        client_id: \"attest-enterprise\"\n        client_secret: \"${OIDC_CLIENT_SECRET}\"\n        scopes: [\"openid\", \"profile\", \"email\", \"groups\"]\n        redirect_url: \"https://attest.company.com/auth/callback\"\n</code></pre>"},{"location":"enterprise/#role-based_access_control","title":"Role-Based Access Control","text":"<pre><code># rbac-config.yaml\nroles:\n  - name: \"admin\"\n    permissions:\n      - \"manage:users\"\n      - \"manage:policies\"\n      - \"manage:keys\"\n      - \"view:all\"\n      - \"audit:all\"\n\n  - name: \"developer\"\n    permissions:\n      - \"create:pipelines\"\n      - \"view:own_projects\"\n      - \"execute:builds\"\n\n  - name: \"security_officer\"\n    permissions:\n      - \"view:security_reports\"\n      - \"manage:policies\"\n      - \"audit:all\"\n\n  - name: \"viewer\"\n    permissions:\n      - \"view:pipelines\"\n      - \"view:reports\"\n\ngroups:\n  - name: \"platform-team\"\n    roles: [\"admin\"]\n    members: [\"alice@company.com\", \"bob@company.com\"]\n\n  - name: \"dev-team-frontend\"\n    roles: [\"developer\"]\n    projects: [\"webapp\", \"mobile-app\"]\n\n  - name: \"security-team\"\n    roles: [\"security_officer\"]\n    scope: \"global\"\n</code></pre>"},{"location":"enterprise/#centralized_management","title":"Centralized Management","text":""},{"location":"enterprise/#management_console","title":"Management Console","text":"<pre><code># Access management console\nkubectl port-forward svc/attest-management 8080:80 -n attest-system\n# Navigate to https://localhost:8080\n\n# CLI management\nattest enterprise manage users list\nattest enterprise manage projects list\nattest enterprise manage policies list\n</code></pre>"},{"location":"enterprise/#project_management","title":"Project Management","text":"<pre><code># project-config.yaml\nprojects:\n  - name: \"webapp\"\n    description: \"Frontend web application\"\n    teams: [\"frontend-team\"]\n    environments: [\"dev\", \"staging\", \"prod\"]\n    compliance_level: \"standard\"\n\n  - name: \"payment-service\"\n    description: \"Payment processing microservice\"\n    teams: [\"backend-team\", \"security-team\"]\n    environments: [\"dev\", \"staging\", \"prod\"]\n    compliance_level: \"strict\"\n    security:\n      require_approval: true\n      signing_required: true\n</code></pre>"},{"location":"enterprise/#global_policies","title":"Global Policies","text":"<pre><code># global-policies.yaml\nglobal_policies:\n  security:\n    - name: \"require-signature\"\n      description: \"All production builds must be signed\"\n      scope: \"environment:production\"\n      enforcement: \"strict\"\n\n    - name: \"security-scan\"\n      description: \"All builds must pass security scanning\"\n      scope: \"all\"\n      enforcement: \"warn\"\n\n  compliance:\n    - name: \"audit-trail\"\n      description: \"Maintain complete audit trail\"\n      retention: \"7 years\"\n      immutable: true\n\n    - name: \"separation-of-duties\"\n      description: \"Require approval for production deployments\"\n      approvers:\n        minimum: 2\n        roles: [\"security_officer\", \"release_manager\"]\n</code></pre>"},{"location":"enterprise/#compliance_governance","title":"Compliance &amp; Governance","text":""},{"location":"enterprise/#compliance_frameworks","title":"Compliance Frameworks","text":""},{"location":"enterprise/#sox_compliance","title":"SOX Compliance","text":"<pre><code>compliance:\n  sox:\n    enabled: true\n    requirements:\n      - \"segregation_of_duties\"\n      - \"change_management\"\n      - \"access_controls\"\n      - \"audit_trail\"\n    controls:\n      change_approval:\n        required: true\n        approvers: 2\n        roles: [\"sox_approver\"]\n      deployment_approval:\n        production_only: true\n        cooling_period: \"24h\"\n</code></pre>"},{"location":"enterprise/#hipaa_compliance","title":"HIPAA Compliance","text":"<pre><code>compliance:\n  hipaa:\n    enabled: true\n    requirements:\n      - \"data_encryption\"\n      - \"access_logging\"\n      - \"minimum_necessary\"\n      - \"breach_notification\"\n    controls:\n      encryption:\n        at_rest: true\n        in_transit: true\n        key_management: \"hsm\"\n      audit_logging:\n        comprehensive: true\n        retention: \"6 years\"\n</code></pre>"},{"location":"enterprise/#iso_27001","title":"ISO 27001","text":"<pre><code>compliance:\n  iso27001:\n    enabled: true\n    controls:\n      - \"A.9.1.1\"  # Access control policy\n      - \"A.9.2.1\"  # User registration\n      - \"A.12.6.1\" # Management of vulnerabilities\n      - \"A.14.2.5\" # Secure system engineering\n</code></pre>"},{"location":"enterprise/#audit_and_reporting","title":"Audit and Reporting","text":"<pre><code># Generate compliance reports\nattest enterprise audit generate \\\n  --framework sox \\\n  --period \"2024-Q1\" \\\n  --output compliance-report-q1.pdf\n\n# Continuous compliance monitoring\nattest enterprise compliance monitor \\\n  --frameworks sox,hipaa,iso27001 \\\n  --alerts-webhook https://compliance.company.com/webhook\n</code></pre>"},{"location":"enterprise/#high_availability","title":"High Availability","text":""},{"location":"enterprise/#database_high_availability","title":"Database High Availability","text":"<pre><code>database:\n  postgresql:\n    architecture: \"replication\"\n    primary:\n      replicas: 1\n    readReplicas:\n      replicas: 2\n    backup:\n      enabled: true\n      schedule: \"0 2 * * *\"\n      retention: \"30d\"\n    failover:\n      automatic: true\n      timeout: \"30s\"\n</code></pre>"},{"location":"enterprise/#cache_high_availability","title":"Cache High Availability","text":"<pre><code>cache:\n  redis:\n    architecture: \"cluster\"\n    cluster:\n      replicas: 6\n      minimumMasters: 3\n    sentinel:\n      enabled: true\n      replicas: 3\n    backup:\n      schedule: \"0 3 * * *\"\n      retention: \"7d\"\n</code></pre>"},{"location":"enterprise/#load_balancing","title":"Load Balancing","text":"<pre><code>load_balancer:\n  type: \"nginx\"\n  replicas: 3\n  config:\n    upstream:\n      - \"attest-api-1:8080\"\n      - \"attest-api-2:8080\"\n      - \"attest-api-3:8080\"\n    health_check:\n      interval: \"10s\"\n      timeout: \"5s\"\n      retries: 3\n</code></pre>"},{"location":"enterprise/#monitoring_alerting","title":"Monitoring &amp; Alerting","text":""},{"location":"enterprise/#enterprise_metrics","title":"Enterprise Metrics","text":"<pre><code>monitoring:\n  prometheus:\n    enabled: true\n    retention: \"90d\"\n    external_labels:\n      cluster: \"production\"\n      environment: \"enterprise\"\n\n  grafana:\n    enabled: true\n    dashboards:\n      - \"enterprise-overview\"\n      - \"compliance-dashboard\"\n      - \"security-metrics\"\n      - \"performance-analytics\"\n\n  alertmanager:\n    enabled: true\n    config:\n      global:\n        smtp_smarthost: \"smtp.company.com:587\"\n      route:\n        group_by: [\"alertname\", \"cluster\", \"service\"]\n        group_wait: \"10s\"\n        group_interval: \"10s\"\n        repeat_interval: \"1h\"\n        receiver: \"enterprise-alerts\"\n</code></pre>"},{"location":"enterprise/#custom_alerts","title":"Custom Alerts","text":"<pre><code>alerts:\n  - name: \"enterprise-license-expiry\"\n    condition: \"days_until_license_expiry &lt; 30\"\n    severity: \"warning\"\n\n  - name: \"compliance-violation\"\n    condition: \"compliance_violations &gt; 0\"\n    severity: \"critical\"\n\n  - name: \"security-scan-failure\"\n    condition: \"security_scan_failures &gt; 5\"\n    severity: \"high\"\n\n  - name: \"audit-log-integrity\"\n    condition: \"audit_log_verification_failed\"\n    severity: \"critical\"\n</code></pre>"},{"location":"enterprise/#security","title":"Security","text":""},{"location":"enterprise/#enterprise_security_features","title":"Enterprise Security Features","text":"<pre><code>security:\n  encryption:\n    at_rest:\n      enabled: true\n      algorithm: \"AES-256-GCM\"\n      key_rotation: \"quarterly\"\n    in_transit:\n      enabled: true\n      tls_version: \"1.3\"\n      cipher_suites: [\"TLS_AES_256_GCM_SHA384\"]\n\n  hsm:\n    enabled: true\n    provider: \"pkcs11\"\n    slots:\n      - name: \"signing\"\n        type: \"signing\"\n        backup: true\n      - name: \"encryption\"\n        type: \"encryption\"\n        backup: true\n\n  network:\n    isolation: true\n    policies:\n      ingress:\n        - from_namespaces: [\"attest-system\"]\n          ports: [8080, 9090]\n      egress:\n        - to_namespaces: [\"kube-system\"]\n          ports: [53]  # DNS\n</code></pre>"},{"location":"enterprise/#secret_management","title":"Secret Management","text":"<pre><code>secrets:\n  vault:\n    enabled: true\n    address: \"https://vault.company.com\"\n    auth_method: \"kubernetes\"\n    paths:\n      signing_keys: \"secret/attest/signing\"\n      api_keys: \"secret/attest/api\"\n      certificates: \"secret/attest/certs\"\n    rotation:\n      enabled: true\n      schedule: \"0 2 1 * *\"  # Monthly\n</code></pre>"},{"location":"enterprise/#backup_disaster_recovery","title":"Backup &amp; Disaster Recovery","text":""},{"location":"enterprise/#backup_strategy","title":"Backup Strategy","text":"<pre><code>backup:\n  database:\n    schedule: \"0 2 * * *\"\n    retention: \"30d\"\n    encryption: true\n    destinations:\n      - \"s3://company-backups/attest/db/\"\n      - \"gcs://company-dr/attest/db/\"\n\n  cache:\n    schedule: \"0 3 * * *\"\n    retention: \"7d\"\n    destinations:\n      - \"s3://company-backups/attest/cache/\"\n\n  config:\n    schedule: \"0 1 * * *\"\n    retention: \"90d\"\n    destinations:\n      - \"s3://company-backups/attest/config/\"\n</code></pre>"},{"location":"enterprise/#disaster_recovery","title":"Disaster Recovery","text":"<pre><code># DR testing\nattest enterprise dr test \\\n  --scenario \"primary-region-failure\" \\\n  --target-rto \"15m\" \\\n  --target-rpo \"1h\"\n\n# DR activation\nattest enterprise dr activate \\\n  --region \"us-west-2\" \\\n  --restore-from \"latest\"\n</code></pre>"},{"location":"enterprise/#cost_management","title":"Cost Management","text":""},{"location":"enterprise/#resource_optimization","title":"Resource Optimization","text":"<pre><code>resource_management:\n  auto_scaling:\n    enabled: true\n    metrics:\n      - \"cpu_utilization\"\n      - \"memory_utilization\"\n      - \"queue_length\"\n    targets:\n      min_replicas: 3\n      max_replicas: 20\n      cpu_target: 70\n\n  cost_controls:\n    budget_alerts:\n      - threshold: 80\n        period: \"monthly\"\n        action: \"alert\"\n      - threshold: 95\n        period: \"monthly\"\n        action: \"throttle\"\n</code></pre>"},{"location":"enterprise/#usage_analytics","title":"Usage Analytics","text":"<pre><code># Cost analysis\nattest enterprise cost analyze \\\n  --period \"2024-Q1\" \\\n  --breakdown \"team,project,environment\" \\\n  --format excel\n\n# Usage optimization\nattest enterprise optimize \\\n  --target \"cost\" \\\n  --suggestions \"aggressive\"\n</code></pre>"},{"location":"enterprise/#support_services","title":"Support &amp; Services","text":""},{"location":"enterprise/#enterprise_support","title":"Enterprise Support","text":"<pre><code>support:\n  level: \"enterprise\"\n  sla:\n    response_time:\n      critical: \"1h\"\n      high: \"4h\"\n      medium: \"8h\"\n      low: \"24h\"\n  channels:\n    - \"phone\"\n    - \"email\"\n    - \"chat\"\n    - \"dedicated_slack\"\n</code></pre>"},{"location":"enterprise/#professional_services","title":"Professional Services","text":"<ul> <li>Migration assistance</li> <li>Custom integration development</li> <li>Performance optimization</li> <li>Compliance consulting</li> <li>Training and certification</li> </ul>"},{"location":"enterprise/#success_management","title":"Success Management","text":"<ul> <li>Dedicated customer success manager</li> <li>Quarterly business reviews</li> <li>Best practices workshops</li> <li>Regular health checks</li> </ul>"},{"location":"enterprise/#best_practices","title":"Best Practices","text":""},{"location":"enterprise/#deployment","title":"Deployment","text":"<ol> <li>Plan for high availability from the start</li> <li>Implement comprehensive monitoring before going live</li> <li>Test disaster recovery procedures regularly</li> <li>Use infrastructure as code for reproducible deployments</li> <li>Implement gradual rollouts for configuration changes</li> </ol>"},{"location":"enterprise/#132_security","title":"13.2 Security","text":"<ol> <li>Follow least privilege principle for all access</li> <li>Enable all security features by default</li> <li>Regular security assessments and penetration testing</li> <li>Implement defense in depth strategies</li> <li>Maintain security documentation and procedures</li> </ol>"},{"location":"enterprise/#133_operations","title":"13.3 Operations","text":"<ol> <li>Automate routine tasks where possible</li> <li>Monitor business metrics not just technical metrics</li> <li>Implement proper change management procedures</li> <li>Regular capacity planning reviews</li> <li>Maintain runbooks for common operational scenarios</li> </ol> <p>ATTEST Enterprise provides the scalability, security, and compliance features needed for large-scale deployments in enterprise environments.</p>"},{"location":"examples/","title":"Examples & Use Cases","text":""},{"location":"examples/#1_overview","title":"1. Overview","text":"<p>This section provides real-world examples of ATTEST implementations across different industries and use cases.</p>"},{"location":"examples/#2_web_application_pipeline","title":"2. Web Application Pipeline","text":""},{"location":"examples/#nodejs_application","title":"Node.js Application","text":"<pre><code># attest.yaml\nversion: \"0.1\"\nname: \"web-app\"\n\nsteps:\n  install:\n    run: \"npm ci\"\n    inputs: [\"package.json\", \"package-lock.json\"]\n    outputs: [\"node_modules/\"]\n\n  lint:\n    run: \"npm run lint\"\n    inputs: [\"src/\", \".eslintrc.js\"]\n    needs: [\"install\"]\n\n  test:\n    run: \"npm test\"\n    inputs: [\"src/\", \"test/\", \"jest.config.js\"]\n    outputs: [\"coverage/\"]\n    needs: [\"install\"]\n\n  build:\n    run: \"npm run build\"\n    inputs: [\"src/\", \"public/\", \"webpack.config.js\"]\n    outputs: [\"dist/\"]\n    needs: [\"lint\", \"test\"]\n\n  docker-build:\n    run: \"docker build -t myapp:$BUILD_ID .\"\n    inputs: [\"dist/\", \"Dockerfile\"]\n    outputs: [\"docker-image:myapp:$BUILD_ID\"]\n    needs: [\"build\"]\n</code></pre>"},{"location":"examples/#3_microservices_architecture","title":"3. Microservices Architecture","text":""},{"location":"examples/#go_service","title":"Go Service","text":"<pre><code># attest.yaml\nversion: \"0.1\"\nname: \"user-service\"\n\nenv:\n  GO_VERSION: \"1.21\"\n  CGO_ENABLED: \"0\"\n\nsteps:\n  deps:\n    run: \"go mod download\"\n    inputs: [\"go.mod\", \"go.sum\"]\n\n  generate:\n    run: \"go generate ./...\"\n    inputs: [\"internal/\", \"*.go\"]\n    outputs: [\"generated/\"]\n    needs: [\"deps\"]\n\n  test:\n    run: \"go test -v -race -coverprofile=coverage.out ./...\"\n    inputs: [\"internal/\", \"cmd/\", \"*.go\"]\n    outputs: [\"coverage.out\"]\n    needs: [\"generate\"]\n\n  build:\n    run: \"go build -o bin/user-service cmd/main.go\"\n    inputs: [\"internal/\", \"cmd/\", \"*.go\"]\n    outputs: [\"bin/user-service\"]\n    needs: [\"test\"]\n\n  security-scan:\n    run: \"gosec ./...\"\n    inputs: [\"internal/\", \"cmd/\", \"*.go\"]\n    outputs: [\"security-report.json\"]\n    needs: [\"build\"]\n</code></pre>"},{"location":"examples/#4_machine_learning_pipeline","title":"4. Machine Learning Pipeline","text":""},{"location":"examples/#python_ml_model","title":"Python ML Model","text":"<pre><code># attest.yaml\nversion: \"0.1\"\nname: \"ml-model-training\"\n\nsteps:\n  data-validation:\n    run: \"python scripts/validate_data.py\"\n    inputs: [\"data/raw/\", \"schemas/\"]\n    outputs: [\"data/validated/\"]\n\n  feature-engineering:\n    run: \"python scripts/feature_engineering.py\"\n    inputs: [\"data/validated/\", \"configs/features.yaml\"]\n    outputs: [\"data/features/\"]\n    needs: [\"data-validation\"]\n\n  model-training:\n    run: \"python scripts/train_model.py\"\n    inputs: [\"data/features/\", \"configs/model.yaml\"]\n    outputs: [\"models/\", \"metrics/\"]\n    needs: [\"feature-engineering\"]\n\n  model-validation:\n    run: \"python scripts/validate_model.py\"\n    inputs: [\"models/\", \"data/test/\"]\n    outputs: [\"validation-report.json\"]\n    needs: [\"model-training\"]\n\n  model-packaging:\n    run: \"python scripts/package_model.py\"\n    inputs: [\"models/\", \"requirements.txt\"]\n    outputs: [\"artifacts/model.tar.gz\"]\n    needs: [\"model-validation\"]\n</code></pre>"},{"location":"examples/#5_infrastructure_as_code","title":"5. Infrastructure as Code","text":""},{"location":"examples/#terraform_pipeline","title":"Terraform Pipeline","text":"<pre><code># attest.yaml\nversion: \"0.1\"\nname: \"infrastructure-deployment\"\n\nsteps:\n  terraform-init:\n    run: \"terraform init\"\n    inputs: [\"*.tf\", \"terraform.tfvars\"]\n    outputs: [\".terraform/\"]\n\n  terraform-plan:\n    run: \"terraform plan -out=tfplan\"\n    inputs: [\"*.tf\", \"terraform.tfvars\", \".terraform/\"]\n    outputs: [\"tfplan\"]\n    needs: [\"terraform-init\"]\n\n  terraform-validate:\n    run: \"terraform validate\"\n    inputs: [\"*.tf\"]\n    needs: [\"terraform-init\"]\n\n  security-scan:\n    run: \"tfsec . --format json --out tfsec-report.json\"\n    inputs: [\"*.tf\"]\n    outputs: [\"tfsec-report.json\"]\n    needs: [\"terraform-validate\"]\n\n  terraform-apply:\n    run: \"terraform apply tfplan\"\n    inputs: [\"tfplan\"]\n    outputs: [\"terraform.tfstate\"]\n    needs: [\"terraform-plan\", \"security-scan\"]\n</code></pre>"},{"location":"examples/#6_mobile_application","title":"6. Mobile Application","text":""},{"location":"examples/#react_native_app","title":"React Native App","text":"<pre><code># attest.yaml\nversion: \"0.1\"\nname: \"mobile-app\"\n\nenvironments:\n  ios:\n    env:\n      PLATFORM: \"ios\"\n      XCODE_VERSION: \"15.0\"\n  android:\n    env:\n      PLATFORM: \"android\"\n      ANDROID_API_LEVEL: \"34\"\n\nsteps:\n  install:\n    run: \"npm ci &amp;&amp; cd ios &amp;&amp; pod install\"\n    inputs: [\"package.json\", \"package-lock.json\", \"ios/Podfile\"]\n    outputs: [\"node_modules/\", \"ios/Pods/\"]\n\n  test:\n    run: \"npm test\"\n    inputs: [\"src/\", \"__tests__/\"]\n    needs: [\"install\"]\n\n  lint:\n    run: \"npm run lint\"\n    inputs: [\"src/\", \".eslintrc.js\"]\n    needs: [\"install\"]\n\n  build-ios:\n    run: \"npx react-native build-ios --mode Release\"\n    inputs: [\"src/\", \"ios/\", \"node_modules/\"]\n    outputs: [\"ios/build/\"]\n    needs: [\"test\", \"lint\"]\n    env:\n      match: \"ios\"\n\n  build-android:\n    run: \"npx react-native build-android --mode Release\"\n    inputs: [\"src/\", \"android/\", \"node_modules/\"]\n    outputs: [\"android/app/build/\"]\n    needs: [\"test\", \"lint\"]\n    env:\n      match: \"android\"\n</code></pre>"},{"location":"examples/#7_database_migration","title":"7. Database Migration","text":""},{"location":"examples/#database_schema_changes","title":"Database Schema Changes","text":"<pre><code># attest.yaml\nversion: \"0.1\"\nname: \"database-migration\"\n\nsteps:\n  schema-validation:\n    run: \"dbmate validate\"\n    inputs: [\"db/migrations/\"]\n\n  dry-run:\n    run: \"dbmate --dry-run migrate\"\n    inputs: [\"db/migrations/\"]\n    outputs: [\"migration-plan.sql\"]\n    needs: [\"schema-validation\"]\n\n  backup:\n    run: \"pg_dump $DATABASE_URL &gt; backup.sql\"\n    outputs: [\"backup.sql\"]\n    needs: [\"dry-run\"]\n\n  migrate:\n    run: \"dbmate migrate\"\n    inputs: [\"db/migrations/\"]\n    needs: [\"backup\"]\n\n  verify:\n    run: \"python scripts/verify_migration.py\"\n    inputs: [\"tests/migration/\"]\n    needs: [\"migrate\"]\n</code></pre>"},{"location":"examples/#8_multi-language_monorepo","title":"8. Multi-Language Monorepo","text":""},{"location":"examples/#full-stack_application","title":"Full-Stack Application","text":"<pre><code># attest.yaml\nversion: \"0.1\"\nname: \"fullstack-monorepo\"\n\nsteps:\n  # Frontend (React)\n  frontend-install:\n    run: \"cd frontend &amp;&amp; npm ci\"\n    inputs: [\"frontend/package.json\", \"frontend/package-lock.json\"]\n    outputs: [\"frontend/node_modules/\"]\n\n  frontend-test:\n    run: \"cd frontend &amp;&amp; npm test\"\n    inputs: [\"frontend/src/\", \"frontend/__tests__/\"]\n    needs: [\"frontend-install\"]\n\n  frontend-build:\n    run: \"cd frontend &amp;&amp; npm run build\"\n    inputs: [\"frontend/src/\", \"frontend/public/\"]\n    outputs: [\"frontend/dist/\"]\n    needs: [\"frontend-test\"]\n\n  # Backend (Python)\n  backend-install:\n    run: \"cd backend &amp;&amp; pip install -r requirements.txt\"\n    inputs: [\"backend/requirements.txt\"]\n    outputs: [\"backend/.venv/\"]\n\n  backend-test:\n    run: \"cd backend &amp;&amp; python -m pytest\"\n    inputs: [\"backend/src/\", \"backend/tests/\"]\n    needs: [\"backend-install\"]\n\n  backend-build:\n    run: \"cd backend &amp;&amp; python setup.py sdist\"\n    inputs: [\"backend/src/\", \"backend/setup.py\"]\n    outputs: [\"backend/dist/\"]\n    needs: [\"backend-test\"]\n\n  # Integration\n  integration-test:\n    run: \"docker-compose -f docker-compose.test.yml up --abort-on-container-exit\"\n    inputs: [\"frontend/dist/\", \"backend/dist/\", \"docker-compose.test.yml\"]\n    needs: [\"frontend-build\", \"backend-build\"]\n\n  # Deployment\n  docker-build:\n    run: \"docker build -t fullstack-app:$BUILD_ID .\"\n    inputs: [\"frontend/dist/\", \"backend/dist/\", \"Dockerfile\"]\n    outputs: [\"docker-image:fullstack-app:$BUILD_ID\"]\n    needs: [\"integration-test\"]\n</code></pre>"},{"location":"examples/#9_compliance-heavy_environment","title":"9. Compliance-Heavy Environment","text":""},{"location":"examples/#financial_services","title":"Financial Services","text":"<pre><code># attest.yaml\nversion: \"0.1\"\nname: \"trading-system\"\n\nattestation:\n  sign_all_steps: true\n  require_reproducible: true\n\nverification:\n  enabled: true\n  policy: \"Strict\"\n  trusted_keys: [\"fintech-ci-key\"]\n\nsteps:\n  compliance-check:\n    run: \"python scripts/compliance_check.py\"\n    inputs: [\"src/\", \"compliance/rules.yaml\"]\n    outputs: [\"compliance-report.json\"]\n\n  security-scan:\n    run: \"bandit -r src/ -f json -o security-report.json\"\n    inputs: [\"src/\"]\n    outputs: [\"security-report.json\"]\n\n  dependency-audit:\n    run: \"safety check --json --output audit-report.json\"\n    inputs: [\"requirements.txt\"]\n    outputs: [\"audit-report.json\"]\n\n  test:\n    run: \"python -m pytest --junitxml=test-results.xml\"\n    inputs: [\"src/\", \"tests/\"]\n    outputs: [\"test-results.xml\", \"coverage.xml\"]\n    needs: [\"compliance-check\", \"security-scan\"]\n\n  build:\n    run: \"python setup.py sdist bdist_wheel\"\n    inputs: [\"src/\", \"setup.py\"]\n    outputs: [\"dist/\"]\n    needs: [\"test\", \"dependency-audit\"]\n\n  artifact-signing:\n    run: \"gpg --armor --detach-sig dist/*.whl\"\n    inputs: [\"dist/\"]\n    outputs: [\"dist/*.asc\"]\n    needs: [\"build\"]\n</code></pre>"},{"location":"examples/#10_performance-critical_pipeline","title":"10. Performance-Critical Pipeline","text":""},{"location":"examples/#high-frequency_trading_system","title":"High-Frequency Trading System","text":"<pre><code># attest.yaml\nversion: \"0.1\"\nname: \"hft-system\"\n\ncache:\n  enabled: true\n  max_size: \"100GB\"\n  compression: true\n\nsteps:\n  benchmark-baseline:\n    run: \"cargo bench --output-format json &gt; baseline.json\"\n    inputs: [\"src/\", \"benches/\"]\n    outputs: [\"baseline.json\"]\n\n  optimize-build:\n    run: \"cargo build --release --target x86_64-unknown-linux-gnu\"\n    inputs: [\"src/\", \"Cargo.toml\", \"Cargo.lock\"]\n    outputs: [\"target/release/\"]\n\n  performance-test:\n    run: \"cargo bench --output-format json &gt; results.json\"\n    inputs: [\"target/release/\", \"benches/\"]\n    outputs: [\"results.json\"]\n    needs: [\"optimize-build\"]\n\n  performance-analysis:\n    run: \"python scripts/analyze_performance.py baseline.json results.json\"\n    inputs: [\"baseline.json\", \"results.json\"]\n    outputs: [\"performance-report.html\"]\n    needs: [\"benchmark-baseline\", \"performance-test\"]\n\n  latency-test:\n    run: \"./scripts/latency_test.sh\"\n    inputs: [\"target/release/\"]\n    outputs: [\"latency-results.json\"]\n    needs: [\"optimize-build\"]\n</code></pre>"},{"location":"examples/#11_best_practices_by_industry","title":"11. Best Practices by Industry","text":""},{"location":"examples/#healthcare_hipaa","title":"Healthcare (HIPAA)","text":"<pre><code># Healthcare-specific considerations\nattestation:\n  sign_all_steps: true\n  encryption_at_rest: true\n\nverification:\n  policy_validation:\n    enabled: true\n    compliance_frameworks: [\"HIPAA\", \"SOC2\"]\n\nsteps:\n  phi-scan:\n    run: \"python scripts/scan_phi.py\"\n    inputs: [\"src/\", \"data/\"]\n    outputs: [\"phi-report.json\"]\n\n  # Regular pipeline steps...\n</code></pre>"},{"location":"examples/#automotive_iso_26262","title":"Automotive (ISO 26262)","text":"<pre><code># Automotive safety-critical systems\nattestation:\n  safety_level: \"ASIL-D\"\n  require_reproducible: true\n\nverification:\n  functional_safety: true\n\nsteps:\n  safety-analysis:\n    run: \"safety_analyzer --standard ISO26262\"\n    inputs: [\"src/\", \"safety/requirements.xml\"]\n    outputs: [\"safety-report.xml\"]\n</code></pre>"},{"location":"examples/#aerospace_do-178c","title":"Aerospace (DO-178C)","text":"<pre><code># Aerospace software development\nattestation:\n  certification_level: \"DAL-A\"\n  traceability: true\n\nsteps:\n  requirements-tracing:\n    run: \"trace_requirements.py\"\n    inputs: [\"requirements/\", \"src/\"]\n    outputs: [\"traceability-matrix.html\"]\n\n  formal-verification:\n    run: \"cbmc src/critical_functions.c\"\n    inputs: [\"src/critical_functions.c\"]\n    outputs: [\"verification-results.xml\"]\n</code></pre> <p>These examples demonstrate ATTEST's flexibility across different domains while maintaining security and compliance requirements.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#1_general_questions","title":"1. General Questions","text":""},{"location":"faq/#what_is_attest","title":"What is ATTEST?","text":"<p>ATTEST is a modern CI/CD platform that provides cryptographic attestation for build processes. It combines content-addressed caching, Ed25519 signatures, and policy enforcement to create secure, efficient, and verifiable software delivery pipelines.</p>"},{"location":"faq/#how_is_attest_different_from_other_cicd_tools","title":"How is ATTEST different from other CI/CD tools?","text":"<p>ATTEST focuses on three key differentiators:</p> <ol> <li>Cryptographic Attestation: Every step is signed with Ed25519 signatures, creating tamper-proof build records</li> <li>Content-Addressed Caching: Blake3-based caching provides deterministic, secure cache keys</li> <li>Policy Enforcement: Built-in OPA/Gatekeeper integration for compliance and governance</li> </ol>"},{"location":"faq/#is_attest_open_source","title":"Is ATTEST open source?","text":"<p>ATTEST core is available under the CoopyrightCode Light License (v1.1), which permits free non-commercial use. Commercial use requires a separate license. Enterprise features and support are available through commercial licensing.</p>"},{"location":"faq/#what_platforms_does_attest_support","title":"What platforms does ATTEST support?","text":"<p>ATTEST supports: - Operating Systems: Linux, macOS, Windows - Architectures: x86_64, ARM64 - Deployment: Docker, Kubernetes, standalone binaries - Cloud Providers: AWS, GCP, Azure, on-premises</p>"},{"location":"faq/#2_installation_and_setup","title":"2. Installation and Setup","text":""},{"location":"faq/#how_do_i_install_attest","title":"How do I install ATTEST?","text":"<pre><code># Quick install script\ncurl -sSL https://install.attest.continuu.ms | bash\n\n# Or download specific version\nwget https://releases.attest.continuu.ms/v0.1.2/attest-linux-amd64\nchmod +x attest-linux-amd64\nsudo mv attest-linux-amd64 /usr/local/bin/attest\n</code></pre>"},{"location":"faq/#can_i_use_attest_alongside_my_existing_cicd_system","title":"Can I use ATTEST alongside my existing CI/CD system?","text":"<p>Yes! ATTEST is designed for gradual adoption. You can: - Run ATTEST in parallel with existing CI/CD - Use ATTEST for specific projects or environments - Migrate incrementally using hybrid approaches</p>"},{"location":"faq/#what_are_the_system_requirements","title":"What are the system requirements?","text":"<p>Minimum Requirements: - CPU: 2 cores - Memory: 4GB RAM - Storage: 10GB free space - Network: Internet access for downloads</p> <p>Recommended for Production: - CPU: 4+ cores - Memory: 8GB+ RAM - Storage: 100GB+ SSD - Network: High-bandwidth connection</p>"},{"location":"faq/#3_configuration","title":"3. Configuration","text":""},{"location":"faq/#how_do_i_create_my_first_pipeline","title":"How do I create my first pipeline?","text":"<pre><code># Initialize in your project directory\ncd your-project/\nattest init\n\n# Edit the generated attest.yaml\n# Run your pipeline\nattest run\n</code></pre>"},{"location":"faq/#can_i_import_existing_cicd_configurations","title":"Can I import existing CI/CD configurations?","text":"<p>Yes, ATTEST can convert configurations from: - GitHub Actions (.github/workflows/*.yml) - GitLab CI (.gitlab-ci.yml) - Jenkins (Jenkinsfile) - CircleCI (.circleci/config.yml)</p> <pre><code>attest convert --from .github/workflows/ci.yml --to attest.yaml\n</code></pre>"},{"location":"faq/#how_do_i_configure_environment-specific_settings","title":"How do I configure environment-specific settings?","text":"<pre><code># attest.yaml\nenvironments:\n  development:\n    env:\n      DEBUG: \"true\"\n      API_URL: \"https://dev-api.company.com\"\n  production:\n    env:\n      DEBUG: \"false\"\n      API_URL: \"https://api.company.com\"\n</code></pre>"},{"location":"faq/#4_caching","title":"4. Caching","text":""},{"location":"faq/#how_does_attest_caching_work","title":"How does ATTEST caching work?","text":"<p>ATTEST uses content-addressed caching with Blake3 hashing: 1. Input Analysis: All input files are hashed 2. Cache Key Generation: Blake3 hash of inputs + command + environment 3. Cache Lookup: Check if cache entry exists for this exact key 4. Cache Storage: Store outputs with the generated key</p>"},{"location":"faq/#why_is_my_cache_hit_rate_low","title":"Why is my cache hit rate low?","text":"<p>Common causes and solutions:</p> <ol> <li> <p>Non-deterministic inputs:     <pre><code># Check for timestamp files, random data\nattest cache analyze --show-misses\n</code></pre></p> </li> <li> <p>Environment variables changing:    <pre><code># Exclude non-essential variables\nsteps:\n  - name: \"build\"\n    run: \"npm run build\"\n    cache_exclude_env: [\"BUILD_ID\", \"TIMESTAMP\"]\n</code></pre></p> </li> <li> <p>File permissions or metadata differences:    <pre><code># Normalize file attributes\nattest config set cache.ignore_file_mode true\n</code></pre></p> </li> </ol>"},{"location":"faq/#can_i_use_external_cache_storage","title":"Can I use external cache storage?","text":"<p>Yes, ATTEST supports multiple backends:</p> <pre><code>cache:\n  backend: \"s3\"\n  bucket: \"company-attest-cache\"\n  region: \"us-west-2\"\n\n# Or Redis\ncache:\n  backend: \"redis\"\n  endpoint: \"redis.company.com:6379\"\n</code></pre>"},{"location":"faq/#5_security_and_attestation","title":"5. Security and Attestation","text":""},{"location":"faq/#how_secure_are_ed25519_signatures","title":"How secure are Ed25519 signatures?","text":"<p>Ed25519 provides: - 256-bit security level (equivalent to 3072-bit RSA) - Deterministic signatures (same input = same signature) - Fast verification (microseconds, not milliseconds) - Small signature size (64 bytes) - Resistance to side-channel attacks</p>"},{"location":"faq/#how_do_i_manage_signing_keys","title":"How do I manage signing keys?","text":"<pre><code># Generate new key pair\nattest keys generate --algorithm ed25519\n\n# Import existing key\nattest keys import --private-key signing.pem\n\n# Use HSM or TPM for production\nattest keys generate --hsm --slot 0\n</code></pre>"},{"location":"faq/#what_happens_if_my_signing_key_is_compromised","title":"What happens if my signing key is compromised?","text":"<ol> <li> <p>Immediately revoke the compromised key:    <pre><code>attest keys revoke ed25519-key-abc123... --reason \"compromise\"\n</code></pre></p> </li> <li> <p>Generate new key and update trust relationships:    <pre><code>attest keys rotate --emergency\n</code></pre></p> </li> <li> <p>Re-sign critical receipts with new key:    <pre><code>attest resign --key new-key.pem receipts/*.yaml\n</code></pre></p> </li> </ol>"},{"location":"faq/#how_do_i_verify_build_authenticity","title":"How do I verify build authenticity?","text":"<pre><code># Verify single receipt\nattest verify receipt_20241201_143052.yaml\n\n# Verify with specific trusted keys\nattest verify receipt.yaml --trusted-keys alice.pub,bob.pub\n\n# Batch verification\nfind .attest/receipts -name \"*.yaml\" -exec attest verify {} \\;\n</code></pre>"},{"location":"faq/#6_performance","title":"6. Performance","text":""},{"location":"faq/#why_are_my_builds_slow","title":"Why are my builds slow?","text":"<p>Common performance issues:</p> <ol> <li> <p>Cache misses: Enable debug mode to see cache hit rates    <pre><code>attest run --debug --show-cache-stats\n</code></pre></p> </li> <li> <p>Large file copying: Use symlinks or optimized copy strategies    <pre><code>steps:\n  - name: \"copy-files\"\n    run: \"cp -al source/ dest/\"  # Hard link instead of copy\n</code></pre></p> </li> <li> <p>Network latency: Use local or regional cache backends</p> </li> <li> <p>Resource constraints: Check CPU/memory usage    <pre><code>attest monitor resources --duration 5m\n</code></pre></p> </li> </ol>"},{"location":"faq/#how_can_i_optimize_build_performance","title":"How can I optimize build performance?","text":"<ol> <li> <p>Enable aggressive caching:    <pre><code>cache:\n  enabled: true\n  compression: true\n  max_size: \"10GB\"\n</code></pre></p> </li> <li> <p>Parallelize independent steps:    <pre><code>steps:\n  - name: \"lint\"\n    needs: [\"install\"]\n  - name: \"test\"\n    needs: [\"install\"]  # Runs parallel to lint\n</code></pre></p> </li> <li> <p>Optimize Docker builds:    <pre><code>steps:\n  - name: \"docker-build\"\n    run: \"docker build --cache-from myapp:cache .\"\n</code></pre></p> </li> </ol>"},{"location":"faq/#whats_the_overhead_of_cryptographic_signing","title":"What's the overhead of cryptographic signing?","text":"<p>Signing overhead is minimal: - Signing time: ~1ms per receipt - Verification time: ~0.5ms per receipt - Storage overhead: 64 bytes per signature - CPU impact: &lt;1% for typical workloads</p>"},{"location":"faq/#7_policies_and_compliance","title":"7. Policies and Compliance","text":""},{"location":"faq/#how_do_i_enforce_security_policies","title":"How do I enforce security policies?","text":"<p>ATTEST includes built-in policy enforcement:</p> <pre><code>policies:\n  - name: \"require-security-scan\"\n    type: \"step-required\"\n    step_pattern: \"*security*\"\n    enforcement: \"strict\"\n\n  - name: \"signed-production-builds\"\n    type: \"signature-required\"\n    condition: \"{{ env.ENVIRONMENT == 'production' }}\"\n</code></pre>"},{"location":"faq/#can_attest_help_with_compliance_requirements","title":"Can ATTEST help with compliance requirements?","text":"<p>Yes, ATTEST supports various compliance frameworks:</p> <ul> <li>SOX: Segregation of duties, change management</li> <li>HIPAA: Audit trails, access controls</li> <li>PCI-DSS: Secure development practices</li> <li>ISO 27001: Information security management</li> <li>NIST: Cybersecurity framework compliance</li> </ul>"},{"location":"faq/#how_do_i_implement_approval_workflows","title":"How do I implement approval workflows?","text":"<pre><code>policies:\n  - name: \"production-approval\"\n    type: \"approval-required\"\n    condition: \"{{ env.ENVIRONMENT == 'production' }}\"\n    approvers:\n      minimum: 2\n      roles: [\"security-officer\", \"release-manager\"]\n</code></pre>"},{"location":"faq/#8_integration","title":"8. Integration","text":""},{"location":"faq/#can_i_integrate_attest_with_my_existing_tools","title":"Can I integrate ATTEST with my existing tools?","text":"<p>Yes, ATTEST provides:</p> <ul> <li>REST API for programmatic access</li> <li>SDKs for Python, JavaScript, Go, Rust</li> <li>Webhooks for event notifications</li> <li>CLI for scripting and automation</li> </ul>"},{"location":"faq/#how_do_i_integrate_with_monitoring_systems","title":"How do I integrate with monitoring systems?","text":"<pre><code>monitoring:\n  prometheus:\n    enabled: true\n    endpoint: \":9090\"\n  grafana:\n    dashboards: true\n  alerts:\n    webhook: \"https://alerts.company.com/webhook\"\n</code></pre>"},{"location":"faq/#can_i_use_attest_with_gitops","title":"Can I use ATTEST with GitOps?","text":"<p>ATTEST includes native GitOps support:</p> <pre><code>gitops:\n  enabled: true\n  repository: \"https://github.com/company/k8s-manifests\"\n  branch: \"main\"\n  path: \"applications/\"\n  verification:\n    require_signatures: true\n</code></pre>"},{"location":"faq/#9_troubleshooting","title":"9. Troubleshooting","text":""},{"location":"faq/#my_builds_are_failing_with_permission_denied_errors","title":"My builds are failing with \"permission denied\" errors","text":"<p>This usually indicates file permission issues:</p> <pre><code># Check and fix permissions\nattest permissions check --fix-permissions\n\n# Or manually fix\nchmod -R u+rw .attest/\nchown -R $USER:$USER .attest/\n</code></pre>"},{"location":"faq/#im_getting_cache_corruption_errors","title":"I'm getting \"cache corruption\" errors","text":"<p>Cache corruption can occur due to disk issues or interrupted operations:</p> <pre><code># Verify and repair cache\nattest cache verify --repair\n\n# Or rebuild cache completely\nattest cache clear --all --rebuild\n</code></pre>"},{"location":"faq/#how_do_i_debug_configuration_issues","title":"How do I debug configuration issues?","text":"<pre><code># Validate configuration\nattest config validate --strict\n\n# Show resolved configuration\nattest config show --resolved\n\n# Debug mode for detailed logging\nattest run --debug --log-level trace\n</code></pre>"},{"location":"faq/#10_licensing_and_support","title":"10. Licensing and Support","text":""},{"location":"faq/#what_license_is_attest_under","title":"What license is ATTEST under?","text":"<ul> <li>Core ATTEST: CoopyrightCode Light License (v1.1) - free for non-commercial use</li> <li>Enterprise features: Commercial license required</li> <li>Professional support: Available with commercial license</li> </ul>"},{"location":"faq/#how_do_i_get_support","title":"How do I get support?","text":"<p>Community Support: - GitHub Issues: https://github.com/Alien6-Studio/continuum-attest/issues - Community Forum: https://community.attest.continuu.ms - Discord: https://discord.gg/attest</p> <p>Professional Support: - Email: support@alien6.com - Enterprise customers: Dedicated support channels - SLA-backed response times for enterprise</p>"},{"location":"faq/#can_i_contribute_to_attest","title":"Can I contribute to ATTEST?","text":"<p>Yes! We welcome contributions:</p> <ol> <li>Code contributions: Submit PRs to GitHub</li> <li>Documentation: Help improve docs</li> <li>Bug reports: File issues with detailed reproduction steps</li> <li>Feature requests: Propose new features via GitHub issues</li> </ol>"},{"location":"faq/#how_do_i_report_security_vulnerabilities","title":"How do I report security vulnerabilities?","text":"<p>Please report security issues responsibly:</p> <ul> <li>Email: security@attest.continuu.ms</li> <li>PGP Key: Available at https://attest.continuu.ms/security.asc</li> <li>Do not create public GitHub issues for security vulnerabilities</li> </ul>"},{"location":"faq/#11_enterprise_features","title":"11. Enterprise Features","text":""},{"location":"faq/#what_enterprise_features_are_available","title":"What enterprise features are available?","text":"<p>Enterprise features include: - Multi-tenant management - Advanced RBAC and SSO - Compliance frameworks - Professional support - High availability deployment - Advanced monitoring and analytics</p>"},{"location":"faq/#how_do_i_migrate_from_community_to_enterprise","title":"How do I migrate from community to enterprise?","text":"<p>Migration is seamless: 1. Contact sales at contact@alien6.com 2. Receive enterprise license key 3. Update configuration with license key 4. Enable enterprise features as needed</p>"},{"location":"faq/#whats_the_pricing_model","title":"What's the pricing model?","text":"<p>Pricing is based on: - Number of build minutes per month - Number of users/seats - Enterprise features required - Support level needed</p> <p>Contact contact@alien6.com for detailed pricing.</p>"},{"location":"faq/#12_best_practices","title":"12. Best Practices","text":""},{"location":"faq/#what_are_the_recommended_best_practices","title":"What are the recommended best practices?","text":"<p>Security: 1. Use HSM or TPM for production signing keys 2. Implement least-privilege access controls 3. Enable comprehensive audit logging 4. Regular key rotation schedules 5. Policy-based compliance enforcement</p> <p>Performance: 1. Enable caching for all expensive operations 2. Use appropriate cache backends for scale 3. Implement parallel execution where possible 4. Monitor and optimize resource usage 5. Regular performance testing and optimization</p> <p>Operations: 1. Implement proper monitoring and alerting 2. Regular backup and disaster recovery testing 3. Gradual rollout of configuration changes 4. Comprehensive documentation and runbooks 5. Team training and knowledge sharing</p>"},{"location":"faq/#how_do_i_scale_attest_for_large_organizations","title":"How do I scale ATTEST for large organizations?","text":"<p>Architecture: - Use distributed cache backends (Redis Cluster, S3) - Deploy multiple ATTEST instances with load balancing - Implement proper resource limits and quotas - Use Kubernetes for container orchestration</p> <p>Management: - Centralized configuration management - Role-based access control (RBAC) - Policy governance and compliance frameworks - Comprehensive monitoring and analytics</p> <p>Operations: - Automated deployment and configuration - Regular capacity planning and scaling - Disaster recovery and business continuity - Performance monitoring and optimization</p> <p>This FAQ covers the most common questions about ATTEST. For additional help, please consult the documentation or contact support.</p>"},{"location":"first-steps/","title":"First Steps","text":""},{"location":"first-steps/#1_your_first_pipeline_in_5_minutes","title":"1. Your First Pipeline in 5 Minutes","text":"<p>Let's create and run your first ATTEST pipeline! This guide will take you from zero to a working, cryptographically signed build pipeline.</p>"},{"location":"first-steps/#2_quick_start","title":"2. Quick Start","text":""},{"location":"first-steps/#21_step_1_initialize_your_project","title":"2.1 Step 1: Initialize Your Project","text":"<pre><code># Navigate to your project directory\ncd your-existing-project\n\n# Or create a new test project\nmkdir my-first-attest-project\ncd my-first-attest-project\n\n# Initialize ATTEST\nattest init\n</code></pre> <p>This creates: - \ud83d\udcc1 <code>.attest/</code> - ATTEST configuration and cache -  <code>attest.yaml</code> - Your pipeline definition -  <code>.attestignore</code> - Files to exclude from builds</p>"},{"location":"first-steps/#22_step_2_examine_the_generated_pipeline","title":"2.2 Step 2: Examine the Generated Pipeline","text":"<pre><code># Look at your pipeline\ncat attest.yaml\n</code></pre> <p>You'll see something like: <pre><code>version: \"0.1\"\nname: \"my-first-project\"\n\nsteps:\n  build:\n    run: \"echo 'Building application...' &amp;&amp; sleep 2\"\n    inputs: [\"src/\"]\n    outputs: [\"build/\"]\n\n  test:\n    run: \"echo 'Running tests...' &amp;&amp; sleep 1\"\n    inputs: [\"build/\", \"tests/\"]\n    needs: [\"build\"]\n\n  package:\n    run: \"echo 'Creating package...' &amp;&amp; sleep 1\"\n    inputs: [\"build/\"]\n    outputs: [\"dist/\"]\n    needs: [\"test\"]\n</code></pre></p>"},{"location":"first-steps/#23_step_3_run_your_pipeline","title":"2.3 Step 3: Run Your Pipeline","text":"<pre><code># Basic run\nattest run\n\n# Run with verification and cryptographic signing\nattest run --verify --sign\n\n# Show what would run without executing\nattest run --dry-run\n</code></pre>"},{"location":"first-steps/#24_step_4_verify_your_results","title":"2.4 Step 4: Verify Your Results","text":"<pre><code># View execution history\nattest audit history\n\n# Verify the cryptographic signature\nattest verify receipt_*.yaml --check-signatures\n\n# Show pipeline visualization\nattest pipeline show --format ascii\n</code></pre> <p>Congratulations! You've just run your first cryptographically signed, reproducible build pipeline!</p>"},{"location":"first-steps/#3_understanding_what_happened","title":"3. Understanding What Happened","text":""},{"location":"first-steps/#31_pipeline_execution_flow","title":"3.1 Pipeline Execution Flow","text":"<pre><code>graph TD\n    A[attest run] --&gt; B[Load attest.yaml]\n    B --&gt; C[Validate Pipeline]\n    C --&gt; D[Execute: build]\n    D --&gt; E[Execute: test]\n    E --&gt; F[Execute: package]\n    F --&gt; G[Generate Receipt]\n    G --&gt; H{Sign Receipt?}\n    H --&gt;|Yes| I[Cryptographic Signature]\n    H --&gt;|No| J[Store Receipt]\n    I --&gt; J\n    J --&gt; K[Pipeline Complete]</code></pre>"},{"location":"first-steps/#32_generated_artifacts","title":"3.2 Generated Artifacts","text":"<p>After running your pipeline, you'll find:</p> <pre><code># List all generated files\nls -la .attest/\n\n# Receipt files (execution records)\nls -la .attest/receipts/\n# receipt_20241201_143052.yaml\n\n# Cache files (for faster subsequent runs)\nls -la .attest/cache/\n\n# Cryptographic keys (if signing enabled)\nls -la .attest/keys/\n# private.key  public.key\n</code></pre>"},{"location":"first-steps/#4_customizing_your_pipeline","title":"4. Customizing Your Pipeline","text":""},{"location":"first-steps/#41_real-world_example_nodejs_application","title":"4.1 Real-World Example: Node.js Application","text":"<p>Let's create a realistic pipeline for a Node.js project:</p> <pre><code>version: \"0.1\"\nname: \"nodejs-web-app\"\n\nenv:\n  NODE_ENV: production\n  NPM_CONFIG_CACHE: .attest/cache/npm\n\nsteps:\n  install:\n    run: \"npm ci\"\n    inputs: [\"package.json\", \"package-lock.json\"]\n    outputs: [\"node_modules/\"]\n    cache: true\n\n  lint:\n    run: \"npm run lint\"\n    needs: [\"install\"]\n    inputs: [\"src/\", \"node_modules/\"]\n    outputs: []\n\n  test:\n    run: \"npm test\"\n    needs: [\"install\"]\n    inputs: [\"src/\", \"tests/\", \"node_modules/\"]\n    outputs: [\"coverage/\"]\n\n  build:\n    run: \"npm run build\"\n    needs: [\"lint\", \"test\"]\n    inputs: [\"src/\", \"node_modules/\"]\n    outputs: [\"dist/\"]\n    env:\n      NODE_ENV: production\n\n  package:\n    run: |\n      tar -czf app-${CI_COMMIT_SHA:-latest}.tar.gz dist/\n      echo \"Package created: app-${CI_COMMIT_SHA:-latest}.tar.gz\"\n    needs: [\"build\"]\n    inputs: [\"dist/\"]\n    outputs: [\"*.tar.gz\"]\n</code></pre> <p>Save this as <code>attest.yaml</code> and run:</p> <pre><code>attest run --verify --sign --parallel 2\n</code></pre>"},{"location":"first-steps/#42_real-world_example_rust_application","title":"4.2 Real-World Example: Rust Application","text":"<p>For Rust projects:</p> <pre><code>version: \"0.1\"\nname: \"rust-cli-tool\"\n\nenv:\n  CARGO_TERM_COLOR: always\n  RUST_BACKTRACE: 1\n\nsteps:\n  check:\n    run: \"cargo check --all-targets\"\n    inputs: [\"src/\", \"Cargo.toml\", \"Cargo.lock\"]\n    outputs: [\"target/debug/\"]\n    cache: true\n\n  clippy:\n    run: \"cargo clippy -- -D warnings\"\n    needs: [\"check\"]\n    inputs: [\"src/\", \"Cargo.toml\"]\n    outputs: []\n\n  test:\n    run: \"cargo test --all\"\n    needs: [\"check\"]\n    inputs: [\"src/\", \"tests/\", \"Cargo.toml\"]\n    outputs: [\"target/debug/deps/\"]\n\n  build:\n    run: \"cargo build --release\"\n    needs: [\"clippy\", \"test\"]\n    inputs: [\"src/\", \"Cargo.toml\", \"Cargo.lock\"]\n    outputs: [\"target/release/\"]\n    timeout_secs: 300\n\n  package:\n    run: |\n      mkdir -p dist/\n      cp target/release/my-tool dist/\n      tar -czf my-tool-linux.tar.gz -C dist my-tool\n    needs: [\"build\"]\n    inputs: [\"target/release/my-tool\"]\n    outputs: [\"dist/\", \"*.tar.gz\"]\n</code></pre>"},{"location":"first-steps/#5_pipeline_visualization","title":"5. Pipeline Visualization","text":""},{"location":"first-steps/#51_ascii_visualization","title":"5.1 ASCII Visualization","text":"<pre><code>attest pipeline show --format ascii\n\n# Output:\n# \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n# \u2502 install \u2502\u2500\u2500\u2500\u25b6\u2502 lint \u2502\u2500\u2500\u2500\u25b6\u2502  build  \u2502\n# \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#      \u2502                           \u25b2\n#      \u25bc                           \u2502\n# \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n# \u2502   test   \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502package \u2502\n# \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"first-steps/#52_detailed_information","title":"5.2 Detailed Information","text":"<pre><code>attest pipeline show --details --with-timing\n\n# Shows:\n# - Step dependencies\n# - Input/output files\n# - Execution time\n# - Cache status\n</code></pre>"},{"location":"first-steps/#53_export_to_other_formats","title":"5.3 Export to Other Formats","text":"<pre><code># Generate Mermaid diagram\nattest pipeline show --format mermaid &gt; pipeline.mmd\n\n# Generate DOT graph\nattest pipeline show --format dot &gt; pipeline.dot\n</code></pre>"},{"location":"first-steps/#6_working_with_cryptographic_signatures","title":"6. Working with Cryptographic Signatures","text":""},{"location":"first-steps/#61_understanding_signatures","title":"6.1 Understanding Signatures","text":"<p>When you run with <code>--sign</code>, ATTEST:</p> <ol> <li>Generates Key Pair: Ed25519 cryptographic keys</li> <li>Signs Receipt: Creates tamper-proof execution record</li> <li>Enables Verification: Others can verify authenticity</li> </ol>"},{"location":"first-steps/#62_key_management","title":"6.2 Key Management","text":"<pre><code># View your public key\ncat .attest/keys/public.key\n\n# Export public key for sharing\nattest keys export --public &gt; team-public-key.pem\n\n# Import a team member's public key\nattest keys import --public team-public-key.pem\n</code></pre>"},{"location":"first-steps/#63_verification_workflow","title":"6.3 Verification Workflow","text":"<pre><code># Run pipeline with signing\nattest run --verify --sign\n\n# Someone else can verify your work\nattest verify receipt_20241201_143052.yaml --check-signatures\n\n# Verify with external public key\nattest verify receipt_20241201_143052.yaml \\\n  --public-key team-public-key.pem \\\n  --check-signatures\n</code></pre>"},{"location":"first-steps/#7_performance_and_caching","title":"7. Performance and Caching","text":""},{"location":"first-steps/#71_understanding_the_cache","title":"7.1 Understanding the Cache","text":"<p>ATTEST automatically caches: - Input hashes: Detects when files haven't changed - Output artifacts: Reuses previous build results - Step results: Skips unchanged pipeline steps</p>"},{"location":"first-steps/#72_cache_in_action","title":"7.2 Cache in Action","text":"<pre><code># First run (cold cache)\ntime attest run --verify --sign\n# [OK] install (30s)\n# [OK] test (15s) \n# [OK] build (45s)\n# Total: 90s\n\n# Second run (warm cache)\ntime attest run --verify --sign\n# [OK] install (cached, 0.1s)\n# [OK] test (cached, 0.1s)\n# [OK] build (cached, 0.1s)\n# Total: 0.3s\n</code></pre>"},{"location":"first-steps/#73_cache_management","title":"7.3 Cache Management","text":"<pre><code># View cache status\nattest cache status\n\n# Clear specific step cache\nattest cache clear --step build\n\n# Clear all cache\nattest clean --all\n\n# Disable cache for a run\nattest run --no-cache\n</code></pre>"},{"location":"first-steps/#8_debugging_and_troubleshooting","title":"8. Debugging and Troubleshooting","text":""},{"location":"first-steps/#81_verbose_output","title":"8.1 Verbose Output","text":"<pre><code># See detailed execution logs\nattest --verbose run\n\n# Show what files are being tracked\nattest --verbose run --dry-run\n\n# Debug specific step\nattest --verbose run --step build\n</code></pre>"},{"location":"first-steps/#82_pipeline_validation","title":"8.2 Pipeline Validation","text":"<pre><code># Validate pipeline syntax\nattest pipeline validate\n\n# Strict validation with security checks\nattest pipeline validate --strict --security-check\n\n# Check for common issues\nattest pipeline validate --detailed\n</code></pre>"},{"location":"first-steps/#83_common_issues_and_solutions","title":"8.3 Common Issues and Solutions","text":""},{"location":"first-steps/#issue_command_not_found","title":"Issue: \"Command not found\"","text":"<pre><code># Solution: Ensure your commands are available\nwhich npm node cargo\n\n# Or use absolute paths\nrun: \"/usr/local/bin/npm ci\"\n</code></pre>"},{"location":"first-steps/#issue_input_file_not_found","title":"Issue: \"Input file not found\"","text":"<pre><code># Solution: Check your inputs exist\nls -la src/ package.json\n\n# Or make inputs optional\ninputs: [\"src/\", \"package.json?\"]  # ? makes it optional\n</code></pre>"},{"location":"first-steps/#issue_permission_denied","title":"Issue: \"Permission denied\"","text":"<pre><code># Solution: Fix permissions\nchmod +x scripts/build.sh\n\n# Or run with proper permissions\nrun: \"bash scripts/build.sh\"\n</code></pre>"},{"location":"first-steps/#9_next_level_advanced_features","title":"9. Next Level: Advanced Features","text":""},{"location":"first-steps/#91_environment_variables","title":"9.1 Environment Variables","text":"<pre><code># Global environment\nenv:\n  NODE_ENV: production\n  API_URL: https://api.example.com\n\nsteps:\n  build:\n    run: \"npm run build\"\n    env:\n      # Step-specific environment\n      BUILD_TARGET: web\n      OPTIMIZATION: true\n</code></pre>"},{"location":"first-steps/#92_conditional_execution","title":"9.2 Conditional Execution","text":"<pre><code>steps:\n  test:\n    run: |\n      if [ \"$NODE_ENV\" = \"production\" ]; then\n        npm run test:full\n      else\n        npm run test:quick\n      fi\n</code></pre>"},{"location":"first-steps/#93_working_directories","title":"9.3 Working Directories","text":"<pre><code>steps:\n  frontend:\n    run: \"npm run build\"\n    working_dir: \"frontend/\"\n    inputs: [\"frontend/src/\"]\n    outputs: [\"frontend/dist/\"]\n\n  backend:\n    run: \"cargo build --release\"\n    working_dir: \"backend/\"\n    inputs: [\"backend/src/\"]\n    outputs: [\"backend/target/release/\"]\n</code></pre>"},{"location":"first-steps/#94_docker_integration","title":"9.4 Docker Integration","text":"<pre><code>steps:\n  build:\n    run: \"npm run build\"\n    image: \"node:18-alpine\"\n    inputs: [\"package.json\", \"src/\"]\n    outputs: [\"dist/\"]\n</code></pre>"},{"location":"first-steps/#10_best_practices","title":"10. Best Practices","text":""},{"location":"first-steps/#1_organize_your_pipeline","title":"1. Organize Your Pipeline","text":"<ul> <li>Use descriptive step names</li> <li>Group related operations</li> <li>Keep steps focused and single-purpose</li> </ul>"},{"location":"first-steps/#2_manage_dependencies","title":"2. Manage Dependencies","text":"<ul> <li>Minimize cross-step dependencies</li> <li>Use parallel execution where possible</li> <li>Cache expensive operations</li> </ul>"},{"location":"first-steps/#3_handle_inputsoutputs","title":"3. Handle Inputs/Outputs","text":"<ul> <li>Be specific about what files you need</li> <li>Don't include unnecessary files</li> <li>Use <code>.attestignore</code> for large directories</li> </ul>"},{"location":"first-steps/#4_secure_your_pipeline","title":"4. Secure Your Pipeline","text":"<ul> <li>Always use <code>--verify --sign</code> for important builds</li> <li>Keep private keys secure</li> <li>Share public keys with your team</li> </ul>"},{"location":"first-steps/#5_monitor_performance","title":"5. Monitor Performance","text":"<ul> <li>Use <code>--parallel</code> for multi-core systems</li> <li>Monitor cache hit rates</li> <li>Profile slow steps</li> </ul>"},{"location":"first-steps/#11_whats_next","title":"11. What's Next?","text":"<p>Now that you've mastered the basics, explore:</p> <ol> <li>Core Concepts - Deep dive into ATTEST architecture</li> <li>Pipeline Configuration - Advanced pipeline features  </li> <li>Attestation &amp; Signatures - Master cryptographic security</li> <li>GitOps &amp; Kubernetes - Deploy to production securely</li> </ol>"},{"location":"first-steps/#try_these_examples","title":"Try These Examples","text":"<pre><code># Multi-language project\nattest init --template polyglot\n\n# Microservices architecture\nattest init --template microservices\n\n# Machine learning pipeline\nattest init --template ml-pipeline\n\n# Web application with deployment\nattest init --template web-app-deploy\n</code></pre> <p>Ready for more advanced concepts? -&gt; Core Concepts</p> <p>Want to dive into configuration? -&gt; Pipeline Configuration</p>"},{"location":"gitops/","title":"GitOps & Kubernetes","text":""},{"location":"gitops/#1_overview","title":"1. Overview","text":"<p>ATTEST provides native GitOps capabilities with full Kubernetes integration, enabling secure, automated deployments with cryptographic verification at every step.</p>"},{"location":"gitops/#2_gitops_controller_architecture","title":"2. GitOps Controller Architecture","text":"<pre><code>graph TB\n    A[Git Repository] --&gt; B[GitOps Controller]\n    B --&gt; C[Policy Engine]\n    C --&gt; D[Verification Engine]\n    D --&gt; E[Kubernetes API]\n    E --&gt; F[Deployed Applications]\n\n    B --&gt; G[Custom Resources]\n    G --&gt; H[AttestApplication]\n    G --&gt; I[AttestDeployment]\n\n    J[ATTEST Receipts] --&gt; D\n    K[Signatures] --&gt; D</code></pre>"},{"location":"gitops/#3_custom_resource_definitions","title":"3. Custom Resource Definitions","text":""},{"location":"gitops/#31_attestapplication","title":"3.1 AttestApplication","text":"<p>Defines an application managed by the ATTEST GitOps controller:</p> <pre><code>apiVersion: attest.continuu.ms/v1\nkind: AttestApplication\nmetadata:\n  name: web-app\n  namespace: production\nspec:\n  source:\n    repoUrl: https://github.com/company/web-app\n    targetRevision: v1.2.3\n    path: k8s\n  destination:\n    namespace: web-app\n  verification:\n    enabled: true\n    trustedKeys:\n      - \"ed25519-company-ci-key\"\n    policy: Strict\n    receiptVerification:\n      required: true\n      requiredAttestations: [\"build\", \"test\", \"security-scan\"]\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: false\n</code></pre>"},{"location":"gitops/#32_attestdeployment","title":"3.2 AttestDeployment","text":"<p>Represents a specific deployment operation:</p> <pre><code>apiVersion: attest.continuu.ms/v1\nkind: AttestDeployment\nmetadata:\n  name: web-app-v124\n  namespace: production\nspec:\n  applicationRef:\n    name: web-app\n  strategy: Canary\n  canary:\n    weight: 5\n    analysis:\n      templates:\n        - templateName: http-success-rate\n        - templateName: http-latency-p95\n    promotion:\n      autoPromotion:\n        enabled: true\n        successCriteria:\n          minDuration: \"5m\"\n          successRate: 0.995\n</code></pre>"},{"location":"gitops/#4_deployment_strategies","title":"4. Deployment Strategies","text":""},{"location":"gitops/#41_rolling_update","title":"4.1 Rolling Update","text":"<p>Default strategy for zero-downtime deployments:</p> <pre><code>spec:\n  strategy: RollingUpdate\n  rollingUpdate:\n    maxUnavailable: 25%\n    maxSurge: 25%\n</code></pre>"},{"location":"gitops/#42_blue-green_deployment","title":"4.2 Blue-Green Deployment","text":"<p>Complete environment switch for critical applications:</p> <pre><code>spec:\n  strategy: BlueGreen\n  blueGreen:\n    activeService: web-app-active\n    previewService: web-app-preview\n    autoPromotionEnabled: false\n    scaleDownDelaySeconds: 300\n</code></pre>"},{"location":"gitops/#43_canary_deployment","title":"4.3 Canary Deployment","text":"<p>Gradual rollout with automated analysis:</p> <pre><code>spec:\n  strategy: Canary\n  canary:\n    weight: 10\n    maxWeight: 50\n    steps:\n      - setWeight: 10\n      - pause: {duration: 5m}\n      - setWeight: 25\n      - pause: {duration: 10m}\n      - setWeight: 50\n      - pause: {duration: 15m}\n</code></pre>"},{"location":"gitops/#5_verification_engine_integration","title":"5. Verification Engine Integration","text":""},{"location":"gitops/#51_cryptographic_verification","title":"5.1 Cryptographic Verification","text":"<p>Every deployment is cryptographically verified:</p> <pre><code># Verification process\n1. Clone Git repository\n2. Locate ATTEST receipts\n3. Verify cryptographic signatures\n4. Check trusted key chains\n5. Validate receipt contents\n6. Apply to Kubernetes\n</code></pre>"},{"location":"gitops/#52_policy_enforcement","title":"5.2 Policy Enforcement","text":"<p>Integrated with OPA/Gatekeeper for policy compliance:</p> <pre><code>verification:\n  policyValidation:\n    policyBundle: \"https://policies.company.com/security-bundle\"\n    fail_on_violation: true\n    required_policies:\n      - \"attest-security\"\n      - \"attest-deployment\" \n      - \"attest-compliance\"\n</code></pre>"},{"location":"gitops/#6_installation_and_setup","title":"6. Installation and Setup","text":""},{"location":"gitops/#61_prerequisites","title":"6.1 Prerequisites","text":"<pre><code># Kubernetes cluster with admin access\nkubectl version --client\n\n# Helm 3.x\nhelm version\n\n# ATTEST CLI\nattest version\n</code></pre>"},{"location":"gitops/#62_install_gitops_controller","title":"6.2 Install GitOps Controller","text":"<pre><code># Add ATTEST Helm repository\nhelm repo add attest https://charts.attest.continuu.ms\nhelm repo update\n\n# Install controller\nhelm install attest-gitops attest/gitops-controller \\\n  --namespace attest-system \\\n  --create-namespace \\\n  --set controller.verification.enabled=true \\\n  --set controller.policies.enabled=true\n</code></pre>"},{"location":"gitops/#63_manual_installation","title":"6.3 Manual Installation","text":"<pre><code># Apply CRDs\nkubectl apply -f https://raw.githubusercontent.com/attest-ci/attest/main/deploy/crds/\n\n# Apply RBAC\nkubectl apply -f https://raw.githubusercontent.com/attest-ci/attest/main/deploy/rbac/\n\n# Deploy controller\nkubectl apply -f https://raw.githubusercontent.com/attest-ci/attest/main/deploy/controller/\n</code></pre>"},{"location":"gitops/#7_configuration","title":"7. Configuration","text":""},{"location":"gitops/#71_controller_configuration","title":"7.1 Controller Configuration","text":"<pre><code># attest-gitops-config ConfigMap\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: attest-gitops-config\n  namespace: attest-system\ndata:\n  config.yaml: |\n    namespace: attest-system\n    syncIntervalSeconds: 300\n    verificationEnabled: true\n    trustedKeys:\n      - \"ed25519-key-1234567890abcdef\"\n    webhookSecret: \"webhook-secret-123\"\n    policies:\n      enabled: true\n      bundle: \"https://policies.company.com/bundle\"\n</code></pre>"},{"location":"gitops/#72_rbac_configuration","title":"7.2 RBAC Configuration","text":"<p>The controller requires these permissions:</p> <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: attest-gitops-controller\nrules:\n- apiGroups: [\"attest.continuu.ms\"]\n  resources: [\"attestapplications\", \"attestdeployments\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups: [\"\"]\n  resources: [\"configmaps\", \"secrets\", \"services\", \"pods\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups: [\"apps\"]\n  resources: [\"deployments\", \"replicasets\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n</code></pre>"},{"location":"gitops/#8_monitoring_and_observability","title":"8. Monitoring and Observability","text":""},{"location":"gitops/#81_prometheus_metrics","title":"8.1 Prometheus Metrics","text":"<p>The controller exports comprehensive metrics:</p> <pre><code># Applications\nattest_gitops_applications_total\nattest_gitops_applications_by_phase_synced\nattest_gitops_application_sync_duration_seconds\n\n# Deployments  \nattest_gitops_deployments_total\nattest_gitops_deployment_duration_seconds\nattest_gitops_deployments_success_total\n\n# Verifications\nattest_gitops_verifications_total\nattest_gitops_signature_verifications_failed_total\nattest_gitops_policy_validations_total\n</code></pre>"},{"location":"gitops/#82_health_checks","title":"8.2 Health Checks","text":"<pre><code># Liveness probe\ncurl http://controller:8081/health\n\n# Readiness probe  \ncurl http://controller:8081/ready\n\n# Metrics endpoint\ncurl http://controller:8080/metrics\n</code></pre>"},{"location":"gitops/#83_structured_logging","title":"8.3 Structured Logging","text":"<pre><code>{\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"level\": \"INFO\",\n  \"target\": \"attest_gitops::controller\",\n  \"message\": \"Successfully reconciled AttestApplication: default/my-app\",\n  \"fields\": {\n    \"application\": \"my-app\",\n    \"namespace\": \"default\",\n    \"phase\": \"Synced\",\n    \"verification_status\": \"Verified\"\n  }\n}\n</code></pre>"},{"location":"gitops/#9_multi-cluster_deployment","title":"9. Multi-Cluster Deployment","text":""},{"location":"gitops/#91_cluster_registration","title":"9.1 Cluster Registration","text":"<pre><code># Register additional clusters\nattest gitops cluster add staging \\\n  --kubeconfig ~/.kube/staging-config \\\n  --context staging-cluster\n\nattest gitops cluster add production \\\n  --kubeconfig ~/.kube/prod-config \\\n  --context prod-cluster\n</code></pre>"},{"location":"gitops/#92_cross-cluster_applications","title":"9.2 Cross-Cluster Applications","text":"<pre><code>apiVersion: attest.continuu.ms/v1\nkind: AttestApplication\nmetadata:\n  name: multi-cluster-app\nspec:\n  destinations:\n    - cluster: staging\n      namespace: app-staging\n    - cluster: production  \n      namespace: app-production\n  source:\n    repoUrl: https://github.com/company/app\n    path: k8s/overlays\n</code></pre>"},{"location":"gitops/#10_security_considerations","title":"10. Security Considerations","text":""},{"location":"gitops/#101_network_policies","title":"10.1 Network Policies","text":"<pre><code>apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: attest-controller-netpol\nspec:\n  podSelector:\n    matchLabels:\n      app: attest-gitops-controller\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: attest-system\n    ports:\n    - protocol: TCP\n      port: 8080\n</code></pre>"},{"location":"gitops/#102_pod_security_standards","title":"10.2 Pod Security Standards","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: attest-controller\nspec:\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 65534\n    fsGroup: 65534\n  containers:\n  - name: controller\n    securityContext:\n      allowPrivilegeEscalation: false\n      readOnlyRootFilesystem: true\n      capabilities:\n        drop:\n        - ALL\n</code></pre>"},{"location":"gitops/#11_troubleshooting","title":"11. Troubleshooting","text":""},{"location":"gitops/#111_common_commands","title":"11.1 Common Commands","text":"<pre><code># Check application status\nkubectl get attestapplications -A\n\n# View application details\nkubectl describe attestapplication myapp\n\n# Check controller logs\nkubectl logs -n attest-system deployment/attest-gitops-controller\n\n# View events\nkubectl get events --sort-by='.lastTimestamp' -A\n</code></pre>"},{"location":"gitops/#112_debug_mode","title":"11.2 Debug Mode","text":"<pre><code># Enable debug logging\nkubectl patch configmap attest-gitops-config -n attest-system \\\n  --patch '{\"data\":{\"log_level\":\"debug\"}}'\n\n# Restart controller\nkubectl rollout restart deployment/attest-gitops-controller -n attest-system\n</code></pre>"},{"location":"gitops/#12_integration_examples","title":"12. Integration Examples","text":""},{"location":"gitops/#121_github_actions","title":"12.1 GitHub Actions","text":"<pre><code>name: Deploy with ATTEST GitOps\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Build and attest\n        run: attest run --sign --verify\n\n      - name: Update GitOps repository\n        run: |\n          yq e '.spec.template.spec.containers[0].image = \"myapp:${{ github.sha }}\"' -i k8s/deployment.yaml\n          git add k8s/\n          git commit -m \"Update image to ${{ github.sha }}\"\n          git push\n</code></pre>"},{"location":"gitops/#122_argocd_integration","title":"12.2 ArgoCD Integration","text":"<pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: attest-verified-app\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/company/app\n    targetRevision: HEAD\n    path: k8s\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: default\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true\n      - PrunePropagationPolicy=foreground\n</code></pre>"},{"location":"gitops/#13_best_practices","title":"13. Best Practices","text":""},{"location":"gitops/#131_repository_structure","title":"13.1 Repository Structure","text":"<pre><code>your-app/\n\u251c\u2500\u2500 k8s/\n\u2502   \u251c\u2500\u2500 base/\n\u2502   \u2502   \u251c\u2500\u2500 deployment.yaml\n\u2502   \u2502   \u251c\u2500\u2500 service.yaml\n\u2502   \u2502   \u2514\u2500\u2500 kustomization.yaml\n\u2502   \u2514\u2500\u2500 overlays/\n\u2502       \u251c\u2500\u2500 staging/\n\u2502       \u2514\u2500\u2500 production/\n\u251c\u2500\u2500 .attest/\n\u2502   \u251c\u2500\u2500 receipts/\n\u2502   \u2514\u2500\u2500 keys/\n\u2514\u2500\u2500 attest.yaml\n</code></pre>"},{"location":"gitops/#132_security_guidelines","title":"13.2 Security Guidelines","text":"<ol> <li>Always verify signatures in production</li> <li>Use separate keys for different environments  </li> <li>Enable policy enforcement for compliance</li> <li>Audit all deployments with receipt verification</li> <li>Implement proper RBAC for controller access</li> </ol>"},{"location":"gitops/#133_performance_optimization","title":"13.3 Performance Optimization","text":"<ol> <li>Use caching for frequent reconciliations</li> <li>Batch operations when possible</li> <li>Monitor resource usage and scale appropriately</li> <li>Optimize Git operations with shallow clones</li> </ol>"},{"location":"gitops/#14_advanced_features","title":"14. Advanced Features","text":""},{"location":"gitops/#141_custom_verification_hooks","title":"14.1 Custom Verification Hooks","text":"<pre><code>spec:\n  verification:\n    customHooks:\n      - name: security-scan\n        image: security-scanner:latest\n        command: [\"scan\", \"--image\", \"$IMAGE\"]\n      - name: compliance-check\n        image: compliance-checker:latest  \n        command: [\"check\", \"--manifest\", \"$MANIFEST\"]\n</code></pre>"},{"location":"gitops/#142_progressive_delivery","title":"14.2 Progressive Delivery","text":"<pre><code>spec:\n  progressiveDelivery:\n    enabled: true\n    stages:\n      - name: staging\n        weight: 100\n        duration: \"10m\"\n      - name: canary\n        weight: 10\n        duration: \"30m\"\n        successCriteria:\n          errorRate: \"&lt; 1%\"\n          responseTime: \"&lt; 200ms\"\n      - name: production\n        weight: 100\n        duration: \"0\"\n</code></pre> <p>The ATTEST GitOps Controller provides enterprise-grade deployment automation with cryptographic verification, ensuring your Kubernetes deployments are secure, compliant, and auditable.</p>"},{"location":"glossary/","title":"Glossary","text":""},{"location":"glossary/#a","title":"A","text":"<p>Artifact : The output files or data produced by a pipeline step, such as compiled binaries, test reports, or deployment packages. ATTEST tracks and signs all artifacts with cryptographic hashes.</p> <p>Attestation : A cryptographically signed statement that certifies the integrity and authenticity of a build process or artifact. In ATTEST, attestations provide tamper-proof evidence of what happened during pipeline execution.</p> <p>ATTEST : A modern CI/CD platform that provides cryptographic attestation for build processes, combining content-addressed caching, Ed25519 signatures, and policy enforcement.</p>"},{"location":"glossary/#b","title":"B","text":"<p>Blake3 : A cryptographic hash function used by ATTEST for content-addressed caching and integrity verification. Blake3 is faster than SHA-256 while providing the same security level.</p> <p>Build : The process of transforming source code and dependencies into executable artifacts. In ATTEST, each build step is tracked, cached, and cryptographically signed.</p>"},{"location":"glossary/#c","title":"C","text":"<p>Cache Hit : When ATTEST finds a valid cached result for a step's inputs, allowing it to skip re-execution and use the cached outputs. This dramatically improves build performance.</p> <p>Cache Key : A unique identifier generated from a step's inputs, command, and environment. ATTEST uses Blake3 hashing to create deterministic cache keys for reliable caching.</p> <p>Cache Miss : When no valid cached result exists for a step's inputs, requiring the step to be executed. Cache misses can occur due to input changes or cache expiration.</p> <p>Content-Addressed Storage : A storage system where data is identified by its content hash rather than location. ATTEST uses this approach for reliable, deduplicating cache storage.</p> <p>CRD (Custom Resource Definition) : A Kubernetes extension mechanism that allows custom resources to be defined. ATTEST uses CRDs for GitOps integration, defining resources like AttestApplication and AttestDeployment.</p>"},{"location":"glossary/#d","title":"D","text":"<p>Dependency : A relationship between pipeline steps where one step must complete before another can begin. ATTEST uses the <code>needs</code> field to define step dependencies.</p> <p>Deterministic Build : A build process that produces identical outputs given identical inputs. ATTEST promotes deterministic builds through content-addressed caching and controlled environments.</p>"},{"location":"glossary/#e","title":"E","text":"<p>Ed25519 : An elliptic curve digital signature algorithm used by ATTEST for cryptographic signing. Ed25519 provides strong security with fast signing and verification.</p> <p>Environment : A set of configuration values (variables, settings) that define the context for pipeline execution. ATTEST supports multiple named environments like \"development\", \"staging\", and \"production\".</p>"},{"location":"glossary/#f","title":"F","text":"<p>Fingerprint : A short, unique identifier derived from a cryptographic key or certificate. ATTEST uses fingerprints to identify signing keys and verify trust relationships.</p>"},{"location":"glossary/#g","title":"G","text":"<p>Gatekeeper : A Kubernetes admission controller that enforces policies using the Open Policy Agent (OPA). ATTEST integrates with Gatekeeper for policy-based pipeline governance.</p> <p>GitOps : A deployment methodology where the desired state of systems is declared in Git repositories and automatically synchronized. ATTEST includes native GitOps support with verification.</p>"},{"location":"glossary/#h","title":"H","text":"<p>Hash : A fixed-size value computed from input data using a cryptographic function. ATTEST uses Blake3 hashes to identify content, create cache keys, and verify integrity.</p> <p>HSM (Hardware Security Module) : A dedicated hardware device for secure key storage and cryptographic operations. ATTEST can integrate with HSMs for production-grade key management.</p>"},{"location":"glossary/#i","title":"I","text":"<p>Input : Files or data that a pipeline step reads or depends on. ATTEST tracks inputs to determine when steps need re-execution and to generate appropriate cache keys.</p> <p>In-toto : A supply chain security framework that ATTEST is compatible with. In-toto provides specifications for secure software supply chain attestation.</p>"},{"location":"glossary/#k","title":"K","text":"<p>Key Rotation : The process of replacing cryptographic keys with new ones for security purposes. ATTEST supports automated key rotation while maintaining trust relationships.</p> <p>Kubernetes : A container orchestration platform. ATTEST can be deployed on Kubernetes and includes native Kubernetes integration for GitOps workflows.</p>"},{"location":"glossary/#l","title":"L","text":"<p>Lineage : The complete history and dependency chain of how an artifact was produced. ATTEST maintains detailed lineage through signed receipts and attestations.</p>"},{"location":"glossary/#m","title":"M","text":"<p>Manifest : A file describing the desired state of resources or deployments. In GitOps, manifests define what should be deployed and how.</p> <p>Matrix Build : A build strategy that executes the same pipeline across multiple configurations (e.g., different OS versions, language versions). ATTEST supports matrix builds through configuration templates.</p>"},{"location":"glossary/#o","title":"O","text":"<p>OPA (Open Policy Agent) : A policy engine that uses the Rego language to define and evaluate policies. ATTEST integrates OPA for flexible, code-based policy enforcement.</p> <p>Output : Files or data produced by a pipeline step. ATTEST tracks outputs for caching, artifact management, and dependency resolution.</p>"},{"location":"glossary/#p","title":"P","text":"<p>Pipeline : A series of automated steps that transform source code into deployable artifacts. ATTEST pipelines are defined declaratively in YAML format.</p> <p>Policy : A rule or set of rules that govern pipeline behavior. ATTEST policies can enforce security requirements, compliance standards, and operational best practices.</p> <p>Provenance : Information about the origin and history of an artifact, including how it was built and who built it. ATTEST creates cryptographically signed provenance records.</p>"},{"location":"glossary/#r","title":"R","text":"<p>Receipt : A signed record of pipeline execution containing detailed information about inputs, outputs, commands, and environment. Receipts provide tamper-proof audit trails.</p> <p>Rego : The policy language used by Open Policy Agent (OPA). Rego allows expressing complex policies as code for automated evaluation.</p> <p>Reproducible Build : A build process that produces identical outputs when repeated with the same inputs. ATTEST promotes reproducibility through deterministic execution and content addressing.</p>"},{"location":"glossary/#s","title":"S","text":"<p>Signature : A cryptographic proof of authenticity created with a private key. ATTEST signs receipts and attestations to ensure they haven't been tampered with.</p> <p>SLSA (Supply-chain Levels for Software Artifacts) : A security framework specifying requirements for software supply chain integrity. ATTEST helps achieve SLSA compliance through attestation and verification.</p> <p>Step : An individual task or command within a pipeline. ATTEST steps can have dependencies, inputs, outputs, and caching configuration.</p> <p>Supply Chain Security : Practices and technologies that protect the software development and delivery process from attacks. ATTEST enhances supply chain security through cryptographic attestation.</p>"},{"location":"glossary/#t","title":"T","text":"<p>TPM (Trusted Platform Module) : A hardware security chip that can store cryptographic keys and perform secure operations. ATTEST can use TPM for hardware-backed key storage.</p> <p>Trust Chain : A series of cryptographic signatures that establish trust from a root authority to end entities. ATTEST maintains trust chains for key delegation and verification.</p>"},{"location":"glossary/#v","title":"V","text":"<p>Verification : The process of checking that signatures are valid and policies are satisfied. ATTEST performs verification before deployment to ensure integrity.</p> <p>Vulnerability : A security weakness in software or systems. ATTEST can integrate vulnerability scanning into pipelines and enforce policies based on scan results.</p>"},{"location":"glossary/#w","title":"W","text":"<p>Webhook : An HTTP callback triggered by events. ATTEST supports webhooks for integration with external systems and notification of pipeline events.</p> <p>Workflow : Another term for pipeline, referring to the sequence of automated steps in a CI/CD process. ATTEST workflows are defined in <code>attest.yaml</code> files.</p>"},{"location":"glossary/#common_acronyms","title":"Common Acronyms","text":"<p>API : Application Programming Interface - ATTEST provides REST APIs for programmatic access.</p> <p>CI/CD : Continuous Integration/Continuous Deployment - The practice of automating software build, test, and deployment processes.</p> <p>CLI : Command Line Interface - ATTEST provides a comprehensive CLI tool for pipeline management.</p> <p>CRD : Custom Resource Definition - Kubernetes extension mechanism used by ATTEST's GitOps features.</p> <p>RBAC : Role-Based Access Control - Security model for managing user permissions based on roles.</p> <p>SDK : Software Development Kit - ATTEST provides SDKs for multiple programming languages.</p> <p>YAML : Yet Another Markup Language - The configuration format used by ATTEST for pipeline definitions.</p>"},{"location":"glossary/#technical_terms","title":"Technical Terms","text":"<p>Content-Addressed : A storage and retrieval method where data is identified by its content hash rather than location or name.</p> <p>Cryptographic Hash : A mathematical function that produces a fixed-size output from arbitrary input, used for integrity verification and content identification.</p> <p>Digital Signature : A cryptographic mechanism that provides authentication, non-repudiation, and integrity assurance for digital messages or documents.</p> <p>Hermetic Build : A build process that is isolated from external dependencies and produces consistent results regardless of the environment.</p> <p>Immutable : Unable to be changed after creation. ATTEST receipts and signed attestations are immutable to prevent tampering.</p> <p>Merkle Tree : A tree data structure where each node contains the hash of its children, enabling efficient and secure verification of large data structures.</p> <p>Nonce : A random number used once in cryptographic operations to prevent replay attacks and ensure uniqueness.</p> <p>Zero-Knowledge Proof : A cryptographic method where one party can prove knowledge of information without revealing the information itself.</p> <p>This glossary provides definitions for key terms used throughout ATTEST documentation and the broader CI/CD and security domains.</p>"},{"location":"installation/","title":"Installation","text":"<p>The fastest way to install ATTEST is using our installation script:</p> <pre><code># Install from GitHub releases\ncurl -sSL https://raw.githubusercontent.com/Alien6-Studio/continuum-attest/main/scripts/install.sh | sh\n</code></pre> <p>This script automatically: - Detects your operating system and architecture - Downloads the latest stable release - Installs to <code>/usr/local/bin/attest</code> - Sets up shell completions - Verifies the installation</p>"},{"location":"installation/#1_installation_methods","title":"1. Installation Methods","text":""},{"location":"installation/#11_method_1_package_managers","title":"1.1 Method 1: Package Managers","text":""},{"location":"installation/#homebrew_macoslinux","title":"Homebrew (macOS/Linux)","text":"<pre><code># Note: Homebrew formula not yet available\n# Use the installation script or build from source instead\n</code></pre>"},{"location":"installation/#cargo_cross-platform","title":"Cargo (Cross-platform)","text":"<pre><code># Install from source using cargo\ncargo install --git https://github.com/Alien6-Studio/continuum-attest attest\n</code></pre>"},{"location":"installation/#apt_ubuntudebian","title":"APT (Ubuntu/Debian)","text":"<pre><code># Note: APT packages not yet available\n# Use the installation script or build from source instead\n</code></pre>"},{"location":"installation/#yumdnf_rhelcentosfedora","title":"YUM/DNF (RHEL/CentOS/Fedora)","text":"<pre><code># Note: RPM packages not yet available  \n# Use the installation script or build from source instead\n</code></pre>"},{"location":"installation/#snap_universal_linux","title":"Snap (Universal Linux)","text":"<pre><code># Note: Snap package not yet available\n# Use the installation script or build from source instead\n</code></pre>"},{"location":"installation/#chocolatey_windows","title":"Chocolatey (Windows)","text":"<pre><code># Note: Chocolatey package not yet available\n# Use the installation script or build from source instead\n</code></pre>"},{"location":"installation/#scoop_windows","title":"Scoop (Windows)","text":"<pre><code>scoop bucket add attest https://github.com/attest-ci/scoop-bucket\nscoop install attest\n</code></pre>"},{"location":"installation/#12_method_2_pre-built_binaries","title":"1.2 Method 2: Pre-built Binaries","text":"<p>Download from GitHub Releases:</p>"},{"location":"installation/#linux_x86_64","title":"Linux (x86_64)","text":"<pre><code>curl -L https://github.com/Alien6-Studio/continuum-attest/releases/latest/download/attest-linux-x86_64.tar.gz | tar xz\nsudo mv attest /usr/local/bin/\n</code></pre>"},{"location":"installation/#macos_universal","title":"macOS (Universal)","text":"<pre><code>curl -L https://github.com/Alien6-Studio/continuum-attest/releases/latest/download/attest-macos-universal.tar.gz | tar xz\nsudo mv attest /usr/local/bin/\n</code></pre>"},{"location":"installation/#windows_x86_64","title":"Windows (x86_64)","text":"<pre><code>Invoke-WebRequest -Uri \"https://github.com/Alien6-Studio/continuum-attest/releases/latest/download/attest-windows-x86_64.zip\" -OutFile \"attest.zip\"\nExpand-Archive -Path \"attest.zip\" -DestinationPath \".\"\nMove-Item \"attest.exe\" \"$env:USERPROFILE\\bin\\\"\n</code></pre>"},{"location":"installation/#13_method_3_build_from_source","title":"1.3 Method 3: Build from Source","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Rust 1.70+ with Cargo</li> <li>Git</li> <li>C compiler (gcc/clang)</li> </ul>"},{"location":"installation/#build_steps","title":"Build Steps","text":"<pre><code># Clone the repository\ngit clone https://github.com/Alien6-Studio/continuum-attest.git\ncd attest\n\n# Build with all features\ncargo build --release --all-features\n\n# Install locally\ncargo install --path . --all-features\n\n# Verify installation\nattest --version\n</code></pre>"},{"location":"installation/#development_build","title":"Development Build","text":"<pre><code># Development build with debug symbols\ncargo build --all-features\n\n# Run tests\ncargo test --all-features\n\n# Run with logging\nRUST_LOG=debug ./target/debug/attest --help\n</code></pre>"},{"location":"installation/#2_platform-specific_setup","title":"2. Platform-Specific Setup","text":""},{"location":"installation/#21_linux","title":"2.1 Linux","text":""},{"location":"installation/#system_dependencies","title":"System Dependencies","text":"<pre><code># Ubuntu/Debian\nsudo apt install build-essential pkg-config libssl-dev\n\n# RHEL/CentOS/Fedora\nsudo yum groupinstall \"Development Tools\"\nsudo yum install openssl-devel pkg-config\n\n# Arch Linux\nsudo pacman -S base-devel openssl pkg-config\n</code></pre>"},{"location":"installation/#shell_completion","title":"Shell Completion","text":"<pre><code># Bash\nattest completion bash | sudo tee /etc/bash_completion.d/attest\n\n# Zsh\nattest completion zsh | sudo tee /usr/share/zsh/site-functions/_attest\n\n# Fish\nattest completion fish | sudo tee /usr/share/fish/completions/attest.fish\n</code></pre>"},{"location":"installation/#22_macos","title":"2.2 macOS","text":""},{"location":"installation/#xcode_command_line_tools","title":"Xcode Command Line Tools","text":"<pre><code>xcode-select --install\n</code></pre>"},{"location":"installation/#shell_completion_1","title":"Shell Completion","text":"<pre><code># Bash (with Homebrew)\nattest completion bash &gt; $(brew --prefix)/etc/bash_completion.d/attest\n\n# Zsh\nattest completion zsh &gt; /usr/local/share/zsh/site-functions/_attest\n\n# Fish\nattest completion fish &gt; ~/.config/fish/completions/attest.fish\n</code></pre>"},{"location":"installation/#23_windows","title":"2.3 Windows","text":""},{"location":"installation/#prerequisites_1","title":"Prerequisites","text":"<pre><code># Install Rust via rustup\nInvoke-WebRequest -Uri \"https://win.rustup.rs/\" -OutFile \"rustup-init.exe\"\n.\\rustup-init.exe\n\n# Install Git\nwinget install Git.Git\n\n# Install Visual Studio Build Tools\nwinget install Microsoft.VisualStudio.2022.BuildTools\n</code></pre>"},{"location":"installation/#shell_completion_powershell","title":"Shell Completion (PowerShell)","text":"<pre><code># Add to PowerShell profile\nattest completion powershell | Out-String | Invoke-Expression\n\n# Or save to profile\nattest completion powershell &gt;&gt; $PROFILE\n</code></pre>"},{"location":"installation/#3_container_installation","title":"3. Container Installation","text":""},{"location":"installation/#31_docker","title":"3.1 Docker","text":"<pre><code># Official Docker image\ndocker pull attestci/attest:latest\n\n# Run in current directory\ndocker run -v $(pwd):/workspace attestci/attest:latest init\n\n# Interactive shell\ndocker run -it -v $(pwd):/workspace attestci/attest:latest bash\n</code></pre>"},{"location":"installation/#32_kubernetes","title":"3.2 Kubernetes","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: attest-runner\nspec:\n  containers:\n  - name: attest\n    image: attestci/attest:latest\n    command: [\"attest\", \"run\", \"--verify\", \"--sign\"]\n    volumeMounts:\n    - mountPath: /workspace\n      name: source-code\n  volumes:\n  - name: source-code\n    configMap:\n      name: pipeline-source\n</code></pre>"},{"location":"installation/#4_configuration","title":"4. Configuration","text":""},{"location":"installation/#41_global_configuration","title":"4.1 Global Configuration","text":"<pre><code># Create configuration directory\nmkdir -p ~/.config/attest\n\n# Create basic configuration\ncat &gt; ~/.config/attest/config.yaml &lt;&lt; EOF\nversion: \"0.1\"\ncache_enabled: true\ndeterministic: true\nsigning:\n  enabled: true\n  key_path: \"~/.config/attest/keys/signing.key\"\npolicies:\n  enabled: true\n  directory: \"~/.config/attest/policies\"\nEOF\n</code></pre>"},{"location":"installation/#42_environment_variables","title":"4.2 Environment Variables","text":"<pre><code>export ATTEST_CONFIG=\"~/.config/attest/config.yaml\"\nexport ATTEST_CACHE_DIR=\"~/.cache/attest\"\nexport ATTEST_LOG_LEVEL=\"info\"\nexport ATTEST_SIGNING_KEY=\"~/.config/attest/keys/signing.key\"\n</code></pre>"},{"location":"installation/#43_project_configuration","title":"4.3 Project Configuration","text":"<pre><code># Initialize project with ATTEST\ncd your-project\nattest init\n\n# This creates:\n# .attest/config.yaml    - Project-specific configuration\n# .attest/keys/          - Cryptographic keys\n# .attest/cache/         - Build cache\n# .attest/policies/      - Custom policies\n# attest.yaml           - Pipeline definition\n# .attestignore         - Files to ignore\n</code></pre>"},{"location":"installation/#5_verification","title":"5. Verification","text":""},{"location":"installation/#51_basic_verification","title":"5.1 Basic Verification","text":"<pre><code># Check version\nattest --version\n\n# Check configuration\nattest config show\n\n# Test basic functionality\nattest --help\n</code></pre>"},{"location":"installation/#52_complete_system_check","title":"5.2 Complete System Check","text":"<pre><code># Initialize test project\nmkdir attest-test &amp;&amp; cd attest-test\nattest init --template basic\n\n# Run test pipeline\nattest run --dry-run\n\n# Verify components\nattest pipeline validate --strict\nattest policy check --detailed\n\n# Clean up\ncd .. &amp;&amp; rm -rf attest-test\n</code></pre>"},{"location":"installation/#53_integration_test","title":"5.3 Integration Test","text":"<pre><code># Create a real test pipeline\nmkdir integration-test &amp;&amp; cd integration-test\n\n# Initialize with sample project\nattest init --template rust-project\n\n# Run full pipeline with verification\nattest run --verify --sign --parallel 2\n\n# Verify results\nattest verify receipt_*.yaml --check-signatures\n\n# View audit trail\nattest audit history --limit 5\n\n# Clean up\ncd .. &amp;&amp; rm -rf integration-test\n</code></pre>"},{"location":"installation/#6_troubleshooting","title":"6. Troubleshooting","text":""},{"location":"installation/#61_common_issues","title":"6.1 Common Issues","text":""},{"location":"installation/#1_permission_denied","title":"1. Permission Denied","text":"<pre><code># Error: Permission denied when installing\nsudo chown -R $USER:$USER /usr/local/bin\nchmod +x /usr/local/bin/attest\n</code></pre>"},{"location":"installation/#2_command_not_found","title":"2. Command Not Found","text":"<pre><code># Add to PATH\necho 'export PATH=\"/usr/local/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>"},{"location":"installation/#3_ssl_certificate_issues","title":"3. SSL Certificate Issues","text":"<pre><code># Update certificates\nsudo apt update &amp;&amp; sudo apt install ca-certificates\n\n# Or disable SSL verification (not recommended)\nexport ATTEST_SKIP_SSL_VERIFY=true\n</code></pre>"},{"location":"installation/#4_rust_build_issues","title":"4. Rust Build Issues","text":"<pre><code># Update Rust toolchain\nrustup update stable\n\n# Clear cargo cache\ncargo clean\nrm -rf ~/.cargo/registry\n</code></pre>"},{"location":"installation/#5_docker_issues","title":"5. Docker Issues","text":"<pre><code># Check Docker daemon\nsudo systemctl status docker\n\n# Fix permissions\nsudo usermod -aG docker $USER\nnewgrp docker\n</code></pre>"},{"location":"installation/#62_getting_help","title":"6.2 Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check logs: <code>attest --verbose [command]</code></li> <li>Validate configuration: <code>attest config validate</code></li> <li>Update ATTEST: Follow installation steps again</li> <li>Search issues: GitHub Issues</li> <li>Ask for help: Community Forum</li> </ol>"},{"location":"installation/#63_system_requirements","title":"6.3 System Requirements","text":""},{"location":"installation/#minimum_requirements","title":"Minimum Requirements","text":"<ul> <li>RAM: 512MB available</li> <li>Disk: 100MB for installation + cache space</li> <li>CPU: Any 64-bit processor</li> <li>Network: Internet access for updates</li> </ul>"},{"location":"installation/#recommended_requirements","title":"Recommended Requirements","text":"<ul> <li>RAM: 2GB+ for large builds</li> <li>Disk: 1GB+ for cache and artifacts</li> <li>CPU: Multi-core for parallel execution</li> <li>Network: High-speed for Docker pulls</li> </ul>"},{"location":"installation/#7_performance_tuning","title":"7. Performance Tuning","text":""},{"location":"installation/#71_cache_configuration","title":"7.1 Cache Configuration","text":"<pre><code># ~/.config/attest/config.yaml\ncache:\n  enabled: true\n  max_size: \"10GB\"\n  compression: true\n  retention_days: 30\n</code></pre>"},{"location":"installation/#72_parallel_execution","title":"7.2 Parallel Execution","text":"<pre><code># Use all CPU cores\nattest run --parallel $(nproc)\n\n# Or specify exact number\nattest run --parallel 4\n</code></pre>"},{"location":"installation/#73_memory_optimization","title":"7.3 Memory Optimization","text":"<pre><code># Limit memory usage\nexport ATTEST_MAX_MEMORY=\"4GB\"\n\n# Enable memory profiling\nexport ATTEST_MEMORY_PROFILE=true\n</code></pre>"},{"location":"installation/#8_updates","title":"8. Updates","text":""},{"location":"installation/#81_automatic_updates","title":"8.1 Automatic Updates","text":"<pre><code># Enable automatic updates\nattest config set auto_update true\n\n# Check for updates\nattest update check\n\n# Update to latest version\nattest update install\n</code></pre>"},{"location":"installation/#82_manual_updates","title":"8.2 Manual Updates","text":"<pre><code># Homebrew\nbrew upgrade attest\n\n# Cargo\ncargo install --force attest-cli\n\n# Binary replacement\n# Install from GitHub releases\ncurl -sSL https://raw.githubusercontent.com/Alien6-Studio/continuum-attest/main/scripts/install.sh | sh\n</code></pre>"},{"location":"installation/#9_next_steps","title":"9. Next Steps","text":"<p>After successful installation:</p> <ol> <li>First Steps - Create your first pipeline</li> <li>Core Concepts - Understand ATTEST fundamentals</li> <li>Pipeline Configuration - Build robust pipelines</li> </ol> <p>Installation complete!  Ready to create your first pipeline? -&gt; First Steps</p>"},{"location":"interoperability/","title":"CI/CD Interoperability","text":""},{"location":"interoperability/#1_overview","title":"1. Overview","text":"<p>ATTEST integrates seamlessly with existing CI/CD systems, allowing gradual adoption without disrupting current workflows. This section covers integration patterns and migration strategies.</p>"},{"location":"interoperability/#2_supported_platforms","title":"2. Supported Platforms","text":""},{"location":"interoperability/#21_github_actions","title":"2.1 GitHub Actions","text":"<pre><code>name: ATTEST Integration\non: [push, pull_request]\n\njobs:\n  attest-build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Setup ATTEST\n        uses: attest-ci/setup-attest@v1\n        with:\n          version: 'latest'\n\n      - name: Run ATTEST Pipeline\n        run: |\n          attest run --sign --verify\n          attest upload-receipt --destination ${{ secrets.RECEIPT_STORE }}\n\n      - name: Export to GitHub Actions\n        run: attest pipeline export --format github-actions --output .github/workflows/generated.yml\n</code></pre>"},{"location":"interoperability/#22_gitlab_ci","title":"2.2 GitLab CI","text":"<pre><code>stages:\n  - attest\n  - deploy\n\nattest:\n  stage: attest\n  image: attestci/attest:latest\n  script:\n    - attest run --sign --verify\n    - attest verify receipts/*.yaml --strict\n  artifacts:\n    paths:\n      - .attest/receipts/\n    reports:\n      junit: attest-results.xml\n\ndeploy:\n  stage: deploy\n  dependencies:\n    - attest\n  script:\n    - attest verify receipts/*.yaml --check-signatures\n    - kubectl apply -f k8s/\n</code></pre>"},{"location":"interoperability/#23_jenkins","title":"2.3 Jenkins","text":"<pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('ATTEST Build') {\n            steps {\n                script {\n                    sh 'attest run --sign --verify'\n\n                    def receiptFiles = sh(\n                        script: 'find .attest/receipts -name \"*.yaml\"',\n                        returnStdout: true\n                    ).trim().split('\\n')\n\n                    receiptFiles.each { receipt -&gt;\n                        sh \"attest verify ${receipt} --check-signatures\"\n                    }\n                }\n            }\n        }\n\n        stage('Deploy') {\n            when {\n                expression {\n                    sh(script: 'attest verify receipts/*.yaml --quiet', returnStatus: true) == 0\n                }\n            }\n            steps {\n                sh 'kubectl apply -f k8s/'\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"interoperability/#3_export_formats","title":"3. Export Formats","text":""},{"location":"interoperability/#31_generate_cicd_configurations","title":"3.1 Generate CI/CD Configurations","text":"<pre><code># Export to various CI/CD platforms\nattest pipeline export --format github-actions\nattest pipeline export --format gitlab-ci\nattest pipeline export --format jenkins\nattest pipeline export --format azure-pipelines\nattest pipeline export --format circleci\nattest pipeline export --format buildkite\n</code></pre>"},{"location":"interoperability/#32_docker_compose","title":"3.2 Docker Compose","text":"<pre><code># Generate Docker Compose for local development\nattest pipeline export --format docker-compose --output docker-compose.yml\n\n# Generated docker-compose.yml\nversion: '3.8'\nservices:\n  attest-build:\n    image: attestci/attest:latest\n    volumes:\n      - .:/workspace\n    working_dir: /workspace\n    command: [\"attest\", \"run\", \"--sign\", \"--verify\"]\n</code></pre>"},{"location":"interoperability/#4_hybrid_workflows","title":"4. Hybrid Workflows","text":""},{"location":"interoperability/#41_gradual_migration","title":"4.1 Gradual Migration","text":"<pre><code># Phase 1: Parallel execution\nname: Hybrid CI/CD\non: [push]\n\njobs:\n  existing-build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Traditional Build\n        run: npm run build\n\n  attest-build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ATTEST Build\n        run: attest run --sign\n        continue-on-error: true  # Don't fail if ATTEST has issues\n\n  compare-results:\n    needs: [existing-build, attest-build]\n    runs-on: ubuntu-latest\n    steps:\n      - name: Compare Outputs\n        run: |\n          # Compare build artifacts between traditional and ATTEST builds\n          diff -r traditional-dist/ attest-dist/ || true\n</code></pre>"},{"location":"interoperability/#42_conditional_attest_usage","title":"4.2 Conditional ATTEST Usage","text":"<pre><code># Use ATTEST for production, traditional CI for development\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - if: github.ref == 'refs/heads/main'\n        name: Production Build (ATTEST)\n        run: attest run --sign --verify --strict\n\n      - if: github.ref != 'refs/heads/main'\n        name: Development Build (Traditional)\n        run: |\n          npm install\n          npm test\n          npm run build\n</code></pre>"},{"location":"interoperability/#5_legacy_system_integration","title":"5. Legacy System Integration","text":""},{"location":"interoperability/#51_wrapper_scripts","title":"5.1 Wrapper Scripts","text":"<pre><code>#!/bin/bash\n# attest-wrapper.sh - Wrap existing build scripts\n\nset -e\n\n# Initialize ATTEST if not already done\nif [ ! -f \"attest.yaml\" ]; then\n    attest init --from-existing\nfi\n\n# Run ATTEST pipeline that calls existing scripts\nattest run --sign --verify\n\n# Verify results\nattest verify receipts/*.yaml --check-signatures\n\necho \"Build completed with ATTEST verification\"\n</code></pre>"},{"location":"interoperability/#52_makefile_integration","title":"5.2 Makefile Integration","text":"<pre><code># Existing Makefile with ATTEST integration\n.PHONY: build test deploy attest-build\n\n# Traditional targets\nbuild:\n    npm run build\n\ntest:\n    npm test\n\n# ATTEST targets\nattest-build:\n    attest run --sign --verify\n\n# Hybrid target\nsecure-build: attest-build\n    @echo \"Build completed with cryptographic verification\"\n\n# Deployment with verification\ndeploy: secure-build\n    attest verify receipts/*.yaml --check-signatures\n    kubectl apply -f k8s/\n</code></pre>"},{"location":"interoperability/#6_tool_integration","title":"6. Tool Integration","text":""},{"location":"interoperability/#61_docker_integration","title":"6.1 Docker Integration","text":"<pre><code># Multi-stage build with ATTEST\nFROM attestci/attest:latest AS attest-stage\nWORKDIR /app\nCOPY . .\nRUN attest run --sign --verify\n\nFROM node:18-alpine AS runtime\nWORKDIR /app\nCOPY --from=attest-stage /app/dist ./dist\nCOPY --from=attest-stage /app/.attest/receipts ./receipts\nCOPY package*.json ./\nRUN npm ci --production\n\nEXPOSE 3000\nCMD [\"node\", \"dist/server.js\"]\n</code></pre>"},{"location":"interoperability/#62_kubernetes_integration","title":"6.2 Kubernetes Integration","text":"<pre><code># Kubernetes Job for ATTEST builds\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: attest-build\nspec:\n  template:\n    spec:\n      containers:\n      - name: attest\n        image: attestci/attest:latest\n        command: [\"attest\", \"run\", \"--sign\", \"--verify\"]\n        volumeMounts:\n        - name: source-code\n          mountPath: /workspace\n        env:\n        - name: ATTEST_SIGNING_KEY\n          valueFrom:\n            secretKeyRef:\n              name: attest-keys\n              key: signing-key\n      volumes:\n      - name: source-code\n        configMap:\n          name: source-code\n      restartPolicy: Never\n</code></pre>"},{"location":"interoperability/#63_terraform_integration","title":"6.3 Terraform Integration","text":"<pre><code># Terraform configuration for ATTEST infrastructure\nresource \"kubernetes_namespace\" \"attest\" {\n  metadata {\n    name = \"attest-system\"\n  }\n}\n\nresource \"helm_release\" \"attest_controller\" {\n  name       = \"attest-controller\"\n  repository = \"https://charts.attest.continuu.ms\"\n  chart      = \"attest-controller\"\n  namespace  = kubernetes_namespace.attest.metadata[0].name\n\n  values = [\n    templatefile(\"${path.module}/attest-values.yaml\", {\n      signing_key = var.attest_signing_key\n      policy_bundle = var.policy_bundle_url\n    })\n  ]\n}\n</code></pre>"},{"location":"interoperability/#7_migration_strategies","title":"7. Migration Strategies","text":""},{"location":"interoperability/#71_phased_migration","title":"7.1 Phased Migration","text":"<pre><code># Phase 1: Add ATTEST alongside existing CI\nattest init --coexist\ngit add attest.yaml .attest/\ngit commit -m \"Add ATTEST configuration\"\n\n# Phase 2: Parallel execution and validation\nattest migrate --validate-against-existing\n\n# Phase 3: Switch to ATTEST for critical paths\nattest migrate --replace-critical-steps\n\n# Phase 4: Full migration\nattest migrate --complete-migration\n</code></pre>"},{"location":"interoperability/#72_risk_mitigation","title":"7.2 Risk Mitigation","text":"<pre><code># Rollback strategy\nmigration:\n  fallback:\n    enabled: true\n    triggers:\n      - \"attest_failure\"\n      - \"verification_failure\"\n      - \"performance_degradation\"\n    rollback_script: \"./rollback-to-traditional.sh\"\n\n  monitoring:\n    enabled: true\n    metrics:\n      - \"build_duration\"\n      - \"success_rate\"\n      - \"artifact_integrity\"\n    thresholds:\n      max_duration_increase: \"50%\"\n      min_success_rate: \"95%\"\n</code></pre>"},{"location":"interoperability/#8_performance_comparison","title":"8. Performance Comparison","text":""},{"location":"interoperability/#81_benchmarking","title":"8.1 Benchmarking","text":"<pre><code># Compare build performance\nattest benchmark compare \\\n  --traditional-script \"./traditional-build.sh\" \\\n  --attest-pipeline \"attest.yaml\" \\\n  --iterations 10\n\n# Results:\nMetric              | Traditional | ATTEST    | Difference\n--------------------|-------------|-----------|------------\nBuild Time          | 120s        | 85s       | -29% (faster)\nFirst Run           | 120s        | 145s      | +21% (slower)\nCached Run          | 120s        | 15s       | -87% (faster)\nVerification Time   | 0s          | 5s        | +5s\nTotal Security      | Low         | High      | Improved\n</code></pre>"},{"location":"interoperability/#82_optimization","title":"8.2 Optimization","text":"<pre><code># Optimize ATTEST performance for existing workflows\nattest optimize --baseline traditional-build.sh\nattest tune --target-performance 90% --max-verification-time 10s\n</code></pre>"},{"location":"interoperability/#9_data_migration","title":"9. Data Migration","text":""},{"location":"interoperability/#91_artifact_migration","title":"9.1 Artifact Migration","text":"<pre><code># Migrate existing artifacts to ATTEST format\nattest migrate artifacts \\\n  --from ./build-artifacts/ \\\n  --format auto-detect \\\n  --generate-receipts\n\n# Import CI/CD history\nattest import history \\\n  --from jenkins \\\n  --builds-url $JENKINS_URL/job/myproject/ \\\n  --credentials $JENKINS_CREDS\n</code></pre>"},{"location":"interoperability/#92_configuration_migration","title":"9.2 Configuration Migration","text":"<pre><code># Convert existing CI configuration\nattest convert ci-config \\\n  --from .github/workflows/ci.yml \\\n  --to attest.yaml \\\n  --preserve-steps\n\n# Migrate environment variables\nattest convert env-vars \\\n  --from docker-compose.yml \\\n  --to .attest/config.yaml\n</code></pre>"},{"location":"interoperability/#10_monitoring_integration","title":"10. Monitoring Integration","text":""},{"location":"interoperability/#101_metrics_export","title":"10.1 Metrics Export","text":"<pre><code># Export ATTEST metrics to existing monitoring\nmonitoring:\n  exports:\n    - type: \"prometheus\"\n      endpoint: \"http://prometheus:9090\"\n      namespace: \"attest\"\n\n    - type: \"datadog\"\n      api_key: \"${DATADOG_API_KEY}\"\n      tags: [\"env:production\", \"team:platform\"]\n\n    - type: \"grafana\"\n      dashboard_id: \"attest-overview\"\n      datasource: \"prometheus\"\n</code></pre>"},{"location":"interoperability/#102_alert_integration","title":"10.2 Alert Integration","text":"<pre><code># Integrate with existing alerting\nalerts:\n  channels:\n    - type: \"slack\"\n      webhook: \"${SLACK_WEBHOOK}\"\n      channel: \"#platform-alerts\"\n\n    - type: \"pagerduty\"\n      service_key: \"${PAGERDUTY_KEY}\"\n      severity: \"critical\"\n\n  rules:\n    - name: \"verification_failure\"\n      condition: \"attest_verification_failed &gt; 0\"\n      action: \"page\"\n</code></pre>"},{"location":"interoperability/#11_best_practices","title":"11. Best Practices","text":""},{"location":"interoperability/#111_integration_guidelines","title":"11.1 Integration Guidelines","text":"<ol> <li>Start with non-critical workloads for initial testing</li> <li>Maintain parallel systems during transition</li> <li>Monitor performance impacts and optimize accordingly</li> <li>Train teams on ATTEST concepts and workflows</li> <li>Establish rollback procedures for migration issues</li> </ol>"},{"location":"interoperability/#112_security_considerations","title":"11.2 Security Considerations","text":"<ol> <li>Protect signing keys during migration</li> <li>Maintain audit trails for all changes</li> <li>Validate integrations don't bypass security controls</li> <li>Update access controls for new workflows</li> <li>Regular security reviews of hybrid configurations</li> </ol>"},{"location":"interoperability/#113_performance_optimization","title":"11.3 Performance Optimization","text":"<ol> <li>Use caching effectively to minimize performance impact</li> <li>Optimize verification processes for critical paths</li> <li>Implement proper monitoring to detect performance regressions</li> <li>Consider infrastructure scaling for increased compute needs</li> <li>Regular performance testing of integrated workflows</li> </ol> <p>ATTEST's interoperability features ensure smooth integration with existing CI/CD infrastructure while providing enhanced security and verification capabilities.</p>"},{"location":"migration/","title":"Migration Guide","text":""},{"location":"migration/#1_overview","title":"1. Overview","text":"<p>This guide provides step-by-step instructions for migrating existing CI/CD pipelines to ATTEST, including strategies for different scenarios and risk mitigation approaches.</p>"},{"location":"migration/#2_migration_strategies","title":"2. Migration Strategies","text":""},{"location":"migration/#21_gradual_migration_recommended","title":"2.1 Gradual Migration (Recommended)","text":"<p>The safest approach is to migrate incrementally:</p> <pre><code># Phase 1: Add ATTEST alongside existing CI\nattest init --coexist\ngit add attest.yaml .attest/\ngit commit -m \"Add ATTEST configuration\"\n\n# Phase 2: Parallel execution\nattest migrate --parallel-mode\n</code></pre>"},{"location":"migration/#22_big_bang_migration","title":"2.2 Big Bang Migration","text":"<p>For smaller projects or when tight control is needed:</p> <pre><code># Complete migration in one step\nattest migrate --complete --backup-existing\n</code></pre>"},{"location":"migration/#23_hybrid_approach","title":"2.3 Hybrid Approach","text":"<p>Keep both systems running for different environments:</p> <pre><code># Different strategies per environment\nenvironments:\n  development:\n    migration_strategy: \"traditional\"\n  staging:\n    migration_strategy: \"parallel\"\n  production:\n    migration_strategy: \"attest_only\"\n</code></pre>"},{"location":"migration/#3_pre-migration_assessment","title":"3. Pre-Migration Assessment","text":""},{"location":"migration/#31_current_state_analysis","title":"3.1 Current State Analysis","text":"<pre><code># Analyze existing CI/CD setup\nattest analyze ci-config --input .github/workflows/\nattest analyze dependencies --scan-all\nattest analyze security-posture --compliance-check\n\n# Generated report:\nMigration Readiness Report\n==========================\nCurrent CI System: GitHub Actions\nComplexity Score: Medium (7/10)\nSecurity Gaps: 3 issues found\nEstimated Migration Time: 2-3 weeks\nRisk Level: Low\n</code></pre>"},{"location":"migration/#32_compatibility_check","title":"3.2 Compatibility Check","text":"<pre><code># Check tool compatibility\nattest compat check --tools npm,docker,kubectl\nattest compat check --platforms github-actions,gitlab-ci\n\n# Results:\nTool Compatibility:\n- npm: Fully Compatible\n- docker: Compatible (minor config needed)\n- kubectl: Compatible\n- maven: Requires plugin update\n</code></pre>"},{"location":"migration/#4_migration_planning","title":"4. Migration Planning","text":""},{"location":"migration/#41_migration_plan_template","title":"4.1 Migration Plan Template","text":"<pre><code># migration-plan.yaml\nmigration:\n  timeline: \"4 weeks\"\n  phases:\n    - name: \"Preparation\"\n      duration: \"1 week\"\n      tasks:\n        - \"Team training\"\n        - \"Environment setup\"\n        - \"Backup current system\"\n\n    - name: \"Pilot Migration\"\n      duration: \"1 week\"\n      scope: \"Non-critical workloads\"\n      rollback_plan: \"Immediate revert\"\n\n    - name: \"Staged Rollout\"\n      duration: \"1 week\"\n      scope: \"Development and staging\"\n\n    - name: \"Production Migration\"\n      duration: \"1 week\"\n      scope: \"Production workloads\"\n\n  success_criteria:\n    - \"Build time improvement &gt;= 20%\"\n    - \"Zero security regressions\"\n    - \"Team adoption &gt;= 80%\"\n\n  rollback_triggers:\n    - \"Build failure rate &gt; 5%\"\n    - \"Performance degradation &gt; 50%\"\n    - \"Critical security issues\"\n</code></pre>"},{"location":"migration/#5_step-by-step_migration","title":"5. Step-by-Step Migration","text":""},{"location":"migration/#51_step_1_environment_preparation","title":"5.1 Step 1: Environment Preparation","text":"<pre><code># Install ATTEST\ncurl -sSL https://install.attest.continuu.ms | bash\nattest version\n\n# Initialize workspace\ncd your-project/\nattest init\n\n# Configure global settings\nattest config set cache.enabled true\nattest config set verification.strict_mode false  # Initially\n</code></pre>"},{"location":"migration/#52_step_2_configuration_migration","title":"5.2 Step 2: Configuration Migration","text":"<pre><code># Convert existing CI configuration\nattest convert --from .github/workflows/ci.yml --to attest.yaml\n\n# Review generated configuration\nattest config validate\nattest config show --format yaml\n</code></pre>"},{"location":"migration/#53_step_3_parallel_execution_setup","title":"5.3 Step 3: Parallel Execution Setup","text":"<pre><code># .github/workflows/hybrid.yml\nname: Hybrid CI/CD\non: [push, pull_request]\n\njobs:\n  traditional-build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Traditional Build\n        run: |\n          npm install\n          npm test\n          npm run build\n\n  attest-build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ATTEST Build\n        run: |\n          attest run --sign\n        continue-on-error: true  # Don't fail initially\n\n  compare-results:\n    needs: [traditional-build, attest-build]\n    runs-on: ubuntu-latest\n    steps:\n      - name: Compare Outputs\n        run: |\n          attest compare-builds \\\n            --traditional-output ./dist-traditional/ \\\n            --attest-output ./dist-attest/ \\\n            --report comparison-report.html\n</code></pre>"},{"location":"migration/#54_step_4_validation_and_testing","title":"5.4 Step 4: Validation and Testing","text":"<pre><code># Run validation tests\nattest test migration-plan.yaml\nattest benchmark --compare-with-baseline\n\n# Validate artifacts\nattest verify receipts/*.yaml --strict\nattest validate artifacts --against-baseline\n</code></pre>"},{"location":"migration/#55_step_5_progressive_rollout","title":"5.5 Step 5: Progressive Rollout","text":"<pre><code># Enable ATTEST for specific branches\nattest migrate enable --branches feature/*,develop\n\n# Monitor performance\nattest monitor --duration 7d --alerts-to slack://webhook\n\n# Gradual expansion\nattest migrate expand --to-branches main --confidence-threshold 95%\n</code></pre>"},{"location":"migration/#6_platform-specific_migration","title":"6. Platform-Specific Migration","text":""},{"location":"migration/#61_github_actions_migration","title":"6.1 GitHub Actions Migration","text":"<pre><code># Convert GitHub Actions workflow\nattest convert github-actions \\\n  --input .github/workflows/ \\\n  --output attest.yaml \\\n  --preserve-secrets\n\n# Generated migration summary:\nMigration Summary:\n- 12 jobs converted\n- 3 custom actions require manual review\n- 2 marketplace actions need alternatives\n- Estimated 15% performance improvement\n</code></pre>"},{"location":"migration/#62_gitlab_ci_migration","title":"6.2 GitLab CI Migration","text":"<pre><code># Convert GitLab CI configuration\nattest convert gitlab-ci \\\n  --input .gitlab-ci.yml \\\n  --output attest.yaml \\\n  --preserve-variables\n\n# Handle GitLab-specific features\nattest migrate gitlab-features \\\n  --artifacts .gitlab-ci.yml \\\n  --cache-config\n</code></pre>"},{"location":"migration/#63_jenkins_migration","title":"6.3 Jenkins Migration","text":"<pre><code># Convert Jenkins pipeline\nattest convert jenkins \\\n  --input Jenkinsfile \\\n  --output attest.yaml \\\n  --preserve-node-labels\n\n# Migrate Jenkins plugins\nattest migrate jenkins-plugins \\\n  --list-alternatives \\\n  --suggest-replacements\n</code></pre>"},{"location":"migration/#7_data_migration","title":"7. Data Migration","text":""},{"location":"migration/#71_build_history_migration","title":"7.1 Build History Migration","text":"<pre><code># Import historical build data\nattest import build-history \\\n  --from jenkins \\\n  --url $JENKINS_URL \\\n  --credentials jenkins-creds.json \\\n  --projects myapp,mylib\n\n# Import artifacts\nattest import artifacts \\\n  --from s3://old-artifacts-bucket/ \\\n  --generate-receipts \\\n  --verify-integrity\n</code></pre>"},{"location":"migration/#72_configuration_migration","title":"7.2 Configuration Migration","text":"<pre><code># Migrate environment variables\nattest import env-vars \\\n  --from .env.example \\\n  --to .attest/config.yaml\n\n# Migrate secrets (requires manual review)\nattest import secrets \\\n  --from-vault vault.company.com \\\n  --mapping secrets-mapping.yaml\n</code></pre>"},{"location":"migration/#8_risk_mitigation","title":"8. Risk Mitigation","text":""},{"location":"migration/#81_rollback_procedures","title":"8.1 Rollback Procedures","text":"<pre><code># Prepare rollback plan\nattest rollback prepare \\\n  --backup-location s3://backup-bucket/ \\\n  --rollback-script rollback.sh\n\n# Quick rollback if needed\nattest rollback execute \\\n  --to-commit abc123 \\\n  --preserve-artifacts\n</code></pre>"},{"location":"migration/#82_monitoring_during_migration","title":"8.2 Monitoring During Migration","text":"<pre><code># migration-monitoring.yaml\nmonitoring:\n  alerts:\n    - name: \"migration-failure-rate\"\n      condition: \"failure_rate &gt; 5%\"\n      action: \"pause-migration\"\n\n    - name: \"performance-degradation\"\n      condition: \"build_time_increase &gt; 50%\"\n      action: \"investigate\"\n\n  dashboards:\n    - \"migration-progress\"\n    - \"performance-comparison\"\n    - \"error-tracking\"\n</code></pre>"},{"location":"migration/#83_safety_measures","title":"8.3 Safety Measures","text":"<pre><code># Enable safety checks\nattest migrate --safety-checks \\\n  --max-failure-rate 5% \\\n  --rollback-on-critical \\\n  --require-manual-approval\n\n# Canary deployment\nattest migrate canary \\\n  --percentage 10% \\\n  --duration 24h \\\n  --success-criteria migration-criteria.yaml\n</code></pre>"},{"location":"migration/#9_common_migration_scenarios","title":"9. Common Migration Scenarios","text":""},{"location":"migration/#91_monorepo_migration","title":"9.1 Monorepo Migration","text":"<pre><code># Migrate large monorepo\nattest migrate monorepo \\\n  --discovery-mode auto \\\n  --parallel-workspaces \\\n  --shared-cache\n\n# Handle workspace dependencies\nattest config set workspace.dependency_resolution smart\n</code></pre>"},{"location":"migration/#92_multi-platform_builds","title":"9.2 Multi-Platform Builds","text":"<pre><code># Migrate cross-platform builds\nattest migrate platforms \\\n  --from docker-compose.yml \\\n  --targets linux/amd64,linux/arm64,darwin/amd64\n\n# Configure platform-specific steps\nattest config set platforms.build_matrix auto\n</code></pre>"},{"location":"migration/#93_compliance-heavy_environments","title":"9.3 Compliance-Heavy Environments","text":"<pre><code># Migrate regulated environments\nattest migrate compliance \\\n  --framework SOX,HIPAA,PCI-DSS \\\n  --preserve-audit-trails \\\n  --require-signatures\n\n# Enable compliance features\nattest config set compliance.strict_mode true\nattest config set verification.require_all_steps true\n</code></pre>"},{"location":"migration/#10_post-migration_tasks","title":"10. Post-Migration Tasks","text":""},{"location":"migration/#101_performance_optimization","title":"10.1 Performance Optimization","text":"<pre><code># Optimize after migration\nattest optimize --profile production\nattest tune cache --target-hit-rate 85%\nattest tune performance --baseline pre-migration-metrics.json\n</code></pre>"},{"location":"migration/#102_team_training","title":"10.2 Team Training","text":"<pre><code># Generate training materials\nattest docs generate-training \\\n  --level beginner,intermediate \\\n  --format presentation,hands-on\n\n# Team onboarding\nattest onboard team \\\n  --interactive \\\n  --custom-examples your-project/\n</code></pre>"},{"location":"migration/#103_success_validation","title":"10.3 Success Validation","text":"<pre><code># Validate migration success\nattest validate migration \\\n  --success-criteria migration-plan.yaml \\\n  --generate-report\n\n# Migration Success Report:\n# - Performance: 25% improvement\n# - Security: 0 regressions\n# - Team Adoption: 92%\n# - Cost Savings: $2,400/month\n</code></pre>"},{"location":"migration/#11_troubleshooting_migration_issues","title":"11. Troubleshooting Migration Issues","text":""},{"location":"migration/#111_common_problems","title":"11.1 Common Problems","text":"<pre><code># Build failures after migration\nattest debug build-failure \\\n  --compare-with-baseline \\\n  --suggest-fixes\n\n# Performance regressions\nattest debug performance \\\n  --profile current \\\n  --compare-with pre-migration.profile\n\n# Configuration issues\nattest debug config \\\n  --validate-all \\\n  --suggest-optimizations\n</code></pre>"},{"location":"migration/#112_support_resources","title":"11.2 Support Resources","text":"<pre><code># Get migration help\nattest help migration\nattest community --topic migration\nattest support --priority high --issue \"migration-blocker\"\n\n# Professional services\nattest migrate --with-support \\\n  --contact contact@alien6.com\n</code></pre>"},{"location":"migration/#12_best_practices","title":"12. Best Practices","text":""},{"location":"migration/#121_planning","title":"12.1 Planning","text":"<ol> <li>Start with assessment - Understand current state fully</li> <li>Plan incrementally - Avoid big-bang migrations</li> <li>Test thoroughly - Validate each phase</li> <li>Monitor continuously - Watch for regressions</li> <li>Prepare rollbacks - Always have an escape plan</li> </ol>"},{"location":"migration/#122_execution","title":"12.2 Execution","text":"<ol> <li>Begin with non-critical workloads</li> <li>Maintain parallel systems during transition</li> <li>Involve the team early and often</li> <li>Document everything for future reference</li> <li>Celebrate milestones to maintain momentum</li> </ol>"},{"location":"migration/#123_long-term_success","title":"12.3 Long-term Success","text":"<ol> <li>Optimize post-migration for best performance</li> <li>Train teams on ATTEST best practices</li> <li>Regular reviews of migration outcomes</li> <li>Continuous improvement of processes</li> <li>Share learnings with the broader team</li> </ol>"},{"location":"migration/#13_migration_timeline_template","title":"13. Migration Timeline Template","text":""},{"location":"migration/#131_week_1_preparation","title":"13.1 Week 1: Preparation","text":"<ul> <li>Team training sessions</li> <li>Environment setup</li> <li>Current state analysis</li> <li>Migration plan finalization</li> </ul>"},{"location":"migration/#132_week_2_pilot_migration","title":"13.2 Week 2: Pilot Migration","text":"<ul> <li>Non-critical workload migration</li> <li>Parallel execution setup</li> <li>Initial performance testing</li> <li>Issue identification and resolution</li> </ul>"},{"location":"migration/#133_week_3_staged_rollout","title":"13.3 Week 3: Staged Rollout","text":"<ul> <li>Development environment migration</li> <li>Staging environment migration</li> <li>Performance optimization</li> <li>Team feedback incorporation</li> </ul>"},{"location":"migration/#134_week_4_production_migration","title":"13.4 Week 4: Production Migration","text":"<ul> <li>Production workload migration</li> <li>Final validation</li> <li>Performance monitoring</li> <li>Documentation updates</li> </ul> <p>This migration guide provides a comprehensive approach to safely transitioning to ATTEST while minimizing risks and maximizing benefits.</p>"},{"location":"monitoring/","title":"Monitoring & Observability","text":""},{"location":"monitoring/#1_overview","title":"1. Overview","text":"<p>ATTEST provides comprehensive monitoring and observability features through metrics, logging, and distributed tracing to ensure pipeline health and performance.</p>"},{"location":"monitoring/#2_metrics","title":"2. Metrics","text":""},{"location":"monitoring/#21_prometheus_integration","title":"2.1 Prometheus Integration","text":"<pre><code># Enable Prometheus metrics\nmonitoring:\n  prometheus:\n    enabled: true\n    endpoint: \":9090\"\n    path: \"/metrics\"\n    namespace: \"attest\"\n</code></pre>"},{"location":"monitoring/#22_core_metrics","title":"2.2 Core Metrics","text":"<pre><code># Pipeline metrics\nattest_pipeline_executions_total{status=\"success|failure\"}\nattest_pipeline_duration_seconds{pipeline=\"name\"}\nattest_step_duration_seconds{step=\"name\",status=\"success|failure\"}\n\n# Cache metrics  \nattest_cache_hits_total{backend=\"local|s3|redis\"}\nattest_cache_misses_total{backend=\"local|s3|redis\"}\nattest_cache_size_bytes{backend=\"local|s3|redis\"}\n\n# Verification metrics\nattest_verifications_total{type=\"signature|receipt|policy\"}\nattest_verification_failures_total{reason=\"invalid_signature|expired|policy_violation\"}\nattest_verification_duration_seconds{type=\"signature|receipt|policy\"}\n</code></pre>"},{"location":"monitoring/#3_logging","title":"3. Logging","text":""},{"location":"monitoring/#31_structured_logging","title":"3.1 Structured Logging","text":"<pre><code>{\n  \"timestamp\": \"2024-12-01T14:30:52Z\",\n  \"level\": \"INFO\",\n  \"target\": \"attest::pipeline\",\n  \"message\": \"Pipeline execution completed\",\n  \"fields\": {\n    \"pipeline\": \"build-test-deploy\",\n    \"duration_ms\": 45230,\n    \"steps_total\": 5,\n    \"steps_success\": 5,\n    \"cache_hit_rate\": 0.8\n  }\n}\n</code></pre>"},{"location":"monitoring/#32_log_levels","title":"3.2 Log Levels","text":"<pre><code># Configure log levels\nexport ATTEST_LOG_LEVEL=debug\nattest run --log-level info\nattest config set log_level warn\n</code></pre>"},{"location":"monitoring/#4_distributed_tracing","title":"4. Distributed Tracing","text":""},{"location":"monitoring/#41_opentelemetry_integration","title":"4.1 OpenTelemetry Integration","text":"<pre><code># Enable distributed tracing\ntracing:\n  enabled: true\n  service_name: \"attest-pipeline\"\n  exporter:\n    type: \"jaeger\"\n    endpoint: \"http://jaeger:14268/api/traces\"\n\n  # Trace sampling\n  sampling:\n    rate: 0.1  # Sample 10% of traces\n    always_sample_errors: true\n</code></pre>"},{"location":"monitoring/#42_trace_context","title":"4.2 Trace Context","text":"<pre><code># Pipeline execution with tracing\nTRACEPARENT=00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01 \\\nattest run --trace\n</code></pre>"},{"location":"monitoring/#5_dashboards","title":"5. Dashboards","text":""},{"location":"monitoring/#51_grafana_dashboard","title":"5.1 Grafana Dashboard","text":"<pre><code>{\n  \"dashboard\": {\n    \"title\": \"ATTEST Pipeline Monitoring\",\n    \"panels\": [\n      {\n        \"title\": \"Pipeline Success Rate\",\n        \"type\": \"stat\",\n        \"targets\": [\n          {\n            \"expr\": \"rate(attest_pipeline_executions_total{status=\\\"success\\\"}[5m]) / rate(attest_pipeline_executions_total[5m])\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Cache Hit Rate\",\n        \"type\": \"stat\", \n        \"targets\": [\n          {\n            \"expr\": \"rate(attest_cache_hits_total[5m]) / (rate(attest_cache_hits_total[5m]) + rate(attest_cache_misses_total[5m]))\"\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"monitoring/#6_alerting","title":"6. Alerting","text":""},{"location":"monitoring/#61_prometheus_alerts","title":"6.1 Prometheus Alerts","text":"<pre><code>groups:\n- name: attest-pipeline\n  rules:\n  - alert: PipelineFailureRate\n    expr: rate(attest_pipeline_executions_total{status=\"failure\"}[5m]) &gt; 0.1\n    for: 2m\n    annotations:\n      summary: \"High pipeline failure rate detected\"\n\n  - alert: CachePerformanceDegraded\n    expr: rate(attest_cache_hits_total[5m]) / (rate(attest_cache_hits_total[5m]) + rate(attest_cache_misses_total[5m])) &lt; 0.5\n    for: 5m\n    annotations:\n      summary: \"Cache hit rate below threshold\"\n</code></pre>"},{"location":"monitoring/#7_health_checks","title":"7. Health Checks","text":""},{"location":"monitoring/#71_endpoint_configuration","title":"7.1 Endpoint Configuration","text":"<pre><code># Health check endpoints\nhealth:\n  enabled: true\n  endpoints:\n    liveness: \"/health/live\"\n    readiness: \"/health/ready\"\n    metrics: \"/metrics\"\n</code></pre>"},{"location":"monitoring/#72_custom_health_checks","title":"7.2 Custom Health Checks","text":"<pre><code>// Custom health check\nimpl HealthCheck for CacheHealthCheck {\n    async fn check(&amp;self) -&gt; HealthStatus {\n        match self.cache.ping().await {\n            Ok(_) =&gt; HealthStatus::Healthy,\n            Err(e) =&gt; HealthStatus::Unhealthy(format!(\"Cache unavailable: {}\", e))\n        }\n    }\n}\n</code></pre>"},{"location":"monitoring/#8_performance_monitoring","title":"8. Performance Monitoring","text":""},{"location":"monitoring/#81_profiling","title":"8.1 Profiling","text":"<pre><code># CPU profiling\nattest run --profile cpu --profile-output cpu.prof\n\n# Memory profiling  \nattest run --profile memory --profile-output memory.prof\n\n# Analyze profiles\nattest analyze cpu.prof --format html --output cpu-analysis.html\n</code></pre>"},{"location":"monitoring/#82_benchmarking","title":"8.2 Benchmarking","text":"<pre><code># Benchmark pipeline performance\nattest benchmark pipeline --iterations 10 --output benchmark.json\n\n# Compare performance across versions\nattest benchmark compare \\\n  --baseline v0.1.0 \\\n  --current v0.2.0 \\\n  --format table\n</code></pre> <p>This monitoring system provides comprehensive visibility into ATTEST pipeline operations and performance.</p>"},{"location":"overview/","title":"Overview","text":""},{"location":"overview/#1_introduction","title":"1. Introduction","text":"<p>Continuum ATTEST is a next-generation CI/CD platform that provides cryptographic attestation for every step of your build and deployment process. Unlike traditional CI/CD systems, Continuum ATTEST creates tamper-proof records of what actually happened during your pipeline execution.</p> <p>ATTEST stands for Authenticated, Traceable, Transparent, Executable, Secure, Trusted pipelines. It combines modern CI/CD capabilities with advanced cryptographic techniques to ensure:</p> <ul> <li>Authenticity: Every build step is cryptographically signed</li> <li>Integrity: Outputs are content-addressed and tamper-evident  </li> <li>Provenance: Complete audit trail from source to deployment</li> <li>Reproducibility: Bit-for-bit identical builds guaranteed</li> <li>Compliance: Built-in support for regulatory frameworks</li> </ul>"},{"location":"overview/#2_key_differentiators","title":"2. Key Differentiators","text":""},{"location":"overview/#21_cryptographic_attestation","title":"2.1 Cryptographic Attestation","text":"<p>Every pipeline step is signed with Ed25519 signatures, creating unforgeable proof of execution. This enables:</p> <ul> <li>Supply chain security</li> <li>Non-repudiation of builds</li> <li>Tamper detection</li> <li>Compliance auditing</li> </ul>"},{"location":"overview/#22_content-addressed_caching","title":"2.2 Content-Addressed Caching","text":"<p>Using Blake3 hashing, ATTEST provides:</p> <ul> <li>Deterministic cache keys</li> <li>Automatic deduplication</li> <li>Secure cache verification</li> <li>Dramatic performance improvements</li> </ul>"},{"location":"overview/#23_gitops_native","title":"2.3 GitOps Native","text":"<p>Built-in Kubernetes integration with:</p> <ul> <li>Custom Resource Definitions (CRDs)</li> <li>Automated verification before deployment</li> <li>Policy enforcement at deploy time</li> <li>Multi-cluster consistency</li> </ul>"},{"location":"overview/#24_policy_as_code","title":"2.4 Policy as Code","text":"<p>Integrated OPA/Gatekeeper support for:</p> <ul> <li>Compliance enforcement</li> <li>Security policies</li> <li>Governance rules</li> <li>Audit requirements</li> </ul>"},{"location":"overview/#3_architecture","title":"3. Architecture","text":"<pre><code>graph TB\n    A[Source Code] --&gt; B[ATTEST Pipeline]\n    B --&gt; C[Signed Receipt]\n    C --&gt; D[Content-Addressed Cache]\n    C --&gt; E[Policy Verification]\n    E --&gt; F[GitOps Controller]\n    F --&gt; G[Kubernetes Deployment]\n\n    H[OPA/Gatekeeper] --&gt; E\n    I[Ed25519 Keys] --&gt; B\n    J[Blake3 Hashing] --&gt; D</code></pre>"},{"location":"overview/#4_use_cases","title":"4. Use Cases","text":""},{"location":"overview/#41_software_supply_chain_security","title":"4.1 Software Supply Chain Security","text":"<ul> <li>SLSA compliance for supply chain integrity</li> <li>In-toto compatibility for software bill of materials</li> <li>Zero-trust verification of build artifacts</li> <li>Provenance tracking across the entire pipeline</li> </ul>"},{"location":"overview/#42_regulatory_compliance","title":"4.2 Regulatory Compliance","text":"<ul> <li>SOX compliance for financial services</li> <li>HIPAA compliance for healthcare</li> <li>PCI-DSS compliance for payment processing</li> <li>ISO 27001 for information security</li> </ul>"},{"location":"overview/#43_enterprise_devops","title":"4.3 Enterprise DevOps","text":"<ul> <li>Multi-team governance with policy enforcement</li> <li>Audit-ready pipelines with complete traceability</li> <li>Performance optimization through intelligent caching</li> <li>GitOps workflows with verification</li> </ul>"},{"location":"overview/#44_open_source_projects","title":"4.4 Open Source Projects","text":"<ul> <li>Reproducible builds for transparency</li> <li>Contributor verification with signed commits</li> <li>Release integrity with cryptographic proof</li> <li>Community trust through verifiable processes</li> </ul>"},{"location":"overview/#5_comparison_with_traditional_cicd","title":"5. Comparison with Traditional CI/CD","text":"Feature Traditional CI/CD ATTEST Build Verification Logs only Cryptographic signatures Cache Strategy Time-based Content-addressed Supply Chain Security Manual Built-in attestation Compliance External tools Native support Reproducibility Best effort Guaranteed Audit Trail Limited Complete provenance"},{"location":"overview/#6_getting_started","title":"6. Getting Started","text":"<ol> <li>Install Continuum ATTEST on your system</li> <li>Initialize your first project with <code>attest init</code></li> <li>Configure your pipeline in <code>attest.yaml</code></li> <li>Run with verification using <code>attest run --verify --sign</code></li> </ol>"},{"location":"overview/#7_community_and_support","title":"7. Community and Support","text":"<ul> <li>Documentation: Comprehensive guides and examples</li> <li>GitHub Issues: Bug reports and feature requests</li> <li>Community Forum: Questions and discussions</li> <li>Commercial Support: Enterprise licensing and support</li> </ul> <p>Continuum ATTEST represents the future of secure, verifiable CI/CD - where every build is provable, every deployment is traceable, and every artifact is authenticated.</p>"},{"location":"pipeline-configuration/","title":"Pipeline Configuration","text":""},{"location":"pipeline-configuration/#1_complete_pipeline_reference","title":"1. Complete Pipeline Reference","text":"<p>This guide covers everything you need to know about configuring ATTEST pipelines, from basic setups to advanced enterprise configurations.</p>"},{"location":"pipeline-configuration/#2_basic_structure","title":"2. Basic Structure","text":""},{"location":"pipeline-configuration/#21_minimal_pipeline","title":"2.1 Minimal Pipeline","text":"<pre><code>version: \"0.1\"\nname: \"basic-pipeline\"\n\nsteps:\n  build:\n    run: \"make build\"\n</code></pre>"},{"location":"pipeline-configuration/#22_complete_pipeline_template","title":"2.2 Complete Pipeline Template","text":"<pre><code>version: \"0.1\"                    # Required: Schema version\nname: \"comprehensive-pipeline\"    # Optional: Human-readable name\ndescription: \"Full-featured pipeline example\"\n\n# Global environment variables\nenv:\n  NODE_ENV: production\n  RUST_BACKTRACE: 1\n  CUSTOM_VAR: \"global-value\"\n\n# Global attestation configuration\nattestation:\n  sign_all_steps: true           # Sign every step\n  verify_dependencies: true      # Verify input integrity\n  require_reproducible: false    # Global reproducibility requirement\n\n# Pipeline steps\nsteps:\n  step_name:\n    # REQUIRED: Command to execute\n    run: \"npm run build\"\n\n    # OPTIONAL: Files this step reads\n    inputs: [\"src/\", \"package.json\"]\n\n    # OPTIONAL: Files this step produces\n    outputs: [\"dist/\", \"build.log\"]\n\n    # OPTIONAL: Steps that must complete first\n    needs: [\"lint\", \"test\"]\n\n    # OPTIONAL: Step-specific environment\n    env:\n      NODE_ENV: development\n      STEP_SPECIFIC: \"value\"\n\n    # OPTIONAL: Working directory\n    working_dir: \"frontend/\"\n\n    # OPTIONAL: Docker image for execution\n    image: \"node:18-alpine\"\n\n    # OPTIONAL: Enable/disable caching\n    cache: true\n\n    # OPTIONAL: Timeout in seconds\n    timeout_secs: 300\n\n    # OPTIONAL: Isolation level\n    isolation: container\n\n    # OPTIONAL: Step-specific attestation\n    attestation:\n      type: \"build\"\n      reproducible: true\n      generate_slsa: true\n</code></pre>"},{"location":"pipeline-configuration/#3_step_configuration","title":"3. Step Configuration","text":""},{"location":"pipeline-configuration/#31_command_execution","title":"3.1 Command Execution","text":""},{"location":"pipeline-configuration/#simple_commands","title":"Simple Commands","text":"<pre><code>steps:\n  build:\n    run: \"npm run build\"\n\n  test:\n    run: \"cargo test --all\"\n\n  deploy:\n    run: \"./scripts/deploy.sh production\"\n</code></pre>"},{"location":"pipeline-configuration/#multi-line_commands","title":"Multi-line Commands","text":"<pre><code>steps:\n  complex_build:\n    run: |\n      echo \"Starting build process...\"\n      npm ci\n      npm run lint\n      npm run test\n      npm run build\n      echo \"Build completed successfully\"\n\n  conditional_step:\n    run: |\n      if [ \"$NODE_ENV\" = \"production\" ]; then\n        npm run build:prod\n      else\n        npm run build:dev\n      fi\n</code></pre>"},{"location":"pipeline-configuration/#shell-specific_commands","title":"Shell-specific Commands","text":"<pre><code>steps:\n  bash_script:\n    run: |\n      #!/bin/bash\n      set -euo pipefail\n      source .env\n      ./complex-script.sh\n\n  powershell_script:\n    run: |\n      # PowerShell script\n      $ErrorActionPreference = \"Stop\"\n      Write-Host \"Building application...\"\n      npm run build\n</code></pre>"},{"location":"pipeline-configuration/#32_input_and_output_management","title":"3.2 Input and Output Management","text":""},{"location":"pipeline-configuration/#file_patterns","title":"File Patterns","text":"<pre><code>steps:\n  comprehensive_io:\n    inputs:\n      - \"src/**/*.js\"           # Glob patterns\n      - \"package.json\"          # Specific files\n      - \"config/\"               # Directories\n      - \"assets/images/*.png\"   # Nested patterns\n      - \"docs/*.md\"             # Documentation\n    outputs:\n      - \"dist/\"                 # Build artifacts\n      - \"coverage/\"             # Test coverage\n      - \"logs/*.log\"            # Log files\n      - \"reports/junit.xml\"     # Test reports\n</code></pre>"},{"location":"pipeline-configuration/#optional_inputs","title":"Optional Inputs","text":"<pre><code>steps:\n  flexible_step:\n    inputs:\n      - \"src/\"                  # Required\n      - \"config.json?\"          # Optional (? suffix)\n      - \"local-overrides.yaml?\" # Optional configuration\n</code></pre>"},{"location":"pipeline-configuration/#dynamic_outputs","title":"Dynamic Outputs","text":"<pre><code>steps:\n  dynamic_build:\n    run: |\n      VERSION=$(cat package.json | jq -r .version)\n      npm run build\n      tar -czf \"app-${VERSION}.tar.gz\" dist/\n    outputs:\n      - \"dist/\"\n      - \"app-*.tar.gz\"          # Pattern matches dynamic names\n</code></pre>"},{"location":"pipeline-configuration/#33_dependencies_and_execution_order","title":"3.3 Dependencies and Execution Order","text":""},{"location":"pipeline-configuration/#linear_dependencies","title":"Linear Dependencies","text":"<pre><code>steps:\n  install:\n    run: \"npm ci\"\n\n  lint:\n    run: \"npm run lint\"\n    needs: [\"install\"]\n\n  test:\n    run: \"npm test\"\n    needs: [\"install\"]\n\n  build:\n    run: \"npm run build\"\n    needs: [\"lint\", \"test\"]     # Waits for both\n</code></pre>"},{"location":"pipeline-configuration/#parallel_execution","title":"Parallel Execution","text":"<pre><code>steps:\n  # These run in parallel\n  frontend_build:\n    run: \"npm run build:frontend\"\n    inputs: [\"frontend/\"]\n    outputs: [\"dist/frontend/\"]\n\n  backend_build:\n    run: \"cargo build --release\"\n    inputs: [\"backend/\"]\n    outputs: [\"target/release/\"]\n\n  docs_build:\n    run: \"mdbook build\"\n    inputs: [\"docs/\"]\n    outputs: [\"book/\"]\n\n  # This waits for all builds\n  integration:\n    run: \"./scripts/integration-test.sh\"\n    needs: [\"frontend_build\", \"backend_build\", \"docs_build\"]\n</code></pre>"},{"location":"pipeline-configuration/#complex_dag","title":"Complex DAG","text":"<pre><code>steps:\n  # Level 1: Independent steps\n  lint_js:\n    run: \"eslint src/\"\n\n  lint_rust:\n    run: \"cargo clippy\"\n\n  unit_test_js:\n    run: \"npm test:unit\"\n\n  unit_test_rust:\n    run: \"cargo test\"\n\n  # Level 2: Language-specific builds\n  build_js:\n    run: \"npm run build\"\n    needs: [\"lint_js\", \"unit_test_js\"]\n\n  build_rust:\n    run: \"cargo build --release\"\n    needs: [\"lint_rust\", \"unit_test_rust\"]\n\n  # Level 3: Integration tests\n  integration_test:\n    run: \"./scripts/integration-test.sh\"\n    needs: [\"build_js\", \"build_rust\"]\n\n  # Level 4: Deployment\n  deploy:\n    run: \"./scripts/deploy.sh\"\n    needs: [\"integration_test\"]\n</code></pre>"},{"location":"pipeline-configuration/#4_environment_configuration","title":"4. Environment Configuration","text":""},{"location":"pipeline-configuration/#41_global_environment","title":"4.1 Global Environment","text":"<pre><code>env:\n  # Build configuration\n  NODE_ENV: production\n  RUST_BACKTRACE: 1\n  PYTHONPATH: \"/app/src\"\n\n  # Credentials (use secrets management)\n  API_URL: \"https://api.production.com\"\n  REGISTRY_URL: \"registry.company.com\"\n\n  # Tool configuration\n  CARGO_TERM_COLOR: always\n  NPM_CONFIG_CACHE: \".attest/cache/npm\"\n  PIP_CACHE_DIR: \".attest/cache/pip\"\n</code></pre>"},{"location":"pipeline-configuration/#42_step-specific_environment","title":"4.2 Step-specific Environment","text":"<pre><code>steps:\n  test:\n    run: \"npm test\"\n    env:\n      NODE_ENV: test            # Override global\n      CI: \"true\"                # Test-specific\n      COVERAGE: \"true\"          # Enable coverage\n\n  build:\n    run: \"npm run build\"\n    env:\n      NODE_ENV: production      # Production build\n      OPTIMIZE: \"true\"          # Enable optimizations\n      SOURCE_MAPS: \"false\"      # Disable source maps\n</code></pre>"},{"location":"pipeline-configuration/#43_dynamic_environment","title":"4.3 Dynamic Environment","text":"<pre><code>steps:\n  dynamic_env:\n    run: |\n      export VERSION=$(cat package.json | jq -r .version)\n      export BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)\n      npm run build\n    env:\n      # Static environment\n      NODE_ENV: production\n      # Dynamic variables set in script\n</code></pre>"},{"location":"pipeline-configuration/#5_container_integration","title":"5. Container Integration","text":""},{"location":"pipeline-configuration/#51_basic_container_usage","title":"5.1 Basic Container Usage","text":"<pre><code>steps:\n  build:\n    run: \"npm run build\"\n    image: \"node:18-alpine\"     # Official Node.js image\n    inputs: [\"package.json\", \"src/\"]\n    outputs: [\"dist/\"]\n</code></pre>"},{"location":"pipeline-configuration/#52_custom_container_configuration","title":"5.2 Custom Container Configuration","text":"<pre><code>steps:\n  advanced_container:\n    run: \"cargo build --release\"\n    image: \"rust:1.75-bullseye\"\n    container:\n      # Container-specific configuration\n      working_dir: \"/workspace\"\n      user: \"1000:1000\"         # Run as specific user\n      memory_limit: \"4GB\"       # Memory constraint\n      cpu_limit: \"2.0\"          # CPU constraint\n      networks:\n        - \"build-network\"       # Custom network\n      volumes:\n        - \"/cache:/cache:rw\"    # Additional volumes\n      environment:\n        CARGO_HOME: \"/cache/cargo\"\n</code></pre>"},{"location":"pipeline-configuration/#53_multi-stage_container_builds","title":"5.3 Multi-stage Container Builds","text":"<pre><code>steps:\n  prepare:\n    run: \"npm ci\"\n    image: \"node:18-alpine\"\n    outputs: [\"node_modules/\"]\n\n  build:\n    run: \"npm run build\"\n    image: \"node:18-alpine\"\n    needs: [\"prepare\"]\n    inputs: [\"node_modules/\", \"src/\"]\n    outputs: [\"dist/\"]\n\n  package:\n    run: |\n      FROM nginx:alpine\n      COPY dist/ /usr/share/nginx/html/\n    image: \"docker:dind\"        # Docker-in-Docker\n    needs: [\"build\"]\n    inputs: [\"dist/\"]\n    outputs: [\"app-image.tar\"]\n</code></pre>"},{"location":"pipeline-configuration/#6_performance_optimization","title":"6. Performance Optimization","text":""},{"location":"pipeline-configuration/#61_caching_strategies","title":"6.1 Caching Strategies","text":""},{"location":"pipeline-configuration/#enable_caching","title":"Enable Caching","text":"<pre><code>steps:\n  expensive_build:\n    run: \"cargo build --release\"\n    cache: true                 # Enable caching (default)\n    inputs: [\"src/\", \"Cargo.toml\", \"Cargo.lock\"]\n    outputs: [\"target/release/\"]\n</code></pre>"},{"location":"pipeline-configuration/#disable_caching","title":"Disable Caching","text":"<pre><code>steps:\n  always_run:\n    run: \"deploy.sh\"\n    cache: false               # Always execute\n\n  timestamp_dependent:\n    run: \"echo $(date) &gt; build-time.txt\"\n    cache: false               # Non-deterministic\n</code></pre>"},{"location":"pipeline-configuration/#cache_configuration","title":"Cache Configuration","text":"<pre><code># Global cache settings\ncache:\n  enabled: true\n  max_size: \"10GB\"\n  compression: true\n  retention_days: 30\n\nsteps:\n  cached_step:\n    run: \"expensive-operation\"\n    cache:\n      enabled: true\n      key_suffix: \"v2\"         # Cache versioning\n      max_age: \"7d\"            # Cache expiration\n</code></pre>"},{"location":"pipeline-configuration/#62_parallel_execution","title":"6.2 Parallel Execution","text":"<pre><code>steps:\n  # These run in parallel automatically\n  lint_frontend:\n    run: \"eslint frontend/\"\n    inputs: [\"frontend/\"]\n\n  lint_backend:\n    run: \"cargo clippy\"\n    inputs: [\"backend/\"]\n\n  lint_docs:\n    run: \"markdownlint docs/\"\n    inputs: [\"docs/\"]\n\n  # Explicit parallelization\n  test_matrix:\n    run: |\n      # Run multiple test suites in parallel\n      npm run test:unit &amp;\n      npm run test:integration &amp;\n      npm run test:e2e &amp;\n      wait  # Wait for all background jobs\n</code></pre>"},{"location":"pipeline-configuration/#63_resource_management","title":"6.3 Resource Management","text":"<pre><code>steps:\n  resource_intensive:\n    run: \"cargo build --release\"\n    timeout_secs: 1800         # 30 minutes max\n    container:\n      memory_limit: \"8GB\"      # Ensure enough memory\n      cpu_limit: \"4.0\"         # Use 4 CPU cores\n\n  memory_efficient:\n    run: \"npm run build\"\n    container:\n      memory_limit: \"1GB\"      # Limit memory usage\n    env:\n      NODE_OPTIONS: \"--max-old-space-size=768\"  # Node.js memory limit\n</code></pre>"},{"location":"pipeline-configuration/#7_security_configuration","title":"7. Security Configuration","text":""},{"location":"pipeline-configuration/#71_attestation_settings","title":"7.1 Attestation Settings","text":""},{"location":"pipeline-configuration/#global_attestation","title":"Global Attestation","text":"<pre><code>attestation:\n  sign_all_steps: true         # Sign every step\n  verify_dependencies: true    # Verify all inputs\n  require_reproducible: true   # Enforce reproducibility\n</code></pre>"},{"location":"pipeline-configuration/#step-specific_attestation","title":"Step-specific Attestation","text":"<pre><code>steps:\n  critical_build:\n    run: \"cargo build --release\"\n    attestation:\n      type: \"build\"            # Attestation type\n      reproducible: true       # Must be reproducible\n      generate_slsa: true      # Generate SLSA metadata\n      verify_chain: true       # Verify dependency chain\n\n  deployment:\n    run: \"kubectl apply -f k8s/\"\n    attestation:\n      type: \"deploy\"\n      verify_chain: true       # Verify entire build chain\n      require_signatures: true # All dependencies must be signed\n</code></pre>"},{"location":"pipeline-configuration/#72_isolation_levels","title":"7.2 Isolation Levels","text":"<pre><code>steps:\n  # Process isolation (default, fastest)\n  quick_test:\n    run: \"npm test\"\n    isolation: process\n\n  # Container isolation (good security/performance balance)\n  build:\n    run: \"cargo build\"\n    isolation: container\n    image: \"rust:1.75-alpine\"\n\n  # VM isolation (maximum security, slower)\n  security_scan:\n    run: \"security-scanner\"\n    isolation: vm\n    vm_image: \"ubuntu-22.04\"\n</code></pre>"},{"location":"pipeline-configuration/#73_secrets_management","title":"7.3 Secrets Management","text":"<pre><code>steps:\n  deploy:\n    run: |\n      # Use external secrets management\n      kubectl create secret generic app-secrets \\\n        --from-literal=api-key=\"$API_KEY\" \\\n        --from-literal=db-password=\"$DB_PASSWORD\"\n    env:\n      # Reference secrets (managed externally)\n      API_KEY: \"${VAULT_API_KEY}\"\n      DB_PASSWORD: \"${VAULT_DB_PASSWORD}\"\n</code></pre>"},{"location":"pipeline-configuration/#8_monitoring_and_observability","title":"8. Monitoring and Observability","text":""},{"location":"pipeline-configuration/#81_health_checks","title":"8.1 Health Checks","text":"<pre><code>steps:\n  web_service:\n    run: |\n      npm start &amp;\n      SERVER_PID=$!\n\n      # Wait for service to start\n      sleep 10\n\n      # Health check\n      curl -f http://localhost:3000/health\n\n      # Cleanup\n      kill $SERVER_PID\n</code></pre>"},{"location":"pipeline-configuration/#82_metrics_collection","title":"8.2 Metrics Collection","text":"<pre><code>steps:\n  instrumented_build:\n    run: |\n      # Collect build metrics\n      start_time=$(date +%s)\n\n      cargo build --release\n\n      end_time=$(date +%s)\n      duration=$((end_time - start_time))\n\n      # Report metrics\n      echo \"build_duration_seconds: $duration\" &gt;&gt; metrics.txt\n    outputs: [\"target/release/\", \"metrics.txt\"]\n</code></pre>"},{"location":"pipeline-configuration/#83_logging_configuration","title":"8.3 Logging Configuration","text":"<pre><code>steps:\n  verbose_step:\n    run: |\n      # Structured logging\n      echo '{\"level\":\"info\",\"message\":\"Starting build\",\"timestamp\":\"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'\"}'\n\n      npm run build 2&gt;&amp;1 | while read line; do\n        echo '{\"level\":\"info\",\"message\":\"'$line'\",\"component\":\"build\"}'\n      done\n\n      echo '{\"level\":\"info\",\"message\":\"Build completed\",\"timestamp\":\"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'\"}'\n</code></pre>"},{"location":"pipeline-configuration/#9_advanced_patterns","title":"9. Advanced Patterns","text":""},{"location":"pipeline-configuration/#91_conditional_execution","title":"9.1 Conditional Execution","text":"<pre><code>steps:\n  conditional_deploy:\n    run: |\n      # Only deploy if on main branch\n      if [ \"$GIT_BRANCH\" = \"main\" ]; then\n        echo \"Deploying to production...\"\n        ./scripts/deploy-prod.sh\n      else\n        echo \"Skipping deployment (not on main branch)\"\n      fi\n    env:\n      GIT_BRANCH: \"${CI_COMMIT_REF_NAME:-dev}\"\n</code></pre>"},{"location":"pipeline-configuration/#92_matrix_builds","title":"9.2 Matrix Builds","text":"<pre><code>steps:\n  test_matrix:\n    run: |\n      # Test multiple Node.js versions\n      for version in 16 18 20; do\n        echo \"Testing with Node.js $version\"\n        docker run --rm -v $(pwd):/app node:$version-alpine sh -c \"\n          cd /app\n          npm ci\n          npm test\n        \"\n      done\n</code></pre>"},{"location":"pipeline-configuration/#93_dynamic_step_generation","title":"9.3 Dynamic Step Generation","text":"<pre><code>steps:\n  discover_services:\n    run: |\n      # Discover services to build\n      find services/ -name \"Dockerfile\" -exec dirname {} \\; &gt; services.txt\n    outputs: [\"services.txt\"]\n\n  build_services:\n    run: |\n      # Build each discovered service\n      while read service; do\n        echo \"Building $service\"\n        docker build -t $(basename $service) $service/\n      done &lt; services.txt\n    needs: [\"discover_services\"]\n    inputs: [\"services.txt\", \"services/\"]\n</code></pre>"},{"location":"pipeline-configuration/#94_error_handling","title":"9.4 Error Handling","text":"<pre><code>steps:\n  robust_step:\n    run: |\n      # Set error handling\n      set -euo pipefail\n\n      # Retry logic\n      for i in {1..3}; do\n        if npm run build; then\n          echo \"Build succeeded on attempt $i\"\n          break\n        else\n          echo \"Build failed on attempt $i\"\n          if [ $i -eq 3 ]; then\n            echo \"All build attempts failed\"\n            exit 1\n          fi\n          sleep $((i * 10))  # Exponential backoff\n        fi\n      done\n\n      # Cleanup on success\n      trap 'echo \"Cleaning up...\"; rm -f temp-files.*' EXIT\n</code></pre>"},{"location":"pipeline-configuration/#10_pipeline_templates","title":"10. Pipeline Templates","text":""},{"location":"pipeline-configuration/#101_microservices_template","title":"10.1 Microservices Template","text":"<pre><code>version: \"0.1\"\nname: \"microservices-pipeline\"\n\nenv:\n  DOCKER_REGISTRY: \"registry.company.com\"\n  NAMESPACE: \"production\"\n\nsteps:\n  # Discover all microservices\n  discover:\n    run: |\n      find services/ -name \"Dockerfile\" -exec dirname {} \\; | sort &gt; services.list\n    outputs: [\"services.list\"]\n\n  # Build all services in parallel\n  build_services:\n    run: |\n      # Read services list and build each\n      while read service; do\n        echo \"Building $service\"\n        SERVICE_NAME=$(basename $service)\n        docker build -t ${DOCKER_REGISTRY}/${SERVICE_NAME}:${BUILD_VERSION:-latest} $service/\n        docker push ${DOCKER_REGISTRY}/${SERVICE_NAME}:${BUILD_VERSION:-latest}\n      done &lt; services.list\n    needs: [\"discover\"]\n    inputs: [\"services.list\", \"services/\"]\n    outputs: [\"build-manifest.json\"]\n\n  # Run tests for all services\n  test_services:\n    run: |\n      while read service; do\n        echo \"Testing $service\"\n        cd $service\n        if [ -f \"package.json\" ]; then\n          npm test\n        elif [ -f \"Cargo.toml\" ]; then\n          cargo test\n        fi\n        cd ..\n      done &lt; services.list\n    needs: [\"discover\"]\n    inputs: [\"services.list\", \"services/\"]\n\n  # Deploy all services\n  deploy_services:\n    run: |\n      while read service; do\n        SERVICE_NAME=$(basename $service)\n        kubectl set image deployment/${SERVICE_NAME} \\\n          ${SERVICE_NAME}=${DOCKER_REGISTRY}/${SERVICE_NAME}:${BUILD_VERSION:-latest} \\\n          --namespace=${NAMESPACE}\n      done &lt; services.list\n    needs: [\"build_services\", \"test_services\"]\n    inputs: [\"services.list\"]\n</code></pre>"},{"location":"pipeline-configuration/#102_web_application_template","title":"10.2 Web Application Template","text":"<pre><code>version: \"0.1\"\nname: \"web-app-pipeline\"\n\nenv:\n  NODE_ENV: production\n  BUILD_PATH: \"dist\"\n  PUBLIC_URL: \"https://app.company.com\"\n\nsteps:\n  # Install dependencies\n  install:\n    run: \"npm ci\"\n    inputs: [\"package.json\", \"package-lock.json\"]\n    outputs: [\"node_modules/\"]\n    cache: true\n\n  # Code quality checks\n  lint:\n    run: |\n      npm run lint:js\n      npm run lint:css\n      npm run lint:html\n    needs: [\"install\"]\n    inputs: [\"src/\", \"node_modules/\"]\n\n  # Type checking (if using TypeScript)\n  typecheck:\n    run: \"npm run typecheck\"\n    needs: [\"install\"]\n    inputs: [\"src/\", \"tsconfig.json\", \"node_modules/\"]\n\n  # Unit tests\n  test_unit:\n    run: \"npm run test:unit -- --coverage\"\n    needs: [\"install\"]\n    inputs: [\"src/\", \"tests/unit/\", \"node_modules/\"]\n    outputs: [\"coverage/\"]\n\n  # Integration tests\n  test_integration:\n    run: \"npm run test:integration\"\n    needs: [\"install\"]\n    inputs: [\"src/\", \"tests/integration/\", \"node_modules/\"]\n\n  # Build application\n  build:\n    run: \"npm run build\"\n    needs: [\"lint\", \"typecheck\", \"test_unit\"]\n    inputs: [\"src/\", \"public/\", \"node_modules/\"]\n    outputs: [\"dist/\"]\n    env:\n      GENERATE_SOURCEMAP: \"false\"\n\n  # End-to-end tests\n  test_e2e:\n    run: |\n      # Start local server\n      npm run serve &amp;\n      SERVER_PID=$!\n\n      # Wait for server\n      sleep 10\n\n      # Run E2E tests\n      npm run test:e2e\n\n      # Cleanup\n      kill $SERVER_PID\n    needs: [\"build\"]\n    inputs: [\"dist/\", \"tests/e2e/\", \"node_modules/\"]\n\n  # Security audit\n  audit:\n    run: |\n      npm audit --audit-level high\n      npm run security:scan\n    needs: [\"build\"]\n    inputs: [\"package-lock.json\", \"dist/\"]\n\n  # Performance testing\n  perf_test:\n    run: |\n      # Lighthouse CI\n      npm run lighthouse -- --upload\n\n      # Bundle analysis\n      npm run analyze\n    needs: [\"build\"]\n    inputs: [\"dist/\"]\n    outputs: [\"lighthouse-report.json\", \"bundle-analysis.json\"]\n\n  # Package for deployment\n  package:\n    run: |\n      # Create deployment package\n      tar -czf web-app-${BUILD_VERSION:-$(date +%Y%m%d-%H%M%S)}.tar.gz -C dist .\n\n      # Generate deployment manifest\n      cat &gt; deployment-manifest.json &lt;&lt; EOF\n      {\n        \"version\": \"${BUILD_VERSION:-latest}\",\n        \"build_date\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n        \"commit\": \"${GIT_COMMIT:-unknown}\",\n        \"files\": $(find dist -type f | wc -l)\n      }\n      EOF\n    needs: [\"test_integration\", \"test_e2e\", \"audit\", \"perf_test\"]\n    inputs: [\"dist/\"]\n    outputs: [\"*.tar.gz\", \"deployment-manifest.json\"]\n</code></pre>"},{"location":"pipeline-configuration/#103_machine_learning_pipeline_template","title":"10.3 Machine Learning Pipeline Template","text":"<pre><code>version: \"0.1\"\nname: \"ml-pipeline\"\n\nenv:\n  PYTHON_VERSION: \"3.9\"\n  CUDA_VERSION: \"11.8\"\n  MLFLOW_TRACKING_URI: \"https://mlflow.company.com\"\n\nsteps:\n  # Setup environment\n  setup:\n    run: |\n      python -m venv venv\n      source venv/bin/activate\n      pip install -r requirements.txt\n    inputs: [\"requirements.txt\"]\n    outputs: [\"venv/\"]\n    cache: true\n\n  # Data validation\n  validate_data:\n    run: |\n      source venv/bin/activate\n      python scripts/validate_data.py --input data/raw/ --output data/validated/\n    needs: [\"setup\"]\n    inputs: [\"data/raw/\", \"scripts/validate_data.py\", \"venv/\"]\n    outputs: [\"data/validated/\", \"data_validation_report.json\"]\n\n  # Feature engineering\n  feature_engineering:\n    run: |\n      source venv/bin/activate\n      python scripts/feature_engineering.py \\\n        --input data/validated/ \\\n        --output data/features/ \\\n        --config config/features.yaml\n    needs: [\"validate_data\"]\n    inputs: [\"data/validated/\", \"scripts/feature_engineering.py\", \"config/features.yaml\", \"venv/\"]\n    outputs: [\"data/features/\", \"feature_importance.json\"]\n\n  # Model training\n  train:\n    run: |\n      source venv/bin/activate\n      python scripts/train_model.py \\\n        --data data/features/ \\\n        --config config/model.yaml \\\n        --output models/\n    needs: [\"feature_engineering\"]\n    inputs: [\"data/features/\", \"scripts/train_model.py\", \"config/model.yaml\", \"venv/\"]\n    outputs: [\"models/\", \"training_metrics.json\"]\n    image: \"tensorflow/tensorflow:2.13.0-gpu\"  # GPU support\n    container:\n      memory_limit: \"16GB\"\n\n  # Model evaluation\n  evaluate:\n    run: |\n      source venv/bin/activate\n      python scripts/evaluate_model.py \\\n        --model models/best_model.pkl \\\n        --test-data data/test/ \\\n        --output evaluation/\n    needs: [\"train\"]\n    inputs: [\"models/\", \"data/test/\", \"scripts/evaluate_model.py\", \"venv/\"]\n    outputs: [\"evaluation/\", \"model_performance.json\"]\n\n  # Model validation\n  validate_model:\n    run: |\n      source venv/bin/activate\n      python scripts/validate_model.py \\\n        --model models/best_model.pkl \\\n        --threshold 0.85 \\\n        --metrics evaluation/model_performance.json\n    needs: [\"evaluate\"]\n    inputs: [\"models/\", \"evaluation/\", \"scripts/validate_model.py\", \"venv/\"]\n\n  # Package model\n  package_model:\n    run: |\n      source venv/bin/activate\n\n      # Create model package\n      python scripts/package_model.py \\\n        --model models/best_model.pkl \\\n        --output dist/model-${MODEL_VERSION:-$(date +%Y%m%d-%H%M%S)}.tar.gz\n\n      # Generate model card\n      python scripts/generate_model_card.py \\\n        --model models/best_model.pkl \\\n        --metrics evaluation/model_performance.json \\\n        --output dist/model_card.json\n    needs: [\"validate_model\"]\n    inputs: [\"models/\", \"evaluation/\", \"scripts/\", \"venv/\"]\n    outputs: [\"dist/\"]\n</code></pre>"},{"location":"pipeline-configuration/#11_pipeline_validation","title":"11. Pipeline Validation","text":""},{"location":"pipeline-configuration/#111_validation_levels","title":"11.1 Validation Levels","text":"<pre><code># Basic validation (syntax and structure)\nattest pipeline validate\n\n# Strict validation (includes best practices)\nattest pipeline validate --strict\n\n# Security validation (checks for security issues)\nattest pipeline validate --strict --security-check\n\n# Custom validation with specific rules\nattest pipeline validate --rules custom-rules.yaml\n</code></pre>"},{"location":"pipeline-configuration/#112_validation_rules","title":"11.2 Validation Rules","text":"<pre><code># custom-rules.yaml\nvalidation_rules:\n  # Require specific attestation for production\n  - name: \"production-attestation\"\n    condition: \"env.NODE_ENV == 'production'\"\n    requirement: \"attestation.sign_all_steps == true\"\n    severity: \"error\"\n    message: \"Production builds must be signed\"\n\n  # Warn about missing cache\n  - name: \"cache-optimization\"\n    condition: \"step.run contains 'npm ci' or step.run contains 'cargo build'\"\n    requirement: \"step.cache == true\"\n    severity: \"warning\"\n    message: \"Consider enabling cache for expensive operations\"\n\n  # Require timeout for long-running steps\n  - name: \"timeout-requirement\"\n    condition: \"step.run contains 'test' or step.run contains 'build'\"\n    requirement: \"step.timeout_secs != null\"\n    severity: \"info\"\n    message: \"Consider setting timeout for reliability\"\n</code></pre>"},{"location":"pipeline-configuration/#113_common_validation_errors","title":"11.3 Common Validation Errors","text":""},{"location":"pipeline-configuration/#circular_dependencies","title":"Circular Dependencies","text":"<pre><code>#  This will fail validation\nsteps:\n  step_a:\n    needs: [\"step_b\"]\n  step_b:\n    needs: [\"step_a\"]  # Circular dependency!\n</code></pre>"},{"location":"pipeline-configuration/#missing_dependencies","title":"Missing Dependencies","text":"<pre><code>#  This will fail validation\nsteps:\n  build:\n    needs: [\"nonexistent_step\"]  # Step doesn't exist!\n</code></pre>"},{"location":"pipeline-configuration/#invalid_file_patterns","title":"Invalid File Patterns","text":"<pre><code>#  Absolute paths not allowed\nsteps:\n  build:\n    inputs: [\"/absolute/path\"]     # Invalid!\n    outputs: [\"C:\\\\Windows\\\\\"]      # Invalid!\n</code></pre>"},{"location":"pipeline-configuration/#resource_conflicts","title":"Resource Conflicts","text":"<pre><code>#  This may cause issues\nsteps:\n  step_a:\n    outputs: [\"shared/\"]\n  step_b:\n    outputs: [\"shared/\"]  # Both write to same directory\n</code></pre>"},{"location":"pipeline-configuration/#12_best_practices","title":"12. Best Practices","text":""},{"location":"pipeline-configuration/#121_design_principles","title":"12.1 Design Principles","text":"<ol> <li> <p>Single Responsibility: Each step should do one thing well <pre><code>#  Good: Focused steps\nsteps:\n  lint: { run: \"npm run lint\" }\n  test: { run: \"npm test\" }\n  build: { run: \"npm run build\" }\n\n#  Bad: Monolithic step\nsteps:\n  everything:\n    run: |\n      npm run lint\n      npm test\n      npm run build\n      npm run deploy\n</code></pre></p> </li> <li> <p>Minimize Dependencies: Reduce coupling between steps <pre><code>#  Good: Independent steps can run in parallel\nsteps:\n  lint_js: { run: \"eslint src/\" }\n  lint_css: { run: \"stylelint styles/\" }\n  test_unit: { run: \"npm run test:unit\" }\n\n  build:\n    needs: [\"lint_js\", \"lint_css\", \"test_unit\"]\n\n#  Bad: Unnecessary linear dependencies\nsteps:\n  lint_js: { run: \"eslint src/\" }\n  lint_css: \n    run: \"stylelint styles/\"\n    needs: [\"lint_js\"]  # Unnecessary dependency!\n</code></pre></p> </li> <li> <p>Explicit Inputs/Outputs: Be specific about file dependencies <pre><code>#  Good: Explicit file tracking\nsteps:\n  build:\n    inputs: [\"src/\", \"package.json\", \"webpack.config.js\"]\n    outputs: [\"dist/\"]\n\n#  Bad: Vague or missing file tracking\nsteps:\n  build:\n    run: \"npm run build\"  # What files does this need/produce?\n</code></pre></p> </li> </ol>"},{"location":"pipeline-configuration/#122_performance_optimization","title":"12.2 Performance Optimization","text":"<ol> <li> <p>Enable Caching for Expensive Operations <pre><code>steps:\n  install_deps:\n    run: \"npm ci\"\n    cache: true           # Cache node_modules\n    inputs: [\"package.json\", \"package-lock.json\"]\n    outputs: [\"node_modules/\"]\n\n  compile:\n    run: \"cargo build --release\"\n    cache: true           # Cache compilation artifacts\n    inputs: [\"src/\", \"Cargo.toml\", \"Cargo.lock\"]\n    outputs: [\"target/release/\"]\n</code></pre></p> </li> <li> <p>Parallelize Independent Work <pre><code>steps:\n  # These run in parallel\n  lint_frontend:\n    run: \"eslint frontend/\"\n    inputs: [\"frontend/\"]\n\n  lint_backend:\n    run: \"cargo clippy\"\n    inputs: [\"backend/\"]\n\n  test_frontend:\n    run: \"npm test\"\n    inputs: [\"frontend/\"]\n\n  test_backend:\n    run: \"cargo test\"\n    inputs: [\"backend/\"]\n</code></pre></p> </li> <li> <p>Optimize Resource Usage <pre><code>steps:\n  memory_intensive:\n    run: \"cargo build --release\"\n    container:\n      memory_limit: \"8GB\"    # Ensure enough memory\n      cpu_limit: \"4.0\"       # Use multiple cores\n    timeout_secs: 1800        # 30 minute timeout\n</code></pre></p> </li> </ol>"},{"location":"pipeline-configuration/#123_security_best_practices","title":"12.3 Security Best Practices","text":"<ol> <li> <p>Use Attestation for Critical Steps <pre><code>attestation:\n  sign_all_steps: true        # Sign everything\n  verify_dependencies: true   # Verify inputs\n\nsteps:\n  build:\n    run: \"npm run build\"\n    attestation:\n      type: \"build\"\n      reproducible: true      # Enforce reproducibility\n      generate_slsa: true     # Generate SLSA metadata\n</code></pre></p> </li> <li> <p>Implement Proper Isolation <pre><code>steps:\n  untrusted_code:\n    run: \"./third-party-script.sh\"\n    isolation: container      # Container isolation\n    image: \"alpine:latest\"\n\n  highly_sensitive:\n    run: \"sign-release.sh\"\n    isolation: vm            # Maximum isolation\n    vm_image: \"ubuntu-22.04\"\n</code></pre></p> </li> <li> <p>Manage Secrets Properly <pre><code>steps:\n  deploy:\n    run: |\n      # Use external secret management\n      kubectl create secret generic app-secrets \\\n        --from-literal=api-key=\"$(vault kv get -field=api-key secret/app)\" \\\n        --from-literal=db-password=\"$(vault kv get -field=password secret/db)\"\n    # Don't put secrets directly in pipeline YAML!\n</code></pre></p> </li> </ol>"},{"location":"pipeline-configuration/#124_maintenance_and_debugging","title":"12.4 Maintenance and Debugging","text":"<ol> <li> <p>Use Descriptive Names and Documentation <pre><code>version: \"0.1\"\nname: \"web-app-ci-cd\"\ndescription: |\n  Complete CI/CD pipeline for the company web application.\n  Includes linting, testing, building, security scanning, and deployment.\n\nsteps:\n  security_scan:\n    run: \"npm audit --audit-level high\"\n    # This step ensures no high-severity vulnerabilities\n    inputs: [\"package-lock.json\"]\n</code></pre></p> </li> <li> <p>Add Health Checks and Validation <pre><code>steps:\n  deploy:\n    run: |\n      kubectl apply -f k8s/\n\n      # Wait for deployment to be ready\n      kubectl rollout status deployment/app --timeout=300s\n\n      # Health check\n      kubectl exec deployment/app -- curl -f http://localhost:8080/health\n</code></pre></p> </li> <li> <p>Implement Error Handling <pre><code>steps:\n  robust_build:\n    run: |\n      set -euo pipefail  # Fail fast on errors\n\n      # Cleanup function\n      cleanup() {\n        echo \"Cleaning up temporary files...\"\n        rm -f /tmp/build-*\n      }\n      trap cleanup EXIT\n\n      # Retry logic for flaky operations\n      for i in {1..3}; do\n        if npm run build; then\n          break\n        elif [ $i -eq 3 ]; then\n          echo \"Build failed after 3 attempts\"\n          exit 1\n        else\n          echo \"Build attempt $i failed, retrying...\"\n          sleep 10\n        fi\n      done\n</code></pre></p> </li> </ol>"},{"location":"pipeline-configuration/#13_next_steps","title":"13. Next Steps","text":"<p>Now that you understand pipeline configuration:</p> <ol> <li>Command Line Interface - Master the ATTEST CLI tools</li> <li>Attestation &amp; Signatures - Implement cryptographic security</li> <li>Cache &amp; Performance - Optimize your pipelines</li> <li>Practical Examples - See real-world implementations</li> </ol> <p>Ready to master the CLI? -&gt; Command Line Interface</p> <p>Want to dive into security? -&gt; Attestation &amp; Signatures</p>"},{"location":"pipeline-format/","title":"Pipeline Format","text":""},{"location":"pipeline-format/#1_overview","title":"1. Overview","text":"<p>ATTEST uses a declarative YAML format to define CI/CD pipelines. This document provides a comprehensive reference for the pipeline configuration format, including all available options and advanced features.</p>"},{"location":"pipeline-format/#2_basic_structure","title":"2. Basic Structure","text":""},{"location":"pipeline-format/#21_minimal_pipeline","title":"2.1 Minimal Pipeline","text":"<pre><code>version: \"0.1\"\nname: \"basic-pipeline\"\n\nsteps:\n  - name: \"hello\"\n    run: \"echo 'Hello, World!'\"\n</code></pre>"},{"location":"pipeline-format/#22_complete_pipeline_structure","title":"2.2 Complete Pipeline Structure","text":"<pre><code>version: \"0.1\"                    # Required: Format version\nname: \"complete-pipeline\"         # Required: Pipeline name\ndescription: \"Example pipeline\"   # Optional: Description\n\n# Global configuration\ndefaults:\n  cache: true\n  timeout: \"30m\"\n\nenv:\n  GLOBAL_VAR: \"value\"\n\n# Environment definitions\nenvironments:\n  development:\n    env:\n      NODE_ENV: \"development\"\n  production:\n    env:\n      NODE_ENV: \"production\"\n\n# Step definitions\nsteps:\n  - name: \"build\"\n    description: \"Build application\"\n    run: \"npm run build\"\n    # ... step configuration\n\n# Post-pipeline actions\ncleanup:\n  - name: \"cleanup-temp\"\n    run: \"rm -rf /tmp/build\"\n</code></pre>"},{"location":"pipeline-format/#3_version","title":"3. Version","text":"<p>The <code>version</code> field specifies the format version:</p> <pre><code>version: \"0.1\"  # Current version\n</code></pre> <p>Supported versions: - <code>0.1</code> - Initial format (current)</p>"},{"location":"pipeline-format/#4_metadata","title":"4. Metadata","text":""},{"location":"pipeline-format/#41_name_and_description","title":"4.1 Name and Description","text":"<pre><code>name: \"web-application-build\"\ndescription: |\n  Complete build pipeline for the web application\n  including testing, building, and security scanning\n</code></pre>"},{"location":"pipeline-format/#42_labels_and_annotations","title":"4.2 Labels and Annotations","text":"<pre><code>labels:\n  team: \"frontend\"\n  project: \"webapp\"\n  environment: \"production\"\n\nannotations:\n  docs: \"https://wiki.company.com/webapp-pipeline\"\n  contact: \"frontend-team@company.com\"\n  compliance: \"sox,hipaa\"\n</code></pre>"},{"location":"pipeline-format/#5_global_defaults","title":"5. Global Defaults","text":"<p>Set default values for all steps:</p> <pre><code>defaults:\n  cache: true\n  timeout: \"15m\"\n  shell: \"/bin/bash\"\n  working_directory: \"/workspace\"\n  retry:\n    attempts: 3\n    backoff: \"exponential\"\n</code></pre>"},{"location":"pipeline-format/#6_environment_variables","title":"6. Environment Variables","text":""},{"location":"pipeline-format/#61_global_environment_variables","title":"6.1 Global Environment Variables","text":"<pre><code>env:\n  NODE_ENV: \"production\"\n  API_URL: \"https://api.company.com\"\n  DEBUG: \"false\"\n</code></pre>"},{"location":"pipeline-format/#62_environment-specific_variables","title":"6.2 Environment-Specific Variables","text":"<pre><code>environments:\n  development:\n    env:\n      DEBUG: \"true\"\n      API_URL: \"https://dev-api.company.com\"\n\n  staging:\n    env:\n      DEBUG: \"false\"\n      API_URL: \"https://staging-api.company.com\"\n\n  production:\n    env:\n      DEBUG: \"false\"\n      API_URL: \"https://api.company.com\"\n      MONITORING: \"enabled\"\n</code></pre>"},{"location":"pipeline-format/#63_secret_variables","title":"6.3 Secret Variables","text":"<pre><code>secrets:\n  - name: \"DATABASE_PASSWORD\"\n    source: \"vault:secret/db/password\"\n  - name: \"API_KEY\"\n    source: \"env:API_KEY\"\n  - name: \"SIGNING_KEY\"\n    source: \"file:/etc/attest/signing.key\"\n</code></pre>"},{"location":"pipeline-format/#7_steps","title":"7. Steps","text":""},{"location":"pipeline-format/#71_basic_step","title":"7.1 Basic Step","text":"<pre><code>steps:\n  - name: \"test\"\n    run: \"npm test\"\n</code></pre>"},{"location":"pipeline-format/#72_complete_step_configuration","title":"7.2 Complete Step Configuration","text":"<pre><code>steps:\n  - name: \"build\"\n    description: \"Build the application\"\n    run: \"npm run build\"\n\n    # Dependencies\n    needs: [\"install\", \"lint\"]\n\n    # Input/Output specification\n    inputs:\n      - \"src/**/*.js\"\n      - \"src/**/*.ts\"\n      - \"package.json\"\n      - \"tsconfig.json\"\n    outputs:\n      - \"dist/\"\n      - \"build-manifest.json\"\n\n    # Environment\n    env:\n      NODE_ENV: \"production\"\n      BUILD_TARGET: \"es2020\"\n\n    # Execution configuration\n    shell: \"/bin/bash\"\n    working_directory: \"/app\"\n    timeout: \"20m\"\n\n    # Retry configuration\n    retry:\n      attempts: 3\n      backoff: \"exponential\"\n      on_failure: [\"network_error\", \"timeout\"]\n\n    # Caching\n    cache: true\n    cache_key: \"build-{{ checksum 'package-lock.json' }}-{{ env.NODE_ENV }}\"\n\n    # Conditions\n    condition: \"{{ env.CI_BRANCH == 'main' }}\"\n\n    # Continue on failure\n    continue_on_error: false\n</code></pre>"},{"location":"pipeline-format/#73_multi-command_steps","title":"7.3 Multi-Command Steps","text":"<pre><code>steps:\n  - name: \"setup-and-test\"\n    run: |\n      set -e\n      echo \"Setting up environment...\"\n      npm ci\n      echo \"Running tests...\"\n      npm test\n      echo \"Tests completed successfully\"\n</code></pre>"},{"location":"pipeline-format/#74_conditional_steps","title":"7.4 Conditional Steps","text":"<pre><code>steps:\n  - name: \"deploy-production\"\n    run: \"kubectl apply -f k8s/\"\n    condition: |\n      {{ env.CI_BRANCH == 'main' and \n         env.CI_COMMIT_TAG starts_with 'v' }}\n</code></pre>"},{"location":"pipeline-format/#8_dependencies","title":"8. Dependencies","text":""},{"location":"pipeline-format/#81_step_dependencies","title":"8.1 Step Dependencies","text":"<pre><code>steps:\n  - name: \"install\"\n    run: \"npm ci\"\n\n  - name: \"lint\"\n    run: \"npm run lint\"\n    needs: [\"install\"]\n\n  - name: \"test\"\n    run: \"npm test\"\n    needs: [\"install\"]\n\n  - name: \"build\"\n    run: \"npm run build\"\n    needs: [\"lint\", \"test\"]\n</code></pre>"},{"location":"pipeline-format/#82_parallel_execution","title":"8.2 Parallel Execution","text":"<pre><code>steps:\n  - name: \"install\"\n    run: \"npm ci\"\n\n  # These run in parallel after install\n  - name: \"lint\"\n    run: \"npm run lint\"\n    needs: [\"install\"]\n\n  - name: \"test-unit\"\n    run: \"npm run test:unit\"\n    needs: [\"install\"]\n\n  - name: \"test-integration\"\n    run: \"npm run test:integration\"\n    needs: [\"install\"]\n\n  # This waits for all parallel steps\n  - name: \"build\"\n    run: \"npm run build\"\n    needs: [\"lint\", \"test-unit\", \"test-integration\"]\n</code></pre>"},{"location":"pipeline-format/#9_inputoutput_specification","title":"9. Input/Output Specification","text":""},{"location":"pipeline-format/#91_file_patterns","title":"9.1 File Patterns","text":"<pre><code>inputs:\n  - \"src/**/*.{js,ts,jsx,tsx}\"  # Glob patterns\n  - \"package.json\"              # Specific files\n  - \"!src/**/*.test.js\"         # Exclusions\n  - \"config/\"                   # Directories\n\noutputs:\n  - \"dist/\"\n  - \"coverage/\"\n  - \"*.log\"\n</code></pre>"},{"location":"pipeline-format/#92_content-based_inputs","title":"9.2 Content-Based Inputs","text":"<pre><code>inputs:\n  - path: \"src/\"\n    exclude: [\"**/*.test.js\", \"**/*.spec.js\"]\n  - path: \"package.json\"\n    required: true\n  - path: \"config/\"\n    optional: true\n</code></pre>"},{"location":"pipeline-format/#93_output_artifacts","title":"9.3 Output Artifacts","text":"<pre><code>outputs:\n  - name: \"build-artifacts\"\n    paths: [\"dist/\"]\n    retention: \"30d\"\n  - name: \"test-results\"\n    paths: [\"coverage/\", \"test-results.xml\"]\n    retention: \"7d\"\n    public: true\n</code></pre>"},{"location":"pipeline-format/#10_caching","title":"10. Caching","text":""},{"location":"pipeline-format/#101_basic_caching","title":"10.1 Basic Caching","text":"<pre><code>steps:\n  - name: \"install\"\n    run: \"npm ci\"\n    cache: true  # Enable caching\n</code></pre>"},{"location":"pipeline-format/#102_custom_cache_keys","title":"10.2 Custom Cache Keys","text":"<pre><code>steps:\n  - name: \"install\"\n    run: \"npm ci\"\n    cache: true\n    cache_key: \"npm-{{ checksum 'package-lock.json' }}-{{ env.NODE_VERSION }}\"\n</code></pre>"},{"location":"pipeline-format/#103_cache_configuration","title":"10.3 Cache Configuration","text":"<pre><code>steps:\n  - name: \"build\"\n    run: \"npm run build\"\n    cache:\n      enabled: true\n      key: \"build-{{ checksum 'src/**/*.js' }}\"\n      paths: [\"dist/\", \"build/\"]\n      ttl: \"24h\"\n      compression: true\n</code></pre>"},{"location":"pipeline-format/#104_cache_strategies","title":"10.4 Cache Strategies","text":"<pre><code>cache_strategy:\n  # Aggressive caching for development\n  development:\n    default_ttl: \"1h\"\n    compression: false\n\n  # Conservative caching for production  \n  production:\n    default_ttl: \"24h\"\n    compression: true\n    require_exact_match: true\n</code></pre>"},{"location":"pipeline-format/#11_conditions_and_control_flow","title":"11. Conditions and Control Flow","text":""},{"location":"pipeline-format/#111_simple_conditions","title":"11.1 Simple Conditions","text":"<pre><code>steps:\n  - name: \"deploy\"\n    run: \"kubectl apply -f k8s/\"\n    condition: \"{{ env.BRANCH == 'main' }}\"\n</code></pre>"},{"location":"pipeline-format/#112_complex_conditions","title":"11.2 Complex Conditions","text":"<pre><code>steps:\n  - name: \"security-scan\"\n    run: \"security-scanner scan\"\n    condition: |\n      {{ env.SECURITY_SCAN_ENABLED and\n         (env.BRANCH == 'main' or \n          env.BRANCH starts_with 'release/') }}\n</code></pre>"},{"location":"pipeline-format/#113_conditional_execution_based_on_changes","title":"11.3 Conditional Execution Based on Changes","text":"<pre><code>steps:\n  - name: \"frontend-build\"\n    run: \"npm run build\"\n    condition: \"{{ changes include 'frontend/**' }}\"\n\n  - name: \"backend-build\" \n    run: \"go build\"\n    condition: \"{{ changes include 'backend/**' }}\"\n</code></pre>"},{"location":"pipeline-format/#12_error_handling","title":"12. Error Handling","text":""},{"location":"pipeline-format/#121_retry_configuration","title":"12.1 Retry Configuration","text":"<pre><code>steps:\n  - name: \"flaky-test\"\n    run: \"npm run test:e2e\"\n    retry:\n      attempts: 3\n      backoff: \"exponential\"  # linear, exponential, fixed\n      initial_delay: \"5s\"\n      max_delay: \"60s\"\n      on_failure: \n        - \"network_error\"\n        - \"timeout\"\n        - \"exit_code:1\"\n</code></pre>"},{"location":"pipeline-format/#122_continue_on_error","title":"12.2 Continue on Error","text":"<pre><code>steps:\n  - name: \"optional-check\"\n    run: \"optional-tool check\"\n    continue_on_error: true\n\n  - name: \"required-build\"\n    run: \"npm run build\"\n    # This runs even if optional-check fails\n</code></pre>"},{"location":"pipeline-format/#123_custom_error_handling","title":"12.3 Custom Error Handling","text":"<pre><code>steps:\n  - name: \"database-migration\"\n    run: \"migrate up\"\n    on_failure:\n      - name: \"rollback\"\n        run: \"migrate down\"\n      - name: \"notify\"\n        run: \"send-alert 'Migration failed'\"\n</code></pre>"},{"location":"pipeline-format/#13_advanced_features","title":"13. Advanced Features","text":""},{"location":"pipeline-format/#131_matrix_builds","title":"13.1 Matrix Builds","text":"<pre><code>matrix:\n  node_version: [\"16\", \"18\", \"20\"]\n  os: [\"ubuntu-latest\", \"macos-latest\"]\n\nsteps:\n  - name: \"test\"\n    run: \"npm test\"\n    env:\n      NODE_VERSION: \"{{ matrix.node_version }}\"\n    runs_on: \"{{ matrix.os }}\"\n</code></pre>"},{"location":"pipeline-format/#132_dynamic_steps","title":"13.2 Dynamic Steps","text":"<pre><code>steps:\n  - name: \"generate-tests\"\n    run: \"generate-test-matrix\"\n    outputs: [\"test-matrix.json\"]\n\n  - name: \"run-tests\"\n    run: \"run-test {{ item.name }}\"\n    for_each: \"{{ fromJson(file('test-matrix.json')) }}\"\n    env:\n      TEST_CONFIG: \"{{ item.config }}\"\n</code></pre>"},{"location":"pipeline-format/#133_service_dependencies","title":"13.3 Service Dependencies","text":"<pre><code>services:\n  postgres:\n    image: \"postgres:13\"\n    env:\n      POSTGRES_PASSWORD: \"test\"\n    ports:\n      - \"5432:5432\"\n\n  redis:\n    image: \"redis:6\"\n    ports:\n      - \"6379:6379\"\n\nsteps:\n  - name: \"integration-test\"\n    run: \"npm run test:integration\"\n    env:\n      DATABASE_URL: \"postgres://postgres:test@localhost:5432/test\"\n      REDIS_URL: \"redis://localhost:6379\"\n</code></pre>"},{"location":"pipeline-format/#14_attestation_configuration","title":"14. Attestation Configuration","text":""},{"location":"pipeline-format/#141_signing_configuration","title":"14.1 Signing Configuration","text":"<pre><code>attestation:\n  sign: true\n  algorithm: \"ed25519\"\n  key_source: \"vault:secret/signing-key\"\n\nverification:\n  enabled: true\n  require_signatures: true\n  trusted_keys:\n    - \"ed25519:abc123...\"\n    - \"ed25519:def456...\"\n</code></pre>"},{"location":"pipeline-format/#142_custom_attestation","title":"14.2 Custom Attestation","text":"<pre><code>attestation:\n  custom_fields:\n    build_id: \"{{ env.BUILD_ID }}\"\n    commit_sha: \"{{ env.GIT_COMMIT }}\"\n    compliance_level: \"sox\"\n\n  policies:\n    - \"require-tests\"\n    - \"security-scan\"\n    - \"approval-required\"\n</code></pre>"},{"location":"pipeline-format/#15_template_and_reuse","title":"15. Template and Reuse","text":""},{"location":"pipeline-format/#151_step_templates","title":"15.1 Step Templates","text":"<pre><code># _templates.yaml\ntemplates:\n  node_setup: &amp;node_setup\n    name: \"setup-node\"\n    run: |\n      nvm use {{ env.NODE_VERSION }}\n      npm ci\n    inputs: [\"package.json\", \"package-lock.json\"]\n    outputs: [\"node_modules/\"]\n\n# pipeline.yaml\nsteps:\n  - &lt;&lt;: *node_setup\n    env:\n      NODE_VERSION: \"18\"\n</code></pre>"},{"location":"pipeline-format/#152_pipeline_includes","title":"15.2 Pipeline Includes","text":"<pre><code># common-steps.yaml\ncommon_steps:\n  - name: \"security-scan\"\n    run: \"security-scanner scan\"\n  - name: \"dependency-check\"\n    run: \"npm audit\"\n\n# main-pipeline.yaml\nversion: \"0.1\"\nname: \"main-pipeline\"\n\nincludes:\n  - \"common-steps.yaml\"\n\nsteps:\n  - name: \"build\"\n    run: \"npm run build\"\n  - include: \"common_steps\"\n</code></pre>"},{"location":"pipeline-format/#153_variables_and_interpolation","title":"15.3 Variables and Interpolation","text":"<pre><code>variables:\n  app_name: \"my-app\"\n  version: \"{{ env.VERSION | default('1.0.0') }}\"\n  build_dir: \"dist/{{ variables.app_name }}\"\n\nsteps:\n  - name: \"build\"\n    run: \"npm run build\"\n    env:\n      OUTPUT_DIR: \"{{ variables.build_dir }}\"\n</code></pre>"},{"location":"pipeline-format/#16_validation","title":"16. Validation","text":""},{"location":"pipeline-format/#161_schema_validation","title":"16.1 Schema Validation","text":"<pre><code># Built-in validation\nvalidation:\n  strict: true  # Fail on unknown fields\n  required_fields: [\"name\", \"version\", \"steps\"]\n\n# Custom validation\ncustom_validation:\n  - rule: \"steps[*].name must be unique\"\n  - rule: \"inputs must exist before step execution\"\n  - rule: \"circular dependencies are not allowed\"\n</code></pre>"},{"location":"pipeline-format/#162_linting","title":"16.2 Linting","text":"<pre><code># Validate pipeline format\nattest pipeline validate pipeline.yaml\n\n# Lint for best practices\nattest pipeline lint pipeline.yaml --rules production\n</code></pre>"},{"location":"pipeline-format/#17_comments_and_documentation","title":"17. Comments and Documentation","text":"<pre><code># Pipeline for building and testing the web application\nversion: \"0.1\"\nname: \"webapp-build\"\n\n# Global environment variables used throughout the pipeline\nenv:\n  NODE_ENV: \"production\"  # Set Node.js environment\n\nsteps:\n  # Install dependencies from package-lock.json\n  - name: \"install\"\n    run: \"npm ci\"\n    # Cache node_modules based on lockfile hash\n    cache_key: \"npm-{{ checksum 'package-lock.json' }}\"\n\n  # Run linting to ensure code quality\n  - name: \"lint\"\n    run: \"npm run lint\"\n    needs: [\"install\"]\n    # Continue pipeline even if linting has warnings\n    continue_on_error: true\n</code></pre>"},{"location":"pipeline-format/#18_best_practices","title":"18. Best Practices","text":""},{"location":"pipeline-format/#181_pipeline_organization","title":"18.1 Pipeline Organization","text":"<ol> <li>Use meaningful step names that describe the action</li> <li>Group related steps logically</li> <li>Leverage parallel execution where possible</li> <li>Keep steps focused on single responsibilities</li> <li>Use descriptive comments for complex logic</li> </ol>"},{"location":"pipeline-format/#182_performance_optimization","title":"18.2 Performance Optimization","text":"<ol> <li>Enable caching for expensive operations</li> <li>Specify precise inputs to improve cache hits</li> <li>Use parallel execution for independent steps</li> <li>Minimize output artifacts to reduce transfer time</li> <li>Set appropriate timeouts to prevent hanging</li> </ol>"},{"location":"pipeline-format/#183_security_considerations","title":"18.3 Security Considerations","text":"<ol> <li>Never hardcode secrets in pipeline files</li> <li>Use minimal required permissions for each step</li> <li>Validate all inputs and outputs</li> <li>Enable signing for production pipelines</li> <li>Implement proper error handling without exposing sensitive data</li> </ol> <p>This pipeline format provides a powerful and flexible way to define CI/CD workflows while maintaining simplicity and readability.</p>"},{"location":"policies/","title":"Policies & Governance","text":""},{"location":"policies/#1_overview","title":"1. Overview","text":"<p>ATTEST provides comprehensive policy enforcement and governance capabilities through integration with Open Policy Agent (OPA) and Gatekeeper, enabling organizations to maintain security, compliance, and operational standards across all deployments.</p>"},{"location":"policies/#2_policy_engine_architecture","title":"2. Policy Engine Architecture","text":"<pre><code>graph TB\n    A[Policy Engine] --&gt; B[OPA Integration]\n    A --&gt; C[Gatekeeper Integration]\n\n    B --&gt; D[Rego Policies]\n    C --&gt; E[Constraint Templates]\n\n    F[GitOps Controller] --&gt; A\n    G[Kubernetes Resources] --&gt; A\n\n    A --&gt; H[Policy Evaluation]\n    H --&gt; I[Allow/Deny Decision]\n    H --&gt; J[Violation Reports]</code></pre>"},{"location":"policies/#3_policy_types","title":"3. Policy Types","text":""},{"location":"policies/#security_policies","title":"Security Policies","text":"<p>Enforce security best practices:</p> <pre><code>package attest.security\n\n# Deny containers without ATTEST attestation\nviolation[{\"violated\": true, \"message\": msg, \"severity\": \"high\"}] {\n    input.resource.kind == \"Pod\"\n    container := input.resource.spec.containers[_]\n    not has_attest_attestation(container.image)\n    msg := sprintf(\"Container image '%v' lacks required ATTEST attestation\", [container.image])\n}\n\n# Deny privileged containers\nviolation[{\"violated\": true, \"message\": msg, \"severity\": \"critical\"}] {\n    input.resource.kind in [\"Pod\", \"Deployment\"]\n    container := get_containers[_]\n    container.securityContext.privileged == true\n    msg := sprintf(\"Privileged containers are not allowed: %v\", [container.name])\n}\n</code></pre>"},{"location":"policies/#deployment_policies","title":"Deployment Policies","text":"<p>Ensure deployment best practices:</p> <pre><code>package attest.deployment\n\n# Require ATTEST receipt for all deployments\nviolation[{\"violated\": true, \"message\": msg, \"severity\": \"critical\"}] {\n    input.resource.kind == \"Deployment\"\n    not has_attest_receipt\n    msg := \"Deployment must include valid ATTEST receipt\"\n}\n\n# Enforce minimum replica count for production\nviolation[{\"violated\": true, \"message\": msg, \"severity\": \"medium\"}] {\n    input.resource.kind == \"Deployment\"\n    is_production_namespace\n    input.resource.spec.replicas &lt; 2\n    msg := \"Production deployments must have at least 2 replicas for high availability\"\n}\n</code></pre>"},{"location":"policies/#compliance_policies","title":"Compliance Policies","text":"<p>Meet regulatory requirements:</p> <pre><code>package attest.compliance\n\n# SOC2 Compliance: Audit logging requirements\nviolation[{\"violated\": true, \"message\": msg, \"severity\": \"high\"}] {\n    input.resource.kind == \"Deployment\"\n    is_production_namespace\n    not has_audit_logging_enabled\n    msg := \"Production deployments must enable audit logging for SOC2 compliance\"\n}\n\n# GDPR: Data protection annotations\nviolation[{\"violated\": true, \"message\": msg, \"severity\": \"high\"}] {\n    input.resource.kind == \"Deployment\"\n    processes_personal_data\n    not has_data_protection_annotations\n    msg := \"Applications processing personal data must have GDPR data protection annotations\"\n}\n</code></pre>"},{"location":"policies/#4_policy_configuration","title":"4. Policy Configuration","text":""},{"location":"policies/#global_policy_settings","title":"Global Policy Settings","text":"<pre><code># ~/.config/attest/policies.yaml\npolicy:\n  enabled: true\n  opa_enabled: true\n  gatekeeper_enabled: true\n  fail_on_violation: true\n\n  # Policy sources\n  policy_bundle_url: \"https://policies.company.com/attest-bundle\"\n  policy_bundle_path: \"policies/\"\n\n  # Custom policies\n  custom_policies:\n    - name: \"custom-security\"\n      description: \"Custom security policy\"\n      level: \"Cluster\"\n      severity: \"High\"\n      rego_code: |\n        package custom.security\n        violation[{\"violated\": true, \"message\": msg}] {\n          # Policy logic here\n        }\n</code></pre>"},{"location":"policies/#project-level_policies","title":"Project-Level Policies","text":"<pre><code># .attest/policies.yaml\npolicies:\n  - name: \"image-security\"\n    enabled: true\n    enforcement: \"strict\"\n    parameters:\n      trusted_registries:\n        - \"gcr.io/\"\n        - \"registry.company.com/\"\n      require_attestation: true\n\n  - name: \"resource-limits\"\n    enabled: true\n    enforcement: \"warn\"\n    parameters:\n      max_cpu: \"2000m\"\n      max_memory: \"4Gi\"\n      require_limits: true\n</code></pre>"},{"location":"policies/#5_gatekeeper_integration","title":"5. Gatekeeper Integration","text":""},{"location":"policies/#constraint_templates","title":"Constraint Templates","text":"<p>ATTEST creates specialized constraint templates:</p> <pre><code>apiVersion: templates.gatekeeper.sh/v1beta1\nkind: ConstraintTemplate\nmetadata:\n  name: attestimagepolicy\nspec:\n  crd:\n    spec:\n      names:\n        kind: AttestImagePolicy\n      validation:\n        properties:\n          allowedRegistries:\n            type: array\n            items:\n              type: string\n          requireAttestation:\n            type: boolean\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package attestimagepolicy\n\n        violation[{\"msg\": msg}] {\n            container := input.review.object.spec.containers[_]\n            not allowed_registry(container.image)\n            msg := sprintf(\"Container image '%v' is not from an allowed registry\", [container.image])\n        }\n</code></pre>"},{"location":"policies/#constraint_instances","title":"Constraint Instances","text":"<pre><code>apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: AttestImagePolicy\nmetadata:\n  name: company-image-policy\nspec:\n  match:\n    kinds:\n      - apiGroups: [\"apps\"]\n        kinds: [\"Deployment\"]\n    namespaces: [\"production\", \"staging\"]\n  parameters:\n    allowedRegistries:\n      - \"gcr.io/company/\"\n      - \"registry.company.com/\"\n    requireAttestation: true\n</code></pre>"},{"location":"policies/#6_policy_exemptions","title":"6. Policy Exemptions","text":""},{"location":"policies/#temporary_exemptions","title":"Temporary Exemptions","text":"<pre><code>exemptions:\n  - policy_name: \"attest-security\"\n    resource_kind: \"Pod\"\n    resource_name: \"legacy-monitoring\"\n    resource_namespace: \"monitoring\"\n    reason: \"Legacy monitoring tool pending security upgrade\"\n    expires_at: \"2024-06-30T23:59:59Z\"\n    approved_by: \"security-team@company.com\"\n</code></pre>"},{"location":"policies/#annotation-based_exemptions","title":"Annotation-Based Exemptions","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: exempted-pod\n  annotations:\n    policy.attest.continuu.ms/exempt: \"true\"\n    policy.attest.continuu.ms/exempt-reason: \"Emergency hotfix deployment\"\n    policy.attest.continuu.ms/exempt-approved-by: \"incident-commander@company.com\"\n    policy.attest.continuu.ms/exempt-expires: \"2024-02-01T12:00:00Z\"\nspec:\n  # Pod specification\n</code></pre>"},{"location":"policies/#7_policy_testing","title":"7. Policy Testing","text":""},{"location":"policies/#automated_policy_testing","title":"Automated Policy Testing","text":"<pre><code># Test all policies with examples\nattest policy test-all\n\n# Test specific policy\nattest policy test attest-security\n\n# Test against specific resource\nattest policy test attest-security --resource k8s/deployment.yaml\n</code></pre>"},{"location":"policies/#policy_validation","title":"Policy Validation","text":"<pre><code># Validate policy syntax\nattest policy validate policies/security.rego\n\n# Validate policy bundle\nattest policy validate-bundle https://policies.company.com/bundle\n\n# Check policy conflicts\nattest policy conflicts --detailed\n</code></pre>"},{"location":"policies/#8_compliance_frameworks","title":"8. Compliance Frameworks","text":""},{"location":"policies/#soc2_type_ii","title":"SOC2 Type II","text":"<pre><code>compliance:\n  soc2:\n    enabled: true\n    controls:\n      - control: \"CC6.1\"\n        policy: \"access-control\"\n        description: \"Logical access security measures\"\n      - control: \"CC6.3\"\n        policy: \"authentication\"\n        description: \"Multi-factor authentication\"\n      - control: \"CC7.2\"\n        policy: \"system-monitoring\"\n        description: \"System monitoring and logging\"\n</code></pre>"},{"location":"policies/#gdpr_compliance","title":"GDPR Compliance","text":"<pre><code>compliance:\n  gdpr:\n    enabled: true\n    data_protection:\n      require_annotations: true\n      required_annotations:\n        - \"gdpr.attest.continuu.ms/lawful-basis\"\n        - \"gdpr.attest.continuu.ms/data-controller\"\n        - \"gdpr.attest.continuu.ms/retention-period\"\n    privacy_by_design: true\n</code></pre>"},{"location":"policies/#hipaa_compliance","title":"HIPAA Compliance","text":"<pre><code>compliance:\n  hipaa:\n    enabled: true\n    encryption:\n      at_rest: required\n      in_transit: required\n    access_controls:\n      minimum_necessary: true\n      audit_logging: required\n    data_classification:\n      phi_detection: enabled\n</code></pre>"},{"location":"policies/#9_policy_monitoring","title":"9. Policy Monitoring","text":""},{"location":"policies/#prometheus_metrics","title":"Prometheus Metrics","text":"<pre><code># Policy evaluations\nattest_policy_evaluations_total{policy=\"attest-security\",result=\"passed\"}\nattest_policy_evaluations_total{policy=\"attest-security\",result=\"failed\"}\n\n# Violation severity\nattest_policy_violation_severity{severity=\"critical\",policy=\"attest-security\"}\n\n# Engine performance\nattest_policy_evaluation_duration_seconds{engine=\"opa\"}\nattest_policy_evaluation_duration_seconds{engine=\"gatekeeper\"}\n</code></pre>"},{"location":"policies/#violation_alerts","title":"Violation Alerts","text":"<pre><code># Prometheus AlertManager rules\ngroups:\n- name: attest-policy\n  rules:\n  - alert: CriticalPolicyViolation\n    expr: increase(attest_policy_violation_severity{severity=\"critical\"}[5m]) &gt; 0\n    for: 0m\n    labels:\n      severity: critical\n    annotations:\n      summary: \"Critical policy violation detected\"\n      description: \"{{ $labels.policy }} policy has {{ $value }} critical violations\"\n</code></pre>"},{"location":"policies/#10_policy_as_code","title":"10. Policy as Code","text":""},{"location":"policies/#version_control_integration","title":"Version Control Integration","text":"<pre><code># Policy repository structure\npolicies/\n\u251c\u2500\u2500 security/\n\u2502   \u251c\u2500\u2500 container-security.rego\n\u2502   \u251c\u2500\u2500 network-policies.rego\n\u2502   \u2514\u2500\u2500 rbac-policies.rego\n\u251c\u2500\u2500 compliance/\n\u2502   \u251c\u2500\u2500 soc2.rego\n\u2502   \u251c\u2500\u2500 gdpr.rego\n\u2502   \u2514\u2500\u2500 hipaa.rego\n\u251c\u2500\u2500 deployment/\n\u2502   \u251c\u2500\u2500 resource-limits.rego\n\u2502   \u251c\u2500\u2500 health-checks.rego\n\u2502   \u2514\u2500\u2500 availability.rego\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 security_test.rego\n    \u251c\u2500\u2500 compliance_test.rego\n    \u2514\u2500\u2500 deployment_test.rego\n</code></pre>"},{"location":"policies/#cicd_pipeline_integration","title":"CI/CD Pipeline Integration","text":"<pre><code># .github/workflows/policy-validation.yml\nname: Policy Validation\non:\n  pull_request:\n    paths: ['policies/**']\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Validate Policies\n        run: |\n          attest policy validate policies/\n          attest policy test policies/\n\n      - name: Security Scan\n        run: |\n          attest policy scan --format sarif --output policy-scan.sarif\n\n      - name: Upload Results\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: policy-scan.sarif\n</code></pre>"},{"location":"policies/#11_governance_workflows","title":"11. Governance Workflows","text":""},{"location":"policies/#policy_review_process","title":"Policy Review Process","text":"<pre><code># .attest/governance.yaml\ngovernance:\n  policy_approval:\n    required_reviewers: 2\n    required_teams: [\"security-team\", \"compliance-team\"]\n    auto_merge: false\n\n  exemption_approval:\n    required_approvers: 1\n    required_teams: [\"security-team\"]\n    max_duration: \"30d\"\n\n  emergency_override:\n    enabled: true\n    required_approvers: 2\n    audit_trail: required\n</code></pre>"},{"location":"policies/#approval_workflows","title":"Approval Workflows","text":"<pre><code># Request policy exemption\nattest policy exempt \\\n  --policy attest-security \\\n  --resource Pod/monitoring/legacy-app \\\n  --reason \"Legacy app migration in progress\" \\\n  --duration 30d \\\n  --approver security-team@company.com\n\n# Review pending exemptions\nattest policy exemptions list --status pending\n\n# Approve exemption\nattest policy exempt approve exemption-123 \\\n  --approver alice@company.com \\\n  --comment \"Approved for migration period\"\n</code></pre>"},{"location":"policies/#12_advanced_policy_features","title":"12. Advanced Policy Features","text":""},{"location":"policies/#dynamic_policy_parameters","title":"Dynamic Policy Parameters","text":"<pre><code>package attest.dynamic\n\n# Use external data for policy decisions\nviolation[{\"violated\": true, \"message\": msg}] {\n    container := input.resource.spec.containers[_]\n    vulnerability_data := http.send({\n        \"method\": \"GET\",\n        \"url\": sprintf(\"https://vuln-db.company.com/scan/%s\", [container.image])\n    })\n    vulnerability_data.status_code == 200\n    vulnerabilities := json.unmarshal(vulnerability_data.body)\n    count(vulnerabilities.critical) &gt; 0\n    msg := sprintf(\"Container image %s has %d critical vulnerabilities\", [container.image, count(vulnerabilities.critical)])\n}\n</code></pre>"},{"location":"policies/#contextual_policies","title":"Contextual Policies","text":"<pre><code>package attest.context\n\n# Different rules for different environments\nviolation[{\"violated\": true, \"message\": msg}] {\n    input.resource.kind == \"Deployment\"\n    environment := input.resource.metadata.labels[\"environment\"]\n    environment == \"production\"\n    not has_production_requirements\n    msg := \"Production deployments must meet stricter requirements\"\n}\n\nhas_production_requirements {\n    input.resource.spec.replicas &gt;= 3\n    input.resource.spec.template.spec.containers[_].resources.limits\n    input.resource.metadata.annotations[\"monitoring.company.com/enabled\"] == \"true\"\n}\n</code></pre>"},{"location":"policies/#13_policy_development_tools","title":"13. Policy Development Tools","text":""},{"location":"policies/#opa_playground_integration","title":"OPA Playground Integration","text":"<pre><code># Test policies interactively\nattest policy playground \\\n  --policy policies/security.rego \\\n  --input examples/deployment.yaml\n\n# Generate test cases\nattest policy generate-tests \\\n  --policy policies/security.rego \\\n  --output tests/security_test.rego\n</code></pre>"},{"location":"policies/#policy_performance_analysis","title":"Policy Performance Analysis","text":"<pre><code># Profile policy performance\nattest policy profile policies/ \\\n  --benchmark-data examples/ \\\n  --output profile-report.json\n\n# Optimize slow policies\nattest policy optimize policies/slow-policy.rego \\\n  --suggestions\n</code></pre>"},{"location":"policies/#14_integration_examples","title":"14. Integration Examples","text":""},{"location":"policies/#jenkins_pipeline","title":"Jenkins Pipeline","text":"<pre><code>pipeline {\n    agent any\n    stages {\n        stage('Policy Validation') {\n            steps {\n                script {\n                    sh 'attest policy validate k8s/'\n                    def violations = sh(\n                        script: 'attest policy check k8s/ --format json',\n                        returnStdout: true\n                    )\n                    def result = readJSON text: violations\n                    if (result.violations &gt; 0) {\n                        error \"Policy violations found: ${result.violations}\"\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"policies/#gitlab_ci","title":"GitLab CI","text":"<pre><code>policy-check:\n  stage: validate\n  image: attestci/attest:latest\n  script:\n    - attest policy validate manifests/\n    - attest policy check manifests/ --strict\n  artifacts:\n    reports:\n      junit: policy-results.xml\n  only:\n    changes:\n      - manifests/**/*\n      - policies/**/*\n</code></pre>"},{"location":"policies/#15_best_practices","title":"15. Best Practices","text":""},{"location":"policies/#policy_design","title":"Policy Design","text":"<ol> <li>Start with warnings before enforcing denials</li> <li>Use clear, descriptive messages for violations</li> <li>Implement gradual rollout for new policies</li> <li>Test thoroughly before production deployment</li> <li>Maintain policy documentation and examples</li> </ol>"},{"location":"policies/#performance_optimization","title":"Performance Optimization","text":"<ol> <li>Minimize external data calls in policies</li> <li>Use efficient Rego patterns for complex logic</li> <li>Cache policy evaluation results when possible</li> <li>Monitor policy evaluation time and optimize slow rules</li> <li>Batch policy evaluations for multiple resources</li> </ol>"},{"location":"policies/#security_considerations","title":"Security Considerations","text":"<ol> <li>Protect policy source code with appropriate access controls</li> <li>Sign policy bundles to ensure integrity</li> <li>Audit policy changes and maintain change history</li> <li>Implement break-glass procedures for emergencies</li> <li>Regular security reviews of policy logic</li> </ol>"},{"location":"policies/#16_troubleshooting","title":"16. Troubleshooting","text":""},{"location":"policies/#common_issues","title":"Common Issues","text":"<pre><code># Policy not being applied\nkubectl get constraints -A\nkubectl describe constraint policy-name\n\n# OPA evaluation failures\nkubectl logs -n gatekeeper-system -l app=gatekeeper-controller\n\n# Performance issues\nattest policy profile --verbose policies/\n</code></pre>"},{"location":"policies/#debug_mode","title":"Debug Mode","text":"<pre><code># Enable detailed policy logging\nattest config set policy.debug true\n\n# Trace policy evaluation\nattest policy trace \\\n  --policy policies/security.rego \\\n  --input examples/pod.yaml \\\n  --verbose\n</code></pre> <p>The ATTEST policy and governance system provides enterprise-grade policy enforcement with comprehensive compliance support, ensuring your deployments meet organizational standards and regulatory requirements.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#1_overview","title":"1. Overview","text":"<p>This guide covers common issues, diagnostic tools, and solutions for ATTEST deployments. Use this reference to quickly resolve problems and optimize your pipeline performance.</p>"},{"location":"troubleshooting/#2_common_issues","title":"2. Common Issues","text":""},{"location":"troubleshooting/#build_failures","title":"Build Failures","text":""},{"location":"troubleshooting/#step_execution_failures","title":"Step Execution Failures","text":"<pre><code># Check step logs\nattest logs --step build --verbose\n\n# Common causes and solutions:\n# 1. Missing dependencies\nattest deps check --fix-missing\n\n# 2. Environment variable issues\nattest env check --show-missing\n\n# 3. Permission problems\nattest permissions check --fix-permissions\n\n# 4. Resource constraints\nattest resources check --recommend-limits\n</code></pre>"},{"location":"troubleshooting/#cache-related_build_failures","title":"Cache-Related Build Failures","text":"<pre><code># Diagnose cache issues\nattest cache diagnose --step build\n\n# Clear corrupted cache\nattest cache clear --key abc123... --force\n\n# Rebuild cache index\nattest cache reindex --verify\n\n# Disable cache temporarily\nattest run --no-cache --step build\n</code></pre>"},{"location":"troubleshooting/#performance_issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#slow_build_times","title":"Slow Build Times","text":"<pre><code># Profile build performance\nattest profile build --duration 5m --output profile.json\n\n# Analyze bottlenecks\nattest analyze profile.json --format table\n\n# Common optimizations:\n# 1. Enable caching\nattest config set cache.enabled true\n\n# 2. Parallelize steps\nattest config set execution.parallel true\n\n# 3. Optimize Docker layers\nattest optimize dockerfile --layer-caching\n</code></pre>"},{"location":"troubleshooting/#high_memory_usage","title":"High Memory Usage","text":"<pre><code># Monitor memory usage\nattest monitor memory --duration 10m\n\n# Check for memory leaks\nattest debug memory-leaks --heap-profile\n\n# Optimize memory settings\nattest config set resources.memory_limit \"4Gi\"\nattest config set cache.max_size \"1Gi\"\n</code></pre>"},{"location":"troubleshooting/#verification_failures","title":"Verification Failures","text":""},{"location":"troubleshooting/#signature_verification_issues","title":"Signature Verification Issues","text":"<pre><code># Debug signature verification\nattest verify receipt.yaml --debug\n\n# Common issues:\n# 1. Clock skew\nattest verify receipt.yaml --tolerance 5m\n\n# 2. Wrong public key\nattest keys list --show-fingerprints\nattest verify receipt.yaml --key correct-key.pub\n\n# 3. Corrupted receipt\nattest receipt validate receipt.yaml --repair\n</code></pre>"},{"location":"troubleshooting/#policy_violations","title":"Policy Violations","text":"<pre><code># Check policy violations  \nattest policy check --show-violations\n\n# Debug specific policy\nattest policy debug security-scan-required --trace\n\n# Temporarily bypass policy (emergency only)\nattest run --policy-override emergency-bypass\n</code></pre>"},{"location":"troubleshooting/#networking_issues","title":"Networking Issues","text":""},{"location":"troubleshooting/#connection_timeouts","title":"Connection Timeouts","text":"<pre><code># Test network connectivity\nattest network test --endpoints all\n\n# Check proxy settings\nattest config show network.proxy\n\n# Configure timeouts\nattest config set network.timeout \"30s\"\nattest config set network.retries 3\n</code></pre>"},{"location":"troubleshooting/#dns_resolution_problems","title":"DNS Resolution Problems","text":"<pre><code># Test DNS resolution\nattest network dns-test --domains required\n\n# Use custom DNS\nattest config set network.dns_servers \"8.8.8.8,1.1.1.1\"\n\n# Bypass DNS for specific hosts\nattest config set network.hosts_file \"/etc/attest/hosts\"\n</code></pre>"},{"location":"troubleshooting/#3_diagnostic_tools","title":"3. Diagnostic Tools","text":""},{"location":"troubleshooting/#health_check","title":"Health Check","text":"<pre><code># Comprehensive health check\nattest health check --comprehensive\n\n# Sample output:\nSystem Health Check\n==================\nOK ATTEST version: 0.1.2 (latest)\nOK Configuration: valid\nOK Cache: healthy (85% hit rate)\nOK Network: all endpoints reachable\nWARNING Memory: high usage (87%)\nERROR Disk: low space (92% full)\n\nRecommendations:\n- Increase memory limit or optimize usage\n- Clean up old cache entries or increase disk space\n</code></pre>"},{"location":"troubleshooting/#system_information","title":"System Information","text":"<pre><code># Gather system information\nattest system info --full\n\n# Output includes:\n# - ATTEST version and configuration\n# - Operating system details\n# - Resource usage statistics\n# - Network configuration\n# - Cache status\n# - Recent errors\n</code></pre>"},{"location":"troubleshooting/#debug_mode","title":"Debug Mode","text":"<pre><code># Enable debug logging\nexport ATTEST_LOG_LEVEL=debug\nattest run --debug\n\n# Trace specific operations\nattest run --trace=cache,signature --step build\n\n# Debug configuration\nattest config debug --show-resolved --show-sources\n</code></pre>"},{"location":"troubleshooting/#4_error_messages","title":"4. Error Messages","text":""},{"location":"troubleshooting/#common_error_patterns","title":"Common Error Patterns","text":""},{"location":"troubleshooting/#command_not_found","title":"\"Command not found\"","text":"<pre><code># Error: attest: command not found\n# Solution: Install or update PATH\ncurl -sSL https://install.attest.continuu.ms | bash\nexport PATH=\"$HOME/.attest/bin:$PATH\"\n</code></pre>"},{"location":"troubleshooting/#permission_denied","title":"\"Permission denied\"","text":"<pre><code># Error: permission denied accessing .attest/\n# Solution: Fix ownership or permissions\nsudo chown -R $USER:$USER .attest/\nchmod -R u+rw .attest/\n</code></pre>"},{"location":"troubleshooting/#cache_corruption_detected","title":"\"Cache corruption detected\"","text":"<pre><code># Error: cache corruption detected in object abc123\n# Solution: Repair or rebuild cache\nattest cache repair --object abc123\n# or\nattest cache clear --all --rebuild\n</code></pre>"},{"location":"troubleshooting/#signature_verification_failed","title":"\"Signature verification failed\"","text":"<pre><code># Error: signature verification failed for receipt.yaml\n# Solutions:\n# 1. Check clock synchronization\nsudo ntpdate -s time.nist.gov\n\n# 2. Verify correct public key\nattest keys show --public --fingerprint\n\n# 3. Check receipt integrity\nattest receipt verify --checksum receipt.yaml\n</code></pre>"},{"location":"troubleshooting/#policy_violation","title":"\"Policy violation\"","text":"<pre><code># Error: policy violation: security-scan-required\n# Solutions:\n# 1. Run required security scan\nattest run security-scan\n\n# 2. Update policy configuration\nattest policy update security-scan-required --disabled\n\n# 3. Request policy exemption\nattest policy exempt --policy security-scan-required \\\n  --reason \"legacy-system\" --approver manager@company.com\n</code></pre>"},{"location":"troubleshooting/#5_performance_troubleshooting","title":"5. Performance Troubleshooting","text":""},{"location":"troubleshooting/#identifying_bottlenecks","title":"Identifying Bottlenecks","text":"<pre><code># Performance analysis\nattest performance analyze --period 7d\n\n# Step-by-step timing\nattest profile steps --show-details\n\n# Resource utilization\nattest monitor resources --duration 1h --export csv\n</code></pre>"},{"location":"troubleshooting/#cache_performance","title":"Cache Performance","text":"<pre><code># Cache hit rate analysis\nattest cache stats --detailed\n\n# Cache size optimization\nattest cache optimize --target-hit-rate 85%\n\n# Cache cleanup\nattest cache gc --aggressive --max-age 7d\n</code></pre>"},{"location":"troubleshooting/#network_performance","title":"Network Performance","text":"<pre><code># Network latency test\nattest network latency --endpoints cache,registry,api\n\n# Bandwidth test\nattest network bandwidth --test-upload --test-download\n\n# Connection pooling optimization\nattest config set network.connection_pool_size 20\n</code></pre>"},{"location":"troubleshooting/#6_configuration_issues","title":"6. Configuration Issues","text":""},{"location":"troubleshooting/#invalid_configuration","title":"Invalid Configuration","text":"<pre><code># Validate configuration\nattest config validate --strict\n\n# Show configuration sources\nattest config sources --show-overrides\n\n# Reset to defaults\nattest config reset --confirm\n</code></pre>"},{"location":"troubleshooting/#environment_variables","title":"Environment Variables","text":"<pre><code># Check environment variables\nattest env validate --show-missing --show-conflicts\n\n# Export current environment\nattest env export --format yaml &gt; current-env.yaml\n\n# Load environment from file\nattest env load --file production.env\n</code></pre>"},{"location":"troubleshooting/#file_permissions","title":"File Permissions","text":"<pre><code># Check file permissions\nattest permissions audit --fix-issues\n\n# Set correct permissions\nchmod 600 ~/.attest/keys/*  # Private keys\nchmod 644 ~/.attest/config.yaml  # Configuration\nchmod 755 ~/.attest/bin/*  # Binaries\n</code></pre>"},{"location":"troubleshooting/#7_recovery_procedures","title":"7. Recovery Procedures","text":""},{"location":"troubleshooting/#cache_recovery","title":"Cache Recovery","text":"<pre><code># Backup current cache\nattest cache backup --output cache-backup.tar.gz\n\n# Restore from backup\nattest cache restore --input cache-backup.tar.gz\n\n# Rebuild cache from scratch\nattest cache rebuild --from-artifacts\n</code></pre>"},{"location":"troubleshooting/#configuration_recovery","title":"Configuration Recovery","text":"<pre><code># Backup configuration\nattest config backup --output config-backup.yaml\n\n# Restore configuration\nattest config restore --input config-backup.yaml\n\n# Reset to factory defaults\nattest config factory-reset --keep-keys\n</code></pre>"},{"location":"troubleshooting/#key_recovery","title":"Key Recovery","text":"<pre><code># List available keys\nattest keys list --show-backups\n\n# Restore from backup\nattest keys restore --backup-id abc123 --confirm\n\n# Generate new keys (emergency)\nattest keys generate --emergency --backup-old\n</code></pre>"},{"location":"troubleshooting/#8_monitoring_and_alerting","title":"8. Monitoring and Alerting","text":""},{"location":"troubleshooting/#error_monitoring","title":"Error Monitoring","text":"<pre><code># Monitor for errors\nattest monitor errors --duration 1h --threshold 5\n\n# Set up error alerts\nattest alerts configure error-rate \\\n  --threshold 10 \\\n  --window 5m \\\n  --webhook https://alerts.company.com/webhook\n</code></pre>"},{"location":"troubleshooting/#performance_monitoring","title":"Performance Monitoring","text":"<pre><code># Performance dashboards\nattest dashboard create performance \\\n  --metrics \"build_time,cache_hit_rate,error_rate\" \\\n  --export grafana-dashboard.json\n</code></pre>"},{"location":"troubleshooting/#health_monitoring","title":"Health Monitoring","text":"<pre><code># Continuous health monitoring\nattest monitor health \\\n  --interval 30s \\\n  --alert-webhook https://health.company.com/webhook\n</code></pre>"},{"location":"troubleshooting/#9_advanced_debugging","title":"9. Advanced Debugging","text":""},{"location":"troubleshooting/#core_dumps","title":"Core Dumps","text":"<pre><code># Generate core dump for analysis\nattest debug core-dump --on-crash\n\n# Analyze core dump\nattest debug analyze-core core.dump --symbols\n</code></pre>"},{"location":"troubleshooting/#memory_profiling","title":"Memory Profiling","text":"<pre><code># Enable memory profiling\nattest profile memory --duration 10m --output memory.prof\n\n# Analyze memory usage\nattest analyze memory.prof --top 20 --format graph\n</code></pre>"},{"location":"troubleshooting/#network_tracing","title":"Network Tracing","text":"<pre><code># Network trace\nattest trace network --duration 5m --output network.pcap\n\n# Analyze network trace\nattest analyze network.pcap --show-slow-requests\n</code></pre>"},{"location":"troubleshooting/#10_environment-specific_issues","title":"10. Environment-Specific Issues","text":""},{"location":"troubleshooting/#docker_issues","title":"Docker Issues","text":"<pre><code># Docker daemon issues\nattest docker diagnose --fix-common-issues\n\n# Docker permission issues\nattest docker fix-permissions --user $USER\n\n# Docker storage issues\nattest docker cleanup --remove-unused --free-space 2GB\n</code></pre>"},{"location":"troubleshooting/#kubernetes_issues","title":"Kubernetes Issues","text":"<pre><code># Kubernetes connectivity\nattest k8s diagnose --namespace attest-system\n\n# Resource constraints\nattest k8s resources check --recommend-limits\n\n# RBAC issues\nattest k8s rbac verify --fix-permissions\n</code></pre>"},{"location":"troubleshooting/#cicd_platform_issues","title":"CI/CD Platform Issues","text":"<pre><code># GitHub Actions issues\nattest ci diagnose --platform github-actions\nattest ci logs --workflow-run 123456789\n\n# GitLab CI issues  \nattest ci diagnose --platform gitlab-ci\nattest ci logs --job-id 987654321\n</code></pre>"},{"location":"troubleshooting/#11_getting_help","title":"11. Getting Help","text":""},{"location":"troubleshooting/#support_channels","title":"Support Channels","text":"<pre><code># Community support\nattest community --topic troubleshooting\n\n# Documentation search\nattest docs search \"error message\"\n\n# Submit bug report\nattest bug-report --include-logs --include-config\n</code></pre>"},{"location":"troubleshooting/#professional_support","title":"Professional Support","text":"<pre><code># Enterprise support\nattest support create-ticket \\\n  --priority high \\\n  --category troubleshooting \\\n  --attach-diagnostics\n\n# Emergency support\nattest support emergency \\\n  --incident-id INC-123456 \\\n  --contact +1-555-0123\n</code></pre>"},{"location":"troubleshooting/#12_prevention_best_practices","title":"12. Prevention Best Practices","text":""},{"location":"troubleshooting/#regular_maintenance","title":"Regular Maintenance","text":"<pre><code># Scheduled maintenance\nattest maintenance schedule \\\n  --weekly \"cache-cleanup,log-rotation\" \\\n  --monthly \"key-rotation,backup-verification\"\n</code></pre>"},{"location":"troubleshooting/#monitoring_setup","title":"Monitoring Setup","text":"<pre><code># Comprehensive monitoring\nattest monitoring setup \\\n  --prometheus \\\n  --grafana \\\n  --alertmanager \\\n  --log-aggregation\n</code></pre>"},{"location":"troubleshooting/#backup_verification","title":"Backup Verification","text":"<pre><code># Regular backup tests\nattest backup test \\\n  --restore-to-temp \\\n  --verify-integrity \\\n  --schedule weekly\n</code></pre>"},{"location":"troubleshooting/#13_quick_reference","title":"13. Quick Reference","text":""},{"location":"troubleshooting/#emergency_commands","title":"Emergency Commands","text":"<pre><code># Stop all running builds\nattest stop --all\n\n# Emergency cache clear\nattest cache clear --all --force\n\n# Bypass all policies (emergency only)\nattest run --bypass-all-policies --emergency-override\n\n# Factory reset (keeps user data)\nattest reset --factory --keep-user-data\n</code></pre>"},{"location":"troubleshooting/#status_commands","title":"Status Commands","text":"<pre><code># Quick status check\nattest status\n\n# Detailed system status\nattest status --verbose --all-components\n\n# Export diagnostics\nattest diagnostics export --full --output diagnostics.tar.gz\n</code></pre> <p>This troubleshooting guide provides comprehensive solutions for common ATTEST issues and debugging techniques for advanced problems.</p>"}]}